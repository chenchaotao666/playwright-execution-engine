{"version":3,"file":"playwright-execution-engine.es.js","sources":["../src/utils/logger.js","../src/dom/wait-manager.js","../src/dom/event-simulator.js","../src/adapters/locator-adapter.js","../src/adapters/page-adapter.js","../src/adapters/expect-adapter.js","../src/runtime/playwright-runtime.js","../src/runtime/test-runner.js","../src/index.js"],"sourcesContent":["/**\n * 简单的日志系统\n */\nclass Logger {\n  constructor(level = 'info') {\n    this.level = level;\n    this.levels = {\n      debug: 0,\n      info: 1,\n      warn: 2,\n      error: 3\n    };\n  }\n\n  debug(message, ...args) {\n    if (this.levels[this.level] <= this.levels.debug) {\n      console.debug(`[DEBUG] ${message}`, ...args);\n    }\n  }\n\n  info(message, ...args) {\n    if (this.levels[this.level] <= this.levels.info) {\n      console.info(`[INFO] ${message}`, ...args);\n    }\n  }\n\n  warn(message, ...args) {\n    if (this.levels[this.level] <= this.levels.warn) {\n      console.warn(`[WARN] ${message}`, ...args);\n    }\n  }\n\n  error(message, ...args) {\n    if (this.levels[this.level] <= this.levels.error) {\n      console.error(`[ERROR] ${message}`, ...args);\n    }\n  }\n\n  success(message, ...args) {\n    if (this.levels[this.level] <= this.levels.info) {\n      console.log(`%c[SUCCESS] ${message}`, 'color: green', ...args);\n    }\n  }\n}\n\n// 导出给浏览器使用\nif (typeof window !== 'undefined') {\n  window.PlaywrightLogger = Logger;\n}\n\n// Node.js 环境\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = Logger;\n}\n\n// ES6 模块导出\nexport default Logger;","/**\n * 等待管理器 - 处理各种等待机制\n */\nclass WaitManager {\n  constructor() {\n    this.defaultTimeout = 30000;\n    this.logger = new (window.PlaywrightLogger || console)();\n  }\n\n  /**\n   * 等待元素出现\n   */\n  async waitForElement(selector, timeout = this.defaultTimeout) {\n    return new Promise((resolve, reject) => {\n      const startTime = Date.now();\n      \n      // 立即检查\n      const existing = document.querySelector(selector);\n      if (existing) {\n        this.logger.debug(`元素立即找到: ${selector}`);\n        return resolve(existing);\n      }\n\n      let timeoutId;\n      let observer;\n\n      const cleanup = () => {\n        if (timeoutId) clearTimeout(timeoutId);\n        if (observer) observer.disconnect();\n      };\n\n      // 设置超时\n      timeoutId = setTimeout(() => {\n        cleanup();\n        reject(new Error(`等待元素超时: ${selector} (${timeout}ms)`));\n      }, timeout);\n\n      // 监听 DOM 变化\n      observer = new MutationObserver(() => {\n        const element = document.querySelector(selector);\n        if (element) {\n          cleanup();\n          const elapsed = Date.now() - startTime;\n          this.logger.debug(`元素找到: ${selector} (${elapsed}ms)`);\n          resolve(element);\n        }\n      });\n\n      observer.observe(document.body, {\n        childList: true,\n        subtree: true,\n        attributes: true\n      });\n    });\n  }\n\n  /**\n   * 等待条件满足\n   */\n  async waitForCondition(conditionFn, timeout = this.defaultTimeout, errorMessage = '等待条件超时') {\n    return new Promise((resolve, reject) => {\n      const startTime = Date.now();\n      \n      const check = async () => {\n        try {\n          const result = await conditionFn();\n          if (result) {\n            const elapsed = Date.now() - startTime;\n            this.logger.debug(`条件满足 (${elapsed}ms)`);\n            resolve(result);\n            return;\n          }\n        } catch (error) {\n          // 继续等待，忽略错误\n          this.logger.debug('条件检查出错，继续等待:', error.message);\n        }\n\n        if (Date.now() - startTime >= timeout) {\n          reject(new Error(`${errorMessage} (${timeout}ms)`));\n          return;\n        }\n\n        setTimeout(check, 100);\n      };\n\n      check();\n    });\n  }\n\n  /**\n   * 等待函数返回真值\n   */\n  async waitForFunction(fn, timeout = this.defaultTimeout) {\n    return this.waitForCondition(fn, timeout, '等待函数条件超时');\n  }\n\n  /**\n   * 等待 URL 变化\n   */\n  async waitForURL(urlPattern, timeout = this.defaultTimeout) {\n    return this.waitForCondition(\n      () => {\n        const currentUrl = window.location.href;\n        if (typeof urlPattern === 'string') {\n          return currentUrl.includes(urlPattern);\n        }\n        if (urlPattern instanceof RegExp) {\n          return urlPattern.test(currentUrl);\n        }\n        return false;\n      },\n      timeout,\n      `等待URL变化超时: ${urlPattern}`\n    );\n  }\n\n  /**\n   * 等待页面加载状态\n   */\n  async waitForLoadState(state = 'load') {\n    return new Promise((resolve) => {\n      const checkState = () => {\n        if (state === 'load' && document.readyState === 'complete') {\n          this.logger.debug('页面完全加载');\n          resolve();\n        } else if (state === 'domcontentloaded' && document.readyState !== 'loading') {\n          this.logger.debug('DOM 内容加载完成');\n          resolve();\n        } else if (state === 'networkidle') {\n          // 简单实现：等待 500ms 无网络请求\n          setTimeout(() => {\n            this.logger.debug('网络空闲');\n            resolve();\n          }, 500);\n        }\n      };\n\n      if (document.readyState === 'complete' && state === 'load') {\n        resolve();\n      } else if (document.readyState !== 'loading' && state === 'domcontentloaded') {\n        resolve();\n      } else {\n        document.addEventListener('readystatechange', checkState, { once: true });\n      }\n    });\n  }\n\n  /**\n   * 简单延时\n   */\n  async waitForTimeout(ms) {\n    this.logger.debug(`等待 ${ms}ms`);\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n}\n\n// 导出给浏览器使用\nif (typeof window !== 'undefined') {\n  window.PlaywrightWaitManager = WaitManager;\n}\n\n// Node.js 环境\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = WaitManager;\n}\n\n// ES6 模块导出\nexport default WaitManager;","/**\n * 事件模拟器 - 模拟各种用户交互事件\n */\nclass EventSimulator {\n  constructor() {\n    this.logger = new (window.PlaywrightLogger || console)();\n  }\n\n  /**\n   * 模拟点击事件\n   */\n  simulateClick(element, options = {}) {\n    const { button = 0, clickCount = 1, delay = 0 } = options;\n    \n    // 确保元素获得焦点\n    element.focus();\n\n    // 触发完整的鼠标事件序列\n    const mouseEvents = ['mousedown', 'mouseup', 'click'];\n    \n    mouseEvents.forEach((eventType, index) => {\n      setTimeout(() => {\n        const event = new MouseEvent(eventType, {\n          view: window,\n          bubbles: true,\n          cancelable: true,\n          button: button,\n          detail: clickCount\n        });\n        \n        element.dispatchEvent(event);\n        this.logger.debug(`触发 ${eventType} 事件`);\n      }, delay * index);\n    });\n  }\n\n  /**\n   * 模拟双击事件\n   */\n  simulateDoubleClick(element) {\n    this.simulateClick(element, { clickCount: 1 });\n    \n    setTimeout(() => {\n      const dblClickEvent = new MouseEvent('dblclick', {\n        view: window,\n        bubbles: true,\n        cancelable: true,\n        detail: 2\n      });\n      element.dispatchEvent(dblClickEvent);\n      this.logger.debug('触发 dblclick 事件');\n    }, 100);\n  }\n\n  /**\n   * 模拟悬停事件\n   */\n  simulateHover(element) {\n    const events = ['mouseover', 'mouseenter'];\n    \n    events.forEach(eventType => {\n      const event = new MouseEvent(eventType, {\n        view: window,\n        bubbles: true,\n        cancelable: true\n      });\n      element.dispatchEvent(event);\n      this.logger.debug(`触发 ${eventType} 事件`);\n    });\n  }\n\n  /**\n   * 模拟键盘事件\n   */\n  simulateKeyPress(element, key, options = {}) {\n    const { ctrlKey = false, shiftKey = false, altKey = false, metaKey = false } = options;\n    \n    element.focus();\n    \n    const keyboardEvents = ['keydown', 'keypress', 'keyup'];\n    \n    keyboardEvents.forEach(eventType => {\n      const event = new KeyboardEvent(eventType, {\n        key: key,\n        code: this.getKeyCode(key),\n        bubbles: true,\n        cancelable: true,\n        ctrlKey,\n        shiftKey,\n        altKey,\n        metaKey\n      });\n      \n      element.dispatchEvent(event);\n      this.logger.debug(`触发 ${eventType} 事件: ${key}`);\n    });\n  }\n\n  /**\n   * 模拟输入序列\n   */\n  async simulateTyping(element, text, options = {}) {\n    const { delay = 50 } = options;\n    \n    element.focus();\n    \n    for (let i = 0; i < text.length; i++) {\n      const char = text[i];\n      \n      // 更新输入值\n      const currentValue = element.value || '';\n      element.value = currentValue + char;\n      \n      // 触发输入事件\n      element.dispatchEvent(new Event('input', { bubbles: true }));\n      this.simulateKeyPress(element, char);\n      \n      if (delay > 0) {\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n    \n    // 触发 change 事件\n    element.dispatchEvent(new Event('change', { bubbles: true }));\n    this.logger.debug(`输入文本: \"${text}\"`);\n  }\n\n  /**\n   * 模拟表单控件变化\n   */\n  simulateFormChange(element, value) {\n    if (element.type === 'checkbox' || element.type === 'radio') {\n      element.checked = value;\n    } else if (element.tagName === 'SELECT') {\n      element.value = value;\n    } else {\n      element.value = value;\n    }\n    \n    // 触发相关事件\n    element.dispatchEvent(new Event('input', { bubbles: true }));\n    element.dispatchEvent(new Event('change', { bubbles: true }));\n    \n    this.logger.debug(`表单控件变化: ${element.tagName} = ${value}`);\n  }\n\n  /**\n   * 获取键码\n   */\n  getKeyCode(key) {\n    const keyCodes = {\n      'Enter': 'Enter',\n      'Escape': 'Escape',\n      'Tab': 'Tab',\n      'Backspace': 'Backspace',\n      'Delete': 'Delete',\n      'ArrowUp': 'ArrowUp',\n      'ArrowDown': 'ArrowDown',\n      'ArrowLeft': 'ArrowLeft',\n      'ArrowRight': 'ArrowRight',\n      ' ': 'Space'\n    };\n    \n    return keyCodes[key] || key;\n  }\n\n  /**\n   * 滚动元素到可视区域\n   */\n  async scrollIntoView(element, options = {}) {\n    const { behavior = 'smooth', block = 'center' } = options;\n    \n    element.scrollIntoView({ behavior, block });\n    \n    // 等待滚动完成\n    await new Promise(resolve => setTimeout(resolve, 100));\n    \n    this.logger.debug('元素滚动到可视区域');\n  }\n}\n\n// 导出给浏览器使用\nif (typeof window !== 'undefined') {\n  window.PlaywrightEventSimulator = EventSimulator;\n}\n\n// Node.js 环境\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = EventSimulator;\n}\n\n// ES6 模块导出\nexport default EventSimulator;","/**\n * Locator 适配器 - 实现 Playwright Locator API\n */\nclass LocatorAdapter {\n  constructor(selector, page, options = {}) {\n    this.selector = selector;\n    this.page = page;\n    this.options = options;\n    this.filters = [];\n    this.logger = new (window.PlaywrightLogger || console)();\n    this.waitManager = page.waitManager;\n    this.eventSimulator = page.eventSimulator;\n  }\n\n  // =============== 链式过滤器方法 ===============\n\n  /**\n   * 过滤 locator\n   */\n  filter(options) {\n    const newLocator = new LocatorAdapter(this.selector, this.page);\n    newLocator.filters = [...this.filters, options];\n    return newLocator;\n  }\n\n  /**\n   * 获取第一个元素\n   */\n  first() {\n    return this.nth(0);\n  }\n\n  /**\n   * 获取最后一个元素\n   */\n  last() {\n    return this.filter({ position: 'last' });\n  }\n\n  /**\n   * 获取第 n 个元素\n   */\n  nth(n) {\n    return this.filter({ position: n });\n  }\n\n  /**\n   * 根据文本过滤\n   */\n  getByText(text, options = {}) {\n    return this.filter({ hasText: text, exact: options.exact });\n  }\n\n  // =============== 核心操作方法 ===============\n\n  /**\n   * 点击元素\n   */\n  async click(options = {}) {\n    const element = await this.getElement();\n    await this.page.scrollIntoViewIfNeeded(element);\n    \n    this.eventSimulator.simulateClick(element, options);\n    this.logger.debug(`点击元素: ${this.selector}`);\n  }\n\n  /**\n   * 双击元素\n   */\n  async dblclick(options = {}) {\n    const element = await this.getElement();\n    await this.page.scrollIntoViewIfNeeded(element);\n    \n    this.eventSimulator.simulateDoubleClick(element);\n    this.logger.debug(`双击元素: ${this.selector}`);\n  }\n\n  /**\n   * 填充表单\n   */\n  async fill(value, options = {}) {\n    const element = await this.getElement();\n    await this.page.scrollIntoViewIfNeeded(element);\n    \n    // 清空并填充\n    element.value = '';\n    element.value = value;\n    \n    // 触发相关事件\n    element.dispatchEvent(new Event('input', { bubbles: true }));\n    element.dispatchEvent(new Event('change', { bubbles: true }));\n    \n    this.logger.debug(`填充元素: ${this.selector} = \"${value}\"`);\n  }\n\n  /**\n   * 按键操作\n   */\n  async press(key, options = {}) {\n    const element = await this.getElement();\n    element.focus();\n    \n    this.eventSimulator.simulateKeyPress(element, key, options);\n    this.logger.debug(`按键: ${this.selector} -> ${key}`);\n  }\n\n  /**\n   * 逐字符输入（模拟打字）\n   */\n  async pressSequentially(text, options = {}) {\n    const element = await this.getElement();\n    await this.eventSimulator.simulateTyping(element, text, options);\n    this.logger.debug(`逐字符输入: ${this.selector} -> \"${text}\"`);\n  }\n\n  /**\n   * 悬停\n   */\n  async hover() {\n    const element = await this.getElement();\n    await this.page.scrollIntoViewIfNeeded(element);\n    \n    this.eventSimulator.simulateHover(element);\n    this.logger.debug(`悬停元素: ${this.selector}`);\n  }\n\n  /**\n   * 选择复选框\n   */\n  async check() {\n    const element = await this.getElement();\n    if (element.type === 'checkbox' || element.type === 'radio') {\n      element.checked = true;\n      element.dispatchEvent(new Event('change', { bubbles: true }));\n      this.logger.debug(`选择复选框: ${this.selector}`);\n    }\n  }\n\n  /**\n   * 取消选择复选框\n   */\n  async uncheck() {\n    const element = await this.getElement();\n    if (element.type === 'checkbox') {\n      element.checked = false;\n      element.dispatchEvent(new Event('change', { bubbles: true }));\n      this.logger.debug(`取消选择复选框: ${this.selector}`);\n    }\n  }\n\n  /**\n   * 选择下拉选项\n   */\n  async selectOption(values, options = {}) {\n    const element = await this.getElement();\n    if (element.tagName === 'SELECT') {\n      if (Array.isArray(values)) {\n        // 多选\n        Array.from(element.options).forEach(option => {\n          option.selected = values.includes(option.value) || values.includes(option.text);\n        });\n      } else {\n        element.value = values;\n      }\n      element.dispatchEvent(new Event('change', { bubbles: true }));\n      this.logger.debug(`选择下拉选项: ${this.selector} = ${values}`);\n    }\n  }\n\n  // =============== 状态检查方法 ===============\n\n  /**\n   * 检查元素是否可见\n   */\n  async isVisible() {\n    try {\n      const element = await this.getElement();\n      const rect = element.getBoundingClientRect();\n      const style = getComputedStyle(element);\n      \n      return rect.width > 0 && \n             rect.height > 0 && \n             style.visibility !== 'hidden' && \n             style.display !== 'none' &&\n             element.offsetParent !== null;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * 检查元素是否隐藏\n   */\n  async isHidden() {\n    return !(await this.isVisible());\n  }\n\n  /**\n   * 检查元素是否启用\n   */\n  async isEnabled() {\n    try {\n      const element = await this.getElement();\n      return !element.disabled && !element.hasAttribute('disabled');\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * 检查元素是否禁用\n   */\n  async isDisabled() {\n    return !(await this.isEnabled());\n  }\n\n  /**\n   * 检查复选框是否选中\n   */\n  async isChecked() {\n    try {\n      const element = await this.getElement();\n      return element.checked || false;\n    } catch {\n      return false;\n    }\n  }\n\n  // =============== 内容获取方法 ===============\n\n  /**\n   * 获取文本内容\n   */\n  async textContent() {\n    const element = await this.getElement();\n    return element.textContent || '';\n  }\n\n  /**\n   * 获取内部文本\n   */\n  async innerText() {\n    const element = await this.getElement();\n    return element.innerText || '';\n  }\n\n  /**\n   * 获取 HTML 内容\n   */\n  async innerHTML() {\n    const element = await this.getElement();\n    return element.innerHTML || '';\n  }\n\n  /**\n   * 获取属性值\n   */\n  async getAttribute(name) {\n    const element = await this.getElement();\n    return element.getAttribute(name);\n  }\n\n  /**\n   * 获取输入值\n   */\n  async inputValue() {\n    const element = await this.getElement();\n    return element.value || '';\n  }\n\n  // =============== 等待方法 ===============\n\n  /**\n   * 等待元素状态\n   */\n  async waitFor(options = {}) {\n    const { state = 'visible', timeout = 30000 } = options;\n    \n    switch (state) {\n      case 'visible':\n        return this.waitForVisible(timeout);\n      case 'hidden':\n        return this.waitForHidden(timeout);\n      case 'attached':\n        return this.waitForAttached(timeout);\n      case 'detached':\n        return this.waitForDetached(timeout);\n      default:\n        throw new Error(`未知的等待状态: ${state}`);\n    }\n  }\n\n  async waitForVisible(timeout) {\n    return this.waitManager.waitForCondition(\n      () => this.isVisible(),\n      timeout,\n      `元素 \"${this.selector}\" 等待可见超时`\n    );\n  }\n\n  async waitForHidden(timeout) {\n    return this.waitManager.waitForCondition(\n      () => this.isHidden(),\n      timeout,\n      `元素 \"${this.selector}\" 等待隐藏超时`\n    );\n  }\n\n  async waitForAttached(timeout) {\n    return this.waitManager.waitForCondition(\n      () => this.count() > 0,\n      timeout,\n      `元素 \"${this.selector}\" 等待附加到DOM超时`\n    );\n  }\n\n  async waitForDetached(timeout) {\n    return this.waitManager.waitForCondition(\n      () => this.count() === 0,\n      timeout,\n      `元素 \"${this.selector}\" 等待从DOM分离超时`\n    );\n  }\n\n  // =============== 内部方法 ===============\n\n  /**\n   * 获取元素数量\n   */\n  async count() {\n    const elements = document.querySelectorAll(this.selector);\n    return this.applyFilters(Array.from(elements)).length;\n  }\n\n  /**\n   * 获取所有匹配的元素\n   */\n  async all() {\n    const elements = document.querySelectorAll(this.selector);\n    const filtered = this.applyFilters(Array.from(elements));\n    \n    return filtered.map(element => {\n      const locator = new LocatorAdapter(this.buildUniqueSelector(element), this.page);\n      locator._element = element; // 缓存元素\n      return locator;\n    });\n  }\n\n  /**\n   * 获取单个元素\n   */\n  async getElement() {\n    // 如果有缓存的元素，直接返回\n    if (this._element && document.contains(this._element)) {\n      return this._element;\n    }\n\n    const elements = document.querySelectorAll(this.selector);\n    \n    if (elements.length === 0) {\n      throw new Error(`找不到元素: ${this.selector}`);\n    }\n\n    const filteredElements = this.applyFilters(Array.from(elements));\n\n    if (filteredElements.length === 0) {\n      throw new Error(`过滤后找不到元素: ${this.selector}`);\n    }\n\n    return filteredElements[0];\n  }\n\n  /**\n   * 应用过滤器\n   */\n  applyFilters(elements) {\n    let filtered = elements;\n    \n    for (const filter of this.filters) {\n      filtered = this.applyFilter(filtered, filter);\n    }\n\n    return filtered;\n  }\n\n  /**\n   * 应用单个过滤器\n   */\n  applyFilter(elements, filter) {\n    if (typeof filter.position === 'number') {\n      return elements[filter.position] ? [elements[filter.position]] : [];\n    }\n    \n    if (filter.position === 'last') {\n      return elements.length > 0 ? [elements[elements.length - 1]] : [];\n    }\n\n    if (filter.hasText) {\n      return elements.filter(el => {\n        const text = el.textContent || el.innerText || '';\n        return filter.exact ? text === filter.hasText : text.includes(filter.hasText);\n      });\n    }\n\n    if (filter.hasNotText) {\n      return elements.filter(el => {\n        const text = el.textContent || el.innerText || '';\n        return !text.includes(filter.hasNotText);\n      });\n    }\n\n    return elements;\n  }\n\n  /**\n   * 构建唯一选择器\n   */\n  buildUniqueSelector(element) {\n    if (element.id) {\n      return `#${element.id}`;\n    }\n    \n    // 构建路径选择器\n    const path = [];\n    let current = element;\n    \n    while (current && current !== document.body) {\n      let selector = current.tagName.toLowerCase();\n      \n      if (current.className) {\n        const classes = current.className.split(' ').filter(c => c.trim());\n        if (classes.length > 0) {\n          selector += '.' + classes.join('.');\n        }\n      }\n      \n      // 添加位置信息以确保唯一性\n      const siblings = Array.from(current.parentNode?.children || [])\n        .filter(sibling => sibling.tagName === current.tagName);\n      \n      if (siblings.length > 1) {\n        const index = siblings.indexOf(current);\n        selector += `:nth-of-type(${index + 1})`;\n      }\n      \n      path.unshift(selector);\n      current = current.parentElement;\n    }\n    \n    return path.join(' > ');\n  }\n}\n\n// 导出给浏览器使用\nif (typeof window !== 'undefined') {\n  window.PlaywrightLocatorAdapter = LocatorAdapter;\n}\n\n// Node.js 环境\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = LocatorAdapter;\n}\n\n// ES6 模块导出\nexport default LocatorAdapter;","/**\n * Page 适配器 - 实现 Playwright Page API\n */\nclass PageAdapter {\n  constructor() {\n    this.logger = new (window.PlaywrightLogger || console)();\n    this.waitManager = new (window.PlaywrightWaitManager || WaitManager)();\n    this.eventSimulator = new (window.PlaywrightEventSimulator || EventSimulator)();\n  }\n\n  // =============== 导航方法 ===============\n\n  /**\n   * 导航到指定 URL\n   */\n  async goto(url, options = {}) {\n    const { waitUntil = 'load', timeout = 30000 } = options;\n    \n    this.logger.info(`导航到: ${url}`);\n    \n    if (window.location.href !== url) {\n      window.location.href = url;\n      await this.waitForLoadState(waitUntil, timeout);\n    }\n    \n    return { url: window.location.href, status: 200 };\n  }\n\n  /**\n   * 后退\n   */\n  async goBack(options = {}) {\n    const { waitUntil = 'load' } = options;\n    window.history.back();\n    await this.waitForLoadState(waitUntil);\n  }\n\n  /**\n   * 前进\n   */\n  async goForward(options = {}) {\n    const { waitUntil = 'load' } = options;\n    window.history.forward();\n    await this.waitForLoadState(waitUntil);\n  }\n\n  /**\n   * 刷新页面\n   */\n  async reload(options = {}) {\n    const { waitUntil = 'load' } = options;\n    window.location.reload();\n    await this.waitForLoadState(waitUntil);\n  }\n\n  // =============== 页面信息获取 ===============\n\n  /**\n   * 获取当前 URL\n   */\n  url() {\n    return window.location.href;\n  }\n\n  /**\n   * 获取页面标题\n   */\n  async title() {\n    return document.title;\n  }\n\n  /**\n   * 获取页面内容\n   */\n  async content() {\n    return document.documentElement.outerHTML;\n  }\n\n  // =============== 元素交互方法 ===============\n\n  /**\n   * 点击元素\n   */\n  async click(selector, options = {}) {\n    const element = await this.waitForSelector(selector);\n    await this.scrollIntoViewIfNeeded(element);\n    \n    this.eventSimulator.simulateClick(element, options);\n    this.logger.debug(`点击: ${selector}`);\n  }\n\n  /**\n   * 双击元素\n   */\n  async dblclick(selector, options = {}) {\n    const element = await this.waitForSelector(selector);\n    await this.scrollIntoViewIfNeeded(element);\n    \n    this.eventSimulator.simulateDoubleClick(element);\n    this.logger.debug(`双击: ${selector}`);\n  }\n\n  /**\n   * 填充表单\n   */\n  async fill(selector, value, options = {}) {\n    const element = await this.waitForSelector(selector);\n    await this.scrollIntoViewIfNeeded(element);\n    \n    // 清空并填充\n    element.value = '';\n    element.value = value;\n    \n    // 触发相关事件\n    element.dispatchEvent(new Event('input', { bubbles: true }));\n    element.dispatchEvent(new Event('change', { bubbles: true }));\n    \n    this.logger.debug(`填充: ${selector} = \"${value}\"`);\n  }\n\n  /**\n   * 按键操作\n   */\n  async press(selector, key, options = {}) {\n    const element = await this.waitForSelector(selector);\n    element.focus();\n    \n    this.eventSimulator.simulateKeyPress(element, key, options);\n    this.logger.debug(`按键: ${selector} -> ${key}`);\n  }\n\n  /**\n   * 输入文本（模拟打字）\n   */\n  async type(selector, text, options = {}) {\n    const element = await this.waitForSelector(selector);\n    await this.eventSimulator.simulateTyping(element, text, options);\n    this.logger.debug(`输入: ${selector} -> \"${text}\"`);\n  }\n\n  /**\n   * 悬停\n   */\n  async hover(selector) {\n    const element = await this.waitForSelector(selector);\n    await this.scrollIntoViewIfNeeded(element);\n    \n    this.eventSimulator.simulateHover(element);\n    this.logger.debug(`悬停: ${selector}`);\n  }\n\n  /**\n   * 选择复选框\n   */\n  async check(selector) {\n    const element = await this.waitForSelector(selector);\n    if (element.type === 'checkbox' || element.type === 'radio') {\n      element.checked = true;\n      element.dispatchEvent(new Event('change', { bubbles: true }));\n      this.logger.debug(`选择: ${selector}`);\n    }\n  }\n\n  /**\n   * 取消选择复选框\n   */\n  async uncheck(selector) {\n    const element = await this.waitForSelector(selector);\n    if (element.type === 'checkbox') {\n      element.checked = false;\n      element.dispatchEvent(new Event('change', { bubbles: true }));\n      this.logger.debug(`取消选择: ${selector}`);\n    }\n  }\n\n  /**\n   * 选择下拉选项\n   */\n  async selectOption(selector, values, options = {}) {\n    const element = await this.waitForSelector(selector);\n    if (element.tagName === 'SELECT') {\n      if (Array.isArray(values)) {\n        // 多选\n        Array.from(element.options).forEach(option => {\n          option.selected = values.includes(option.value) || values.includes(option.text);\n        });\n      } else {\n        element.value = values;\n      }\n      element.dispatchEvent(new Event('change', { bubbles: true }));\n      this.logger.debug(`选择选项: ${selector} = ${values}`);\n    }\n  }\n\n  // =============== 现代定位器方法 ===============\n\n  /**\n   * 创建 Locator\n   */\n  locator(selector, options = {}) {\n    return new (window.PlaywrightLocatorAdapter || LocatorAdapter)(selector, this, options);\n  }\n\n  /**\n   * 根据角色定位\n   */\n  getByRole(role, options = {}) {\n    const { name, exact = false, level } = options;\n    let selector = `[role=\"${role}\"]`;\n    \n    if (name) {\n      if (exact) {\n        selector += `[aria-label=\"${name}\"], [role=\"${role}\"][aria-labelledby] *:contains(\"${name}\")`;\n      } else {\n        selector += `[aria-label*=\"${name}\"], [role=\"${role}\"][aria-labelledby] *:contains(\"${name}\")`;\n      }\n    }\n    \n    if (level && role === 'heading') {\n      selector = `h${level}[role=\"heading\"], h${level}`;\n    }\n    \n    return this.locator(selector);\n  }\n\n  /**\n   * 根据文本定位\n   */\n  getByText(text, options = {}) {\n    const { exact = false } = options;\n    let xpath;\n    \n    if (exact) {\n      xpath = `//*[normalize-space(text())=\"${text}\"]`;\n    } else {\n      xpath = `//*[contains(normalize-space(text()), \"${text}\")]`;\n    }\n    \n    return this.locator(`xpath=${xpath}`);\n  }\n\n  /**\n   * 根据标签定位\n   */\n  getByLabel(text, options = {}) {\n    const { exact = false } = options;\n    \n    // 查找 label 关联的 input\n    const labelSelector = exact \n      ? `label:contains(\"${text}\")` \n      : `label:contains(\"${text}\")`;\n    \n    // 通过 for 属性或包含关系查找\n    const selector = `${labelSelector} input, input[id]:has(+ label:contains(\"${text}\")), input[aria-labelledby]:has(~ *:contains(\"${text}\"))`;\n    \n    return this.locator(selector);\n  }\n\n  /**\n   * 根据占位符定位\n   */\n  getByPlaceholder(text, options = {}) {\n    const { exact = false } = options;\n    const selector = exact \n      ? `[placeholder=\"${text}\"]`\n      : `[placeholder*=\"${text}\"]`;\n    \n    return this.locator(selector);\n  }\n\n  /**\n   * 根据测试 ID 定位\n   */\n  getByTestId(testId) {\n    return this.locator(`[data-testid=\"${testId}\"]`);\n  }\n\n  /**\n   * 根据标题定位\n   */\n  getByTitle(text, options = {}) {\n    const { exact = false } = options;\n    const selector = exact \n      ? `[title=\"${text}\"]`\n      : `[title*=\"${text}\"]`;\n    \n    return this.locator(selector);\n  }\n\n  // =============== 等待方法 ===============\n\n  /**\n   * 等待元素\n   */\n  async waitForSelector(selector, options = {}) {\n    const { timeout = 30000, state = 'visible' } = options;\n    \n    // 如果是 xpath，需要特殊处理\n    if (selector.startsWith('xpath=')) {\n      return this.waitForXPath(selector.substring(6), { timeout, state });\n    }\n    \n    const element = await this.waitManager.waitForElement(selector, timeout);\n    \n    if (state === 'visible') {\n      await this.waitManager.waitForCondition(\n        () => {\n          const rect = element.getBoundingClientRect();\n          const style = getComputedStyle(element);\n          return rect.width > 0 && rect.height > 0 && \n                 style.visibility !== 'hidden' && style.display !== 'none';\n        },\n        timeout,\n        `元素 \"${selector}\" 等待可见超时`\n      );\n    }\n    \n    return element;\n  }\n\n  /**\n   * 等待 XPath 元素\n   */\n  async waitForXPath(xpath, options = {}) {\n    const { timeout = 30000 } = options;\n    \n    return this.waitManager.waitForCondition(\n      () => {\n        const result = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);\n        return result.singleNodeValue;\n      },\n      timeout,\n      `XPath 元素等待超时: ${xpath}`\n    );\n  }\n\n  /**\n   * 等待超时\n   */\n  async waitForTimeout(ms) {\n    return this.waitManager.waitForTimeout(ms);\n  }\n\n  /**\n   * 等待函数\n   */\n  async waitForFunction(fn, arg, options = {}) {\n    const { timeout = 30000 } = options;\n    return this.waitManager.waitForCondition(\n      () => fn(arg),\n      timeout,\n      '等待函数条件超时'\n    );\n  }\n\n  /**\n   * 等待 URL\n   */\n  async waitForURL(url, options = {}) {\n    const { timeout = 30000 } = options;\n    return this.waitManager.waitForURL(url, timeout);\n  }\n\n  /**\n   * 等待加载状态\n   */\n  async waitForLoadState(state = 'load', timeout = 30000) {\n    return this.waitManager.waitForLoadState(state);\n  }\n\n  // =============== 脚本执行方法 ===============\n\n  /**\n   * 在页面上下文中执行脚本\n   */\n  async evaluate(fn, ...args) {\n    try {\n      return fn.apply(window, args);\n    } catch (error) {\n      this.logger.error('脚本执行失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 在页面上下文中执行脚本并返回句柄\n   */\n  async evaluateHandle(fn, ...args) {\n    return this.evaluate(fn, ...args);\n  }\n\n  /**\n   * 添加脚本标签\n   */\n  async addScriptTag(options = {}) {\n    const { url, path, content, type = 'text/javascript' } = options;\n    \n    const script = document.createElement('script');\n    script.type = type;\n    \n    if (url) {\n      script.src = url;\n    } else if (content) {\n      script.textContent = content;\n    }\n    \n    document.head.appendChild(script);\n    \n    // 等待脚本加载\n    if (url) {\n      await new Promise((resolve, reject) => {\n        script.onload = resolve;\n        script.onerror = reject;\n      });\n    }\n    \n    this.logger.debug('添加脚本标签');\n    return script;\n  }\n\n  /**\n   * 添加样式标签\n   */\n  async addStyleTag(options = {}) {\n    const { url, path, content } = options;\n    \n    if (url) {\n      const link = document.createElement('link');\n      link.rel = 'stylesheet';\n      link.href = url;\n      document.head.appendChild(link);\n      return link;\n    } else if (content) {\n      const style = document.createElement('style');\n      style.textContent = content;\n      document.head.appendChild(style);\n      return style;\n    }\n  }\n\n  // =============== 辅助方法 ===============\n\n  /**\n   * 滚动元素到可视区域\n   */\n  async scrollIntoViewIfNeeded(element) {\n    const rect = element.getBoundingClientRect();\n    const isInViewport = rect.top >= 0 && rect.bottom <= window.innerHeight &&\n                        rect.left >= 0 && rect.right <= window.innerWidth;\n    \n    if (!isInViewport) {\n      element.scrollIntoView({ behavior: 'smooth', block: 'center' });\n      await this.waitForTimeout(100); // 等待滚动完成\n      this.logger.debug('元素滚动到可视区域');\n    }\n  }\n\n  /**\n   * 获取元素边界框\n   */\n  async boundingBox(selector) {\n    const element = await this.waitForSelector(selector);\n    const rect = element.getBoundingClientRect();\n    \n    return {\n      x: rect.left + window.scrollX,\n      y: rect.top + window.scrollY,\n      width: rect.width,\n      height: rect.height\n    };\n  }\n\n  /**\n   * 设置视口大小（有限支持）\n   */\n  async setViewportSize(size) {\n    // 浏览器环境中无法直接设置视口大小\n    // 这里只是记录日志\n    this.logger.warn('浏览器环境中无法设置视口大小');\n    return { width: window.innerWidth, height: window.innerHeight };\n  }\n\n  /**\n   * 获取视口大小\n   */\n  viewportSize() {\n    return { width: window.innerWidth, height: window.innerHeight };\n  }\n}\n\n// 导出给浏览器使用\nif (typeof window !== 'undefined') {\n  window.PlaywrightPageAdapter = PageAdapter;\n}\n\n// Node.js 环境\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = PageAdapter;\n}\n\n// ES6 模块导出\nexport default PageAdapter;","/**\n * Expect 适配器 - 实现 Playwright Expect API\n */\nclass ExpectAdapter {\n  constructor(target, options = {}) {\n    this.target = target;\n    this.isNot = false;\n    this.timeout = options.timeout || 5000;\n    this.logger = new (window.PlaywrightLogger || console)();\n  }\n\n  /**\n   * 取反\n   */\n  get not() {\n    const newExpect = new ExpectAdapter(this.target, { timeout: this.timeout });\n    newExpect.isNot = !this.isNot;\n    return newExpect;\n  }\n\n  // =============== 可见性断言 ===============\n\n  /**\n   * 断言元素可见\n   */\n  async toBeVisible(options = {}) {\n    const timeout = options.timeout || this.timeout;\n    const expected = !this.isNot;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const isVisible = await this.target.isVisible();\n          return isVisible === expected;\n        },\n        timeout,\n        `期望元素${expected ? '可见' : '不可见'}`\n      );\n      \n      this.logger.debug(`✅ 元素${expected ? '可见' : '不可见'}断言通过`);\n    } catch (error) {\n      const actualVisible = await this.target.isVisible();\n      throw new Error(`期望元素${expected ? '可见' : '不可见'}，但实际${actualVisible ? '可见' : '不可见'}`);\n    }\n  }\n\n  /**\n   * 断言元素隐藏\n   */\n  async toBeHidden(options = {}) {\n    const timeout = options.timeout || this.timeout;\n    const expected = this.isNot;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const isVisible = await this.target.isVisible();\n          return isVisible === expected;\n        },\n        timeout,\n        `期望元素${expected ? '可见' : '隐藏'}`\n      );\n      \n      this.logger.debug(`✅ 元素${expected ? '可见' : '隐藏'}断言通过`);\n    } catch (error) {\n      const actualVisible = await this.target.isVisible();\n      throw new Error(`期望元素${expected ? '可见' : '隐藏'}，但实际${actualVisible ? '可见' : '隐藏'}`);\n    }\n  }\n\n  // =============== 状态断言 ===============\n\n  /**\n   * 断言元素启用\n   */\n  async toBeEnabled(options = {}) {\n    const timeout = options.timeout || this.timeout;\n    const expected = !this.isNot;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const isEnabled = await this.target.isEnabled();\n          return isEnabled === expected;\n        },\n        timeout,\n        `期望元素${expected ? '启用' : '禁用'}`\n      );\n      \n      this.logger.debug(`✅ 元素${expected ? '启用' : '禁用'}断言通过`);\n    } catch (error) {\n      const actualEnabled = await this.target.isEnabled();\n      throw new Error(`期望元素${expected ? '启用' : '禁用'}，但实际${actualEnabled ? '启用' : '禁用'}`);\n    }\n  }\n\n  /**\n   * 断言元素禁用\n   */\n  async toBeDisabled(options = {}) {\n    const timeout = options.timeout || this.timeout;\n    const expected = this.isNot;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const isEnabled = await this.target.isEnabled();\n          return isEnabled === expected;\n        },\n        timeout,\n        `期望元素${expected ? '启用' : '禁用'}`\n      );\n      \n      this.logger.debug(`✅ 元素${expected ? '启用' : '禁用'}断言通过`);\n    } catch (error) {\n      const actualEnabled = await this.target.isEnabled();\n      throw new Error(`期望元素${expected ? '启用' : '禁用'}，但实际${actualEnabled ? '启用' : '禁用'}`);\n    }\n  }\n\n  /**\n   * 断言复选框选中\n   */\n  async toBeChecked(options = {}) {\n    const timeout = options.timeout || this.timeout;\n    const expected = !this.isNot;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const isChecked = await this.target.isChecked();\n          return isChecked === expected;\n        },\n        timeout,\n        `期望元素${expected ? '选中' : '未选中'}`\n      );\n      \n      this.logger.debug(`✅ 元素${expected ? '选中' : '未选中'}断言通过`);\n    } catch (error) {\n      const actualChecked = await this.target.isChecked();\n      throw new Error(`期望元素${expected ? '选中' : '未选中'}，但实际${actualChecked ? '选中' : '未选中'}`);\n    }\n  }\n\n  // =============== 内容断言 ===============\n\n  /**\n   * 断言包含文本\n   */\n  async toHaveText(expectedText, options = {}) {\n    const timeout = options.timeout || this.timeout;\n    const useInnerText = options.useInnerText || false;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const actualText = useInnerText \n            ? await this.target.innerText()\n            : await this.target.textContent();\n          \n          let matches;\n          if (Array.isArray(expectedText)) {\n            matches = expectedText.every(text => actualText.includes(text));\n          } else if (expectedText instanceof RegExp) {\n            matches = expectedText.test(actualText);\n          } else {\n            matches = actualText.includes(expectedText);\n          }\n          \n          return this.isNot ? !matches : matches;\n        },\n        timeout,\n        `期望文本${this.isNot ? '不' : ''}包含 \"${expectedText}\"`\n      );\n      \n      this.logger.debug(`✅ 文本${this.isNot ? '不' : ''}包含断言通过`);\n    } catch (error) {\n      const actualText = useInnerText \n        ? await this.target.innerText()\n        : await this.target.textContent();\n      throw new Error(`期望文本${this.isNot ? '不' : ''}包含 \"${expectedText}\"，但实际文本为 \"${actualText}\"`);\n    }\n  }\n\n  /**\n   * 断言确切文本\n   */\n  async toHaveExactText(expectedText, options = {}) {\n    const timeout = options.timeout || this.timeout;\n    const useInnerText = options.useInnerText || false;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const actualText = useInnerText \n            ? await this.target.innerText()\n            : await this.target.textContent();\n          \n          const matches = actualText.trim() === expectedText.trim();\n          return this.isNot ? !matches : matches;\n        },\n        timeout,\n        `期望文本${this.isNot ? '不' : ''}完全匹配 \"${expectedText}\"`\n      );\n      \n      this.logger.debug(`✅ 确切文本${this.isNot ? '不' : ''}匹配断言通过`);\n    } catch (error) {\n      const actualText = useInnerText \n        ? await this.target.innerText()\n        : await this.target.textContent();\n      throw new Error(`期望文本${this.isNot ? '不' : ''}完全匹配 \"${expectedText}\"，但实际文本为 \"${actualText}\"`);\n    }\n  }\n\n  /**\n   * 断言包含文本（部分）\n   */\n  async toContainText(expectedText, options = {}) {\n    return this.toHaveText(expectedText, options);\n  }\n\n  // =============== 属性断言 ===============\n\n  /**\n   * 断言有属性\n   */\n  async toHaveAttribute(name, value, options = {}) {\n    const timeout = options.timeout || this.timeout;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const actualValue = await this.target.getAttribute(name);\n          \n          let matches;\n          if (value === undefined) {\n            matches = actualValue !== null;\n          } else if (value instanceof RegExp) {\n            matches = value.test(actualValue || '');\n          } else {\n            matches = actualValue === value;\n          }\n          \n          return this.isNot ? !matches : matches;\n        },\n        timeout,\n        `期望${this.isNot ? '不' : ''}有属性 \"${name}\"`\n      );\n      \n      this.logger.debug(`✅ 属性${this.isNot ? '不' : ''}存在断言通过`);\n    } catch (error) {\n      const actualValue = await this.target.getAttribute(name);\n      throw new Error(`期望${this.isNot ? '不' : ''}有属性 \"${name}\"${value !== undefined ? ` = \"${value}\"` : ''}，但实际值为 \"${actualValue}\"`);\n    }\n  }\n\n  /**\n   * 断言有值\n   */\n  async toHaveValue(expectedValue, options = {}) {\n    const timeout = options.timeout || this.timeout;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const actualValue = await this.target.inputValue();\n          \n          let matches;\n          if (expectedValue instanceof RegExp) {\n            matches = expectedValue.test(actualValue);\n          } else {\n            matches = actualValue === expectedValue;\n          }\n          \n          return this.isNot ? !matches : matches;\n        },\n        timeout,\n        `期望值${this.isNot ? '不' : ''}为 \"${expectedValue}\"`\n      );\n      \n      this.logger.debug(`✅ 值${this.isNot ? '不' : ''}匹配断言通过`);\n    } catch (error) {\n      const actualValue = await this.target.inputValue();\n      throw new Error(`期望值${this.isNot ? '不' : ''}为 \"${expectedValue}\"，但实际值为 \"${actualValue}\"`);\n    }\n  }\n\n  /**\n   * 断言有类名\n   */\n  async toHaveClass(expectedClass, options = {}) {\n    const timeout = options.timeout || this.timeout;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const classAttr = await this.target.getAttribute('class');\n          const classes = classAttr ? classAttr.split(' ') : [];\n          \n          let matches;\n          if (Array.isArray(expectedClass)) {\n            matches = expectedClass.every(cls => classes.includes(cls));\n          } else if (expectedClass instanceof RegExp) {\n            matches = expectedClass.test(classAttr || '');\n          } else {\n            matches = classes.includes(expectedClass);\n          }\n          \n          return this.isNot ? !matches : matches;\n        },\n        timeout,\n        `期望${this.isNot ? '不' : ''}有类名 \"${expectedClass}\"`\n      );\n      \n      this.logger.debug(`✅ 类名${this.isNot ? '不' : ''}存在断言通过`);\n    } catch (error) {\n      const classAttr = await this.target.getAttribute('class');\n      throw new Error(`期望${this.isNot ? '不' : ''}有类名 \"${expectedClass}\"，但实际类名为 \"${classAttr}\"`);\n    }\n  }\n\n  /**\n   * 断言有 ID\n   */\n  async toHaveId(expectedId, options = {}) {\n    return this.toHaveAttribute('id', expectedId, options);\n  }\n\n  // =============== 数量断言 ===============\n\n  /**\n   * 断言数量\n   */\n  async toHaveCount(expectedCount, options = {}) {\n    const timeout = options.timeout || this.timeout;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const actualCount = await this.target.count();\n          const matches = actualCount === expectedCount;\n          return this.isNot ? !matches : matches;\n        },\n        timeout,\n        `期望数量${this.isNot ? '不' : ''}为 ${expectedCount}`\n      );\n      \n      this.logger.debug(`✅ 数量${this.isNot ? '不' : ''}匹配断言通过`);\n    } catch (error) {\n      const actualCount = await this.target.count();\n      throw new Error(`期望数量${this.isNot ? '不' : ''}为 ${expectedCount}，但实际数量为 ${actualCount}`);\n    }\n  }\n\n  // =============== URL 断言 ===============\n\n  /**\n   * 断言 URL\n   */\n  async toHaveURL(expectedUrl, options = {}) {\n    const timeout = options.timeout || this.timeout;\n    \n    try {\n      await this.waitForCondition(\n        () => {\n          const currentUrl = window.location.href;\n          \n          let matches;\n          if (expectedUrl instanceof RegExp) {\n            matches = expectedUrl.test(currentUrl);\n          } else {\n            matches = currentUrl.includes(expectedUrl);\n          }\n          \n          return this.isNot ? !matches : matches;\n        },\n        timeout,\n        `期望 URL ${this.isNot ? '不' : ''}匹配 \"${expectedUrl}\"`\n      );\n      \n      this.logger.debug(`✅ URL ${this.isNot ? '不' : ''}匹配断言通过`);\n    } catch (error) {\n      const currentUrl = window.location.href;\n      throw new Error(`期望 URL ${this.isNot ? '不' : ''}匹配 \"${expectedUrl}\"，但当前 URL 为 \"${currentUrl}\"`);\n    }\n  }\n\n  /**\n   * 断言标题\n   */\n  async toHaveTitle(expectedTitle, options = {}) {\n    const timeout = options.timeout || this.timeout;\n    \n    try {\n      await this.waitForCondition(\n        () => {\n          const currentTitle = document.title;\n          \n          let matches;\n          if (expectedTitle instanceof RegExp) {\n            matches = expectedTitle.test(currentTitle);\n          } else {\n            matches = currentTitle.includes(expectedTitle);\n          }\n          \n          return this.isNot ? !matches : matches;\n        },\n        timeout,\n        `期望标题${this.isNot ? '不' : ''}匹配 \"${expectedTitle}\"`\n      );\n      \n      this.logger.debug(`✅ 标题${this.isNot ? '不' : ''}匹配断言通过`);\n    } catch (error) {\n      const currentTitle = document.title;\n      throw new Error(`期望标题${this.isNot ? '不' : ''}匹配 \"${expectedTitle}\"，但当前标题为 \"${currentTitle}\"`);\n    }\n  }\n\n  // =============== 辅助方法 ===============\n\n  /**\n   * 等待条件满足\n   */\n  async waitForCondition(conditionFn, timeout, description) {\n    const startTime = Date.now();\n    \n    const check = async () => {\n      try {\n        const result = await conditionFn();\n        if (result) {\n          return result;\n        }\n      } catch (error) {\n        // 继续等待\n      }\n\n      if (Date.now() - startTime >= timeout) {\n        throw new Error(`${description}超时 (${timeout}ms)`);\n      }\n\n      await new Promise(resolve => setTimeout(resolve, 100));\n      return check();\n    };\n\n    return check();\n  }\n}\n\n// 创建全局 expect 函数\nfunction createExpect() {\n  return function expect(target) {\n    return new ExpectAdapter(target);\n  };\n}\n\n// 导出给浏览器使用\nif (typeof window !== 'undefined') {\n  window.PlaywrightExpectAdapter = ExpectAdapter;\n  window.PlaywrightExpect = createExpect();\n}\n\n// Node.js 环境\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = { ExpectAdapter, createExpect };\n}\n\n// ES6 模块导出\nexport default ExpectAdapter;\nexport { createExpect };","/**\n * Playwright 运行时适配器\n * 模拟 @playwright/test 模块，让 Playwright 脚本能在浏览器中运行\n */\nclass PlaywrightRuntime {\n  constructor() {\n    this.logger = new (window.PlaywrightLogger || console)();\n    this.setupGlobalEnvironment();\n  }\n\n  /**\n   * 设置全局环境\n   */\n  setupGlobalEnvironment() {\n    // 模拟 @playwright/test 模块\n    window.PlaywrightTest = {\n      test: this.createTestFunction(),\n      expect: window.PlaywrightExpect || this.createExpectFunction()\n    };\n\n    // 设置模块系统\n    this.setupModuleSystem();\n    \n    this.logger.debug('Playwright 运行时环境初始化完成');\n  }\n\n  /**\n   * 创建 test 函数\n   */\n  createTestFunction() {\n    const self = this;\n    \n    // 主 test 函数\n    function test(name, testFn) {\n      return {\n        name,\n        fn: testFn,\n        run: async () => {\n          const page = new (window.PlaywrightPageAdapter || PageAdapter)();\n          const context = { page };\n          \n          try {\n            self.logger.info(`🧪 开始测试: ${name}`);\n            const startTime = Date.now();\n            \n            await testFn(context);\n            \n            const duration = Date.now() - startTime;\n            self.logger.success(`✅ 测试通过: ${name} (${duration}ms)`);\n            return { success: true, duration, name };\n          } catch (error) {\n            const duration = Date.now() - startTime;\n            self.logger.error(`❌ 测试失败: ${name} (${duration}ms)`, error);\n            return { success: false, error, duration, name };\n          }\n        }\n      };\n    }\n\n    // 添加 test 的静态方法\n    test.skip = (name, testFn) => {\n      self.logger.warn(`⏭️ 跳过测试: ${name}`);\n      return {\n        name,\n        fn: testFn,\n        skipped: true,\n        run: async () => ({ success: true, skipped: true, name })\n      };\n    };\n\n    test.only = (name, testFn) => {\n      const testCase = test(name, testFn);\n      testCase.only = true;\n      return testCase;\n    };\n\n    test.describe = (name, suiteFn) => {\n      self.logger.info(`📁 测试套件: ${name}`);\n      return suiteFn();\n    };\n\n    test.beforeEach = (hookFn) => {\n      // 简单实现，存储钩子函数\n      test._beforeEachHooks = test._beforeEachHooks || [];\n      test._beforeEachHooks.push(hookFn);\n    };\n\n    test.afterEach = (hookFn) => {\n      test._afterEachHooks = test._afterEachHooks || [];\n      test._afterEachHooks.push(hookFn);\n    };\n\n    test.beforeAll = (hookFn) => {\n      test._beforeAllHooks = test._beforeAllHooks || [];\n      test._beforeAllHooks.push(hookFn);\n    };\n\n    test.afterAll = (hookFn) => {\n      test._afterAllHooks = test._afterAllHooks || [];\n      test._afterAllHooks.push(hookFn);\n    };\n\n    return test;\n  }\n\n  /**\n   * 创建 expect 函数\n   */\n  createExpectFunction() {\n    return function expect(target) {\n      return new (window.PlaywrightExpectAdapter || ExpectAdapter)(target);\n    };\n  }\n\n  /**\n   * 设置模块系统\n   */\n  setupModuleSystem() {\n    // 拦截 ES6 import\n    if (typeof window.importShim === 'undefined') {\n      window.importShim = {\n        '@playwright/test': window.PlaywrightTest\n      };\n    }\n  }\n\n  /**\n   * 直接执行 Playwright 脚本\n   */\n  async executeScript(scriptContent) {\n    try {\n      // 转换 import 语句\n      const transformedScript = this.transformImports(scriptContent);\n      \n      // 在沙箱环境中执行\n      const testCases = await this.runInSandbox(transformedScript);\n      \n      // 执行所有测试\n      const results = await this.runTests(testCases);\n      \n      return results;\n    } catch (error) {\n      this.logger.error('脚本执行失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 转换 import 语句\n   */\n  transformImports(scriptContent) {\n    // 简单的字符串替换，将 import 转换为我们的运行时\n    let transformed = scriptContent;\n    \n    // 匹配各种 import 形式\n    const importPatterns = [\n      // import { test, expect } from '@playwright/test';\n      /import\\s*{\\s*([^}]+)\\s*}\\s*from\\s*['\"]@playwright\\/test['\"];?/g,\n      // import { expect, test } from '@playwright/test';\n      /import\\s*{\\s*([^}]+)\\s*}\\s*from\\s*['\"]@playwright\\/test['\"];?/g,\n      // import * as pw from '@playwright/test';\n      /import\\s*\\*\\s*as\\s+(\\w+)\\s*from\\s*['\"]@playwright\\/test['\"];?/g\n    ];\n    \n    // 替换标准导入\n    transformed = transformed.replace(importPatterns[0], (match, imports) => {\n      const importItems = imports.split(',').map(item => item.trim());\n      const declarations = importItems.map(item => {\n        const cleanItem = item.replace(/\\s+as\\s+\\w+/, ''); // 移除 as 别名\n        return `${item} = window.PlaywrightTest.${cleanItem}`;\n      }).join(', ');\n      \n      return `const { ${declarations} } = window.PlaywrightTest;`;\n    });\n    \n    // 替换命名空间导入\n    transformed = transformed.replace(importPatterns[2], (match, namespace) => {\n      return `const ${namespace} = window.PlaywrightTest;`;\n    });\n    \n    // 简单替换（兜底）\n    transformed = transformed\n      .replace(/import\\s*{\\s*test,?\\s*expect\\s*}\\s*from\\s*['\"]@playwright\\/test['\"];?/g, \n               'const { test, expect } = window.PlaywrightTest;')\n      .replace(/import\\s*{\\s*expect,?\\s*test\\s*}\\s*from\\s*['\"]@playwright\\/test['\"];?/g, \n               'const { test, expect } = window.PlaywrightTest;');\n    \n    this.logger.debug('Import 语句转换完成');\n    return transformed;\n  }\n\n  /**\n   * 在沙箱环境中执行脚本\n   */\n  async runInSandbox(scriptContent) {\n    const testCases = [];\n    \n    // 重写 test 函数来收集测试用例\n    const originalTest = window.PlaywrightTest.test;\n    const self = this;\n    \n    window.PlaywrightTest.test = function(name, fn) {\n      const testCase = originalTest(name, fn);\n      testCases.push(testCase);\n      self.logger.debug(`收集测试用例: ${name}`);\n      return testCase;\n    };\n    \n    // 保持原有的静态方法\n    Object.keys(originalTest).forEach(key => {\n      if (typeof originalTest[key] === 'function') {\n        window.PlaywrightTest.test[key] = originalTest[key];\n      }\n    });\n\n    try {\n      // 执行脚本\n      const scriptFunction = new Function(scriptContent);\n      scriptFunction();\n      \n      this.logger.info(`收集到 ${testCases.length} 个测试用例`);\n    } catch (error) {\n      this.logger.error('脚本执行出错:', error);\n      throw error;\n    } finally {\n      // 恢复原始 test 函数\n      window.PlaywrightTest.test = originalTest;\n    }\n\n    return testCases;\n  }\n\n  /**\n   * 运行测试\n   */\n  async runTests(testCases) {\n    const results = [];\n    const onlyTests = testCases.filter(test => test.only);\n    const testsToRun = onlyTests.length > 0 ? onlyTests : testCases.filter(test => !test.skipped);\n    \n    this.logger.info(`开始执行 ${testsToRun.length} 个测试`);\n    \n    // 执行 beforeAll 钩子\n    await this.runHooks('_beforeAllHooks');\n    \n    for (const testCase of testsToRun) {\n      try {\n        // 执行 beforeEach 钩子\n        await this.runHooks('_beforeEachHooks', testCase);\n        \n        // 执行测试\n        const result = await testCase.run();\n        results.push(result);\n        \n        // 执行 afterEach 钩子\n        await this.runHooks('_afterEachHooks', testCase);\n        \n      } catch (error) {\n        this.logger.error(`测试执行异常: ${testCase.name}`, error);\n        results.push({ \n          success: false, \n          error, \n          name: testCase.name,\n          duration: 0 \n        });\n      }\n    }\n    \n    // 执行 afterAll 钩子\n    await this.runHooks('_afterAllHooks');\n    \n    // 输出测试总结\n    this.printTestSummary(results);\n    \n    return results;\n  }\n\n  /**\n   * 运行钩子函数\n   */\n  async runHooks(hookType, testCase = null) {\n    const test = window.PlaywrightTest.test;\n    const hooks = test[hookType] || [];\n    \n    for (const hook of hooks) {\n      try {\n        if (testCase) {\n          const page = new (window.PlaywrightPageAdapter || PageAdapter)();\n          await hook({ page });\n        } else {\n          await hook();\n        }\n      } catch (error) {\n        this.logger.error(`钩子函数执行失败 (${hookType}):`, error);\n      }\n    }\n  }\n\n  /**\n   * 打印测试总结\n   */\n  printTestSummary(results) {\n    const passed = results.filter(r => r.success).length;\n    const failed = results.filter(r => !r.success).length;\n    const skipped = results.filter(r => r.skipped).length;\n    const totalDuration = results.reduce((sum, r) => sum + (r.duration || 0), 0);\n    \n    this.logger.info(`\n📊 测试总结:\n   ✅ 通过: ${passed}\n   ❌ 失败: ${failed}\n   ⏭️ 跳过: ${skipped}\n   ⏱️ 总耗时: ${totalDuration}ms\n    `);\n    \n    if (failed > 0) {\n      this.logger.error('失败的测试:');\n      results.filter(r => !r.success).forEach(r => {\n        this.logger.error(`  - ${r.name}: ${r.error?.message}`);\n      });\n    }\n  }\n}\n\n// 导出给浏览器使用\nif (typeof window !== 'undefined') {\n  window.PlaywrightRuntime = PlaywrightRuntime;\n}\n\n// Node.js 环境\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = PlaywrightRuntime;\n}\n\n// ES6 模块导出\nexport default PlaywrightRuntime;","/**\n * 测试运行器\n * 提供加载和运行 Playwright 脚本的接口\n */\nclass TestRunner {\n  constructor(options = {}) {\n    this.runtime = new (window.PlaywrightRuntime || PlaywrightRuntime)();\n    this.logger = new (window.PlaywrightLogger || console)();\n    this.options = {\n      timeout: 30000,\n      retries: 0,\n      ...options\n    };\n  }\n\n  /**\n   * 从文件加载并执行脚本\n   */\n  async loadAndRun(scriptPath) {\n    try {\n      this.logger.info(`📂 加载脚本: ${scriptPath}`);\n      const response = await fetch(scriptPath);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      \n      const scriptContent = await response.text();\n      return await this.runScript(scriptContent, scriptPath);\n    } catch (error) {\n      this.logger.error(`脚本加载失败: ${scriptPath}`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * 直接执行脚本字符串\n   */\n  async runScript(scriptContent, scriptName = 'inline-script') {\n    try {\n      this.logger.info(`🚀 执行脚本: ${scriptName}`);\n      const startTime = Date.now();\n      \n      const results = await this.runtime.executeScript(scriptContent);\n      \n      const duration = Date.now() - startTime;\n      this.logger.success(`✅ 脚本执行完成: ${scriptName} (${duration}ms)`);\n      \n      return {\n        scriptName,\n        duration,\n        results,\n        success: results.every(r => r.success || r.skipped)\n      };\n    } catch (error) {\n      this.logger.error(`脚本执行失败: ${scriptName}`, error);\n      return {\n        scriptName,\n        duration: 0,\n        results: [],\n        success: false,\n        error\n      };\n    }\n  }\n\n  /**\n   * 执行多个脚本文件\n   */\n  async runScripts(scriptPaths) {\n    const allResults = [];\n    \n    this.logger.info(`📦 批量执行 ${scriptPaths.length} 个脚本`);\n    \n    for (const path of scriptPaths) {\n      try {\n        const result = await this.loadAndRun(path);\n        allResults.push(result);\n      } catch (error) {\n        allResults.push({\n          scriptName: path,\n          duration: 0,\n          results: [],\n          success: false,\n          error\n        });\n      }\n    }\n    \n    // 输出批量执行总结\n    this.printBatchSummary(allResults);\n    \n    return allResults;\n  }\n\n  /**\n   * 从目录批量加载脚本\n   */\n  async runScriptsFromPattern(pattern) {\n    // 浏览器环境中无法直接读取文件系统\n    // 这里提供一个基础实现，需要服务器支持\n    this.logger.warn('浏览器环境中无法直接扫描文件系统，请使用 runScripts() 方法');\n    throw new Error('浏览器环境不支持文件系统扫描');\n  }\n\n  /**\n   * 设置全局钩子\n   */\n  setGlobalHooks(hooks) {\n    const { beforeAll, afterAll, beforeEach, afterEach } = hooks;\n    const test = window.PlaywrightTest.test;\n    \n    if (beforeAll) test.beforeAll(beforeAll);\n    if (afterAll) test.afterAll(afterAll);\n    if (beforeEach) test.beforeEach(beforeEach);\n    if (afterEach) test.afterEach(afterEach);\n    \n    this.logger.debug('全局钩子设置完成');\n  }\n\n  /**\n   * 设置全局配置\n   */\n  configure(config) {\n    this.options = { ...this.options, ...config };\n    this.logger.debug('测试配置更新:', this.options);\n  }\n\n  /**\n   * 打印批量执行总结\n   */\n  printBatchSummary(results) {\n    const totalScripts = results.length;\n    const successfulScripts = results.filter(r => r.success).length;\n    const failedScripts = results.filter(r => !r.success).length;\n    \n    const totalTests = results.reduce((sum, r) => sum + r.results.length, 0);\n    const passedTests = results.reduce((sum, r) => \n      sum + r.results.filter(test => test.success).length, 0\n    );\n    const failedTests = results.reduce((sum, r) => \n      sum + r.results.filter(test => !test.success && !test.skipped).length, 0\n    );\n    const skippedTests = results.reduce((sum, r) => \n      sum + r.results.filter(test => test.skipped).length, 0\n    );\n    \n    const totalDuration = results.reduce((sum, r) => sum + r.duration, 0);\n    \n    this.logger.info(`\n🎯 批量执行总结:\n📄 脚本统计:\n   ✅ 成功: ${successfulScripts}/${totalScripts}\n   ❌ 失败: ${failedScripts}/${totalScripts}\n\n🧪 测试统计:\n   ✅ 通过: ${passedTests}\n   ❌ 失败: ${failedTests}\n   ⏭️ 跳过: ${skippedTests}\n   📊 总计: ${totalTests}\n\n⏱️ 总耗时: ${totalDuration}ms\n    `);\n    \n    if (failedScripts > 0) {\n      this.logger.error('失败的脚本:');\n      results.filter(r => !r.success).forEach(r => {\n        this.logger.error(`  - ${r.scriptName}: ${r.error?.message || '未知错误'}`);\n      });\n    }\n  }\n\n  /**\n   * 获取执行统计\n   */\n  getStats(results) {\n    if (Array.isArray(results) && results[0]?.results) {\n      // 批量执行结果\n      return {\n        scripts: {\n          total: results.length,\n          passed: results.filter(r => r.success).length,\n          failed: results.filter(r => !r.success).length\n        },\n        tests: {\n          total: results.reduce((sum, r) => sum + r.results.length, 0),\n          passed: results.reduce((sum, r) => \n            sum + r.results.filter(test => test.success).length, 0\n          ),\n          failed: results.reduce((sum, r) => \n            sum + r.results.filter(test => !test.success && !test.skipped).length, 0\n          ),\n          skipped: results.reduce((sum, r) => \n            sum + r.results.filter(test => test.skipped).length, 0\n          )\n        },\n        duration: results.reduce((sum, r) => sum + r.duration, 0)\n      };\n    } else {\n      // 单个脚本执行结果\n      return {\n        tests: {\n          total: results.results?.length || 0,\n          passed: results.results?.filter(test => test.success).length || 0,\n          failed: results.results?.filter(test => !test.success && !test.skipped).length || 0,\n          skipped: results.results?.filter(test => test.skipped).length || 0\n        },\n        duration: results.duration || 0\n      };\n    }\n  }\n\n  /**\n   * 清理资源\n   */\n  cleanup() {\n    // 清理全局钩子\n    const test = window.PlaywrightTest.test;\n    test._beforeAllHooks = [];\n    test._afterAllHooks = [];\n    test._beforeEachHooks = [];\n    test._afterEachHooks = [];\n    \n    this.logger.debug('测试运行器清理完成');\n  }\n}\n\n// 导出给浏览器使用\nif (typeof window !== 'undefined') {\n  window.PlaywrightTestRunner = TestRunner;\n}\n\n// Node.js 环境\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = TestRunner;\n}\n\n// ES6 模块导出\nexport default TestRunner;","/**\n * Playwright 执行引擎主入口文件\n * 将所有组件组合并导出统一的 API\n */\n\n// 导入所有依赖模块\nimport PlaywrightLogger from './utils/logger.js';\nimport PlaywrightWaitManager from './dom/wait-manager.js';\nimport PlaywrightEventSimulator from './dom/event-simulator.js';\nimport PlaywrightLocatorAdapter from './adapters/locator-adapter.js';\nimport PlaywrightPageAdapter from './adapters/page-adapter.js';\nimport PlaywrightExpectAdapter, { createExpect } from './adapters/expect-adapter.js';\nimport PlaywrightRuntime from './runtime/playwright-runtime.js';\nimport PlaywrightTestRunner from './runtime/test-runner.js';\n\n// 确保所有依赖都已加载\nfunction ensureDependencies() {\n  const dependencies = {\n    PlaywrightLogger,\n    PlaywrightWaitManager, \n    PlaywrightEventSimulator,\n    PlaywrightLocatorAdapter,\n    PlaywrightPageAdapter,\n    PlaywrightExpectAdapter,\n    createExpect,\n    PlaywrightRuntime,\n    PlaywrightTestRunner\n  };\n  \n  const missing = Object.entries(dependencies)\n    .filter(([name, component]) => !component)\n    .map(([name]) => name);\n  \n  if (missing.length > 0) {\n    console.warn('缺少依赖:', missing);\n  }\n}\n\n/**\n * Playwright 执行引擎主类\n */\nclass PlaywrightExecutionEngine {\n  constructor(options = {}) {\n    ensureDependencies();\n    \n    this.options = {\n      logLevel: 'info',\n      timeout: 30000,\n      ...options\n    };\n    \n    // 初始化组件\n    this.logger = new PlaywrightLogger(this.options.logLevel);\n    this.runtime = new PlaywrightRuntime();\n    this.testRunner = new PlaywrightTestRunner(this.options);\n    \n    this.logger.info('Playwright 执行引擎初始化完成');\n  }\n\n  /**\n   * 执行脚本字符串\n   */\n  async runScript(scriptContent, scriptName = 'inline') {\n    return await this.testRunner.runScript(scriptContent, scriptName);\n  }\n\n  /**\n   * 加载并执行脚本文件\n   */\n  async loadAndRun(scriptPath) {\n    return await this.testRunner.loadAndRun(scriptPath);\n  }\n\n  /**\n   * 批量执行脚本文件\n   */\n  async runScripts(scriptPaths) {\n    return await this.testRunner.runScripts(scriptPaths);\n  }\n\n  /**\n   * 创建新的 Page 实例\n   */\n  createPage() {\n    return new PlaywrightPageAdapter();\n  }\n\n  /**\n   * 创建 expect 实例\n   */\n  expect(target) {\n    return createExpect()(target);\n  }\n\n  /**\n   * 设置全局配置\n   */\n  configure(config) {\n    this.options = { ...this.options, ...config };\n    this.testRunner.configure(config);\n    return this;\n  }\n\n  /**\n   * 设置全局钩子\n   */\n  setHooks(hooks) {\n    this.testRunner.setGlobalHooks(hooks);\n    return this;\n  }\n\n  /**\n   * 获取执行统计\n   */\n  getStats(results) {\n    return this.testRunner.getStats(results);\n  }\n\n  /**\n   * 清理资源\n   */\n  cleanup() {\n    this.testRunner.cleanup();\n  }\n\n  /**\n   * 获取版本信息\n   */\n  static getVersion() {\n    return typeof __VERSION__ !== 'undefined' ? __VERSION__ : '1.0.0-beta';\n  }\n\n  /**\n   * 检查浏览器兼容性\n   */\n  static checkCompatibility() {\n    const features = {\n      'Promises': typeof Promise !== 'undefined',\n      'async/await': (async () => {})().constructor === Promise,\n      'Fetch API': typeof fetch !== 'undefined',\n      'MutationObserver': typeof MutationObserver !== 'undefined',\n      'querySelector': typeof document.querySelector !== 'undefined',\n      'addEventListener': typeof document.addEventListener !== 'undefined'\n    };\n    \n    const unsupported = Object.entries(features)\n      .filter(([feature, supported]) => !supported)\n      .map(([feature]) => feature);\n    \n    if (unsupported.length > 0) {\n      console.warn('浏览器不支持以下功能:', unsupported);\n      return false;\n    }\n    \n    return true;\n  }\n}\n\n// 静态工厂方法\nPlaywrightExecutionEngine.create = function(options) {\n  if (!PlaywrightExecutionEngine.checkCompatibility()) {\n    throw new Error('当前浏览器不支持 Playwright 执行引擎');\n  }\n  \n  return new PlaywrightExecutionEngine(options);\n};\n\n// 快捷方法\nPlaywrightExecutionEngine.run = async function(script, options = {}) {\n  const engine = PlaywrightExecutionEngine.create(options);\n  return await engine.runScript(script);\n};\n\nPlaywrightExecutionEngine.load = async function(scriptPath, options = {}) {\n  const engine = PlaywrightExecutionEngine.create(options);\n  return await engine.loadAndRun(scriptPath);\n};\n\n// 导出核心组件（供高级用户使用）\nPlaywrightExecutionEngine.Components = {\n  Logger: PlaywrightLogger,\n  WaitManager: PlaywrightWaitManager,\n  EventSimulator: PlaywrightEventSimulator,\n  PageAdapter: PlaywrightPageAdapter,\n  LocatorAdapter: PlaywrightLocatorAdapter,\n  ExpectAdapter: PlaywrightExpectAdapter,\n  Runtime: PlaywrightRuntime,\n  TestRunner: PlaywrightTestRunner\n};\n\n// 全局导出（仅在浏览器环境）\nif (typeof window !== 'undefined') {\n  window.PlaywrightExecutionEngine = PlaywrightExecutionEngine;\n  \n  // 兼容性别名\n  window.PWEngine = PlaywrightExecutionEngine;\n  \n  // 快捷全局方法\n  window.runPlaywrightScript = PlaywrightExecutionEngine.run;\n  window.loadPlaywrightScript = PlaywrightExecutionEngine.load;\n  \n  console.log('🎭 Playwright 执行引擎已加载完成');\n  console.log('版本:', PlaywrightExecutionEngine.getVersion());\n  console.log('使用方法: new PlaywrightExecutionEngine() 或 PlaywrightExecutionEngine.create()');\n}\n\n// ES6 模块默认导出\nexport default PlaywrightExecutionEngine;\n\n// 命名导出\nexport {\n  PlaywrightLogger,\n  PlaywrightWaitManager,\n  PlaywrightEventSimulator,\n  PlaywrightLocatorAdapter,\n  PlaywrightPageAdapter,\n  PlaywrightExpectAdapter,\n  createExpect,\n  PlaywrightRuntime,\n  PlaywrightTestRunner\n};"],"names":["WaitManager","startTime","EventSimulator","LocatorAdapter","PageAdapter","ExpectAdapter","PlaywrightRuntime","PlaywrightLogger","PlaywrightWaitManager","PlaywrightEventSimulator","PlaywrightLocatorAdapter","PlaywrightPageAdapter","PlaywrightExpectAdapter","PlaywrightTestRunner"],"mappings":"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"}