{"version":3,"file":"playwright-execution-engine.es.js","sources":["../src/utils/logger.ts","../src/dom/wait-manager.ts","../src/dom/event-simulator.ts","../src/adapters/locator-adapter.ts","../src/adapters/page-adapter.ts","../src/adapters/expect-adapter.ts","../src/runtime/playwright-runtime.ts","../src/runtime/test-runner.ts","../src/index.ts"],"sourcesContent":["export type LogLevel = 'debug' | 'info' | 'warn' | 'error';\n\ninterface LogLevels {\n  debug: number;\n  info: number;\n  warn: number;\n  error: number;\n}\n\ndeclare global {\n  interface Window {\n    PlaywrightLogger?: typeof Logger;\n  }\n}\n\nexport default class Logger {\n  private level: LogLevel;\n  private levels: LogLevels;\n\n  constructor(level: LogLevel = 'info') {\n    this.level = level;\n    this.levels = {\n      debug: 0,\n      info: 1,\n      warn: 2,\n      error: 3\n    };\n  }\n\n  debug(message: string, ...args: any[]): void {\n    if (this.levels[this.level] <= this.levels.debug) {\n      console.debug(`[DEBUG] ${message}`, ...args);\n    }\n  }\n\n  info(message: string, ...args: any[]): void {\n    if (this.levels[this.level] <= this.levels.info) {\n      console.info(`[INFO] ${message}`, ...args);\n    }\n  }\n\n  warn(message: string, ...args: any[]): void {\n    if (this.levels[this.level] <= this.levels.warn) {\n      console.warn(`[WARN] ${message}`, ...args);\n    }\n  }\n\n  error(message: string, ...args: any[]): void {\n    if (this.levels[this.level] <= this.levels.error) {\n      console.error(`[ERROR] ${message}`, ...args);\n    }\n  }\n\n  success(message: string, ...args: any[]): void {\n    if (this.levels[this.level] <= this.levels.info) {\n      console.log(`%c[SUCCESS] ${message}`, 'color: green', ...args);\n    }\n  }\n}\n\n// 导出给浏览器使用\nif (typeof window !== 'undefined') {\n  (window as any).PlaywrightLogger = Logger;\n}","import type { Logger } from '../../types/index.js';\n\n/**\n * 等待管理器 - 处理各种等待机制\n */\nclass WaitManager {\n  private readonly defaultTimeout: number;\n  private readonly logger: Logger;\n\n  constructor() {\n    this.defaultTimeout = 30000;\n    this.logger = new (window.PlaywrightLogger || console)() as Logger;\n  }\n\n  /**\n   * 查询单个元素（支持 CSS、XPath 和 text）\n   */\n  querySelector(selector: string): Element | null {\n    if (selector.startsWith('xpath=')) {\n      const xpath = selector.substring(6);\n      const result = document.evaluate(\n        xpath,\n        document,\n        null,\n        XPathResult.FIRST_ORDERED_NODE_TYPE,\n        null\n      );\n      return result.singleNodeValue as Element | null;\n    } else if (selector.startsWith('text=')) {\n      const text = selector.substring(5);\n      // 使用 XPath 查找包含指定文本的元素\n      const xpath = `//*[contains(normalize-space(text()), \"${text}\")]`;\n      const result = document.evaluate(\n        xpath,\n        document,\n        null,\n        XPathResult.FIRST_ORDERED_NODE_TYPE,\n        null\n      );\n      return result.singleNodeValue as Element | null;\n    } else {\n      return document.querySelector(selector);\n    }\n  }\n\n  /**\n   * 等待元素出现\n   */\n  async waitForElement(selector: string, timeout: number = this.defaultTimeout): Promise<Element> {\n    return new Promise((resolve, reject) => {\n      const startTime = Date.now();\n      \n      // 立即检查\n      const existing = this.querySelector(selector);\n      if (existing) {\n        this.logger.debug(`元素立即找到: ${selector}`);\n        return resolve(existing);\n      }\n\n      let timeoutId: NodeJS.Timeout | undefined;\n      let observer: MutationObserver | undefined;\n\n      const cleanup = (): void => {\n        if (timeoutId) clearTimeout(timeoutId);\n        if (observer) observer.disconnect();\n      };\n\n      // 设置超时\n      timeoutId = setTimeout(() => {\n        cleanup();\n        reject(new Error(`等待元素超时: ${selector} (${timeout}ms)`));\n      }, timeout);\n\n      // 监听 DOM 变化\n      observer = new MutationObserver(() => {\n        const element = this.querySelector(selector);\n        if (element) {\n          cleanup();\n          const elapsed = Date.now() - startTime;\n          this.logger.debug(`元素找到: ${selector} (${elapsed}ms)`);\n          resolve(element);\n        }\n      });\n\n      observer.observe(document.body, {\n        childList: true,\n        subtree: true,\n        attributes: true\n      });\n    });\n  }\n\n  /**\n   * 等待条件满足\n   */\n  async waitForCondition<T>(\n    conditionFn: () => T | Promise<T>, \n    timeout: number = this.defaultTimeout, \n    errorMessage: string = '等待条件超时'\n  ): Promise<T> {\n    return new Promise((resolve, reject) => {\n      const startTime = Date.now();\n      \n      const check = async (): Promise<void> => {\n        try {\n          const result = await conditionFn();\n          if (result) {\n            const elapsed = Date.now() - startTime;\n            this.logger.debug(`条件满足 (${elapsed}ms)`);\n            resolve(result);\n            return;\n          }\n        } catch (error) {\n          // 继续等待，忽略错误\n          this.logger.debug('条件检查出错，继续等待:', (error as Error).message);\n        }\n\n        if (Date.now() - startTime >= timeout) {\n          reject(new Error(`${errorMessage} (${timeout}ms)`));\n          return;\n        }\n\n        setTimeout(check, 100);\n      };\n\n      check();\n    });\n  }\n\n  /**\n   * 等待函数返回真值\n   */\n  async waitForFunction<T>(fn: () => T | Promise<T>, timeout: number = this.defaultTimeout): Promise<T> {\n    return this.waitForCondition(fn, timeout, '等待函数条件超时');\n  }\n\n  /**\n   * 等待 URL 变化\n   */\n  async waitForURL(urlPattern: string | RegExp, timeout: number = this.defaultTimeout): Promise<boolean> {\n    return this.waitForCondition(\n      () => {\n        const currentUrl = window.location.href;\n        if (typeof urlPattern === 'string') {\n          return currentUrl.includes(urlPattern);\n        }\n        if (urlPattern instanceof RegExp) {\n          return urlPattern.test(currentUrl);\n        }\n        return false;\n      },\n      timeout,\n      `等待URL变化超时: ${urlPattern}`\n    );\n  }\n\n  /**\n   * 等待页面加载状态\n   */\n  async waitForLoadState(state: 'load' | 'domcontentloaded' | 'networkidle' = 'load'): Promise<void> {\n    return new Promise((resolve) => {\n      const checkState = (): void => {\n        if (state === 'load' && document.readyState === 'complete') {\n          this.logger.debug('页面完全加载');\n          resolve();\n        } else if (state === 'domcontentloaded' && document.readyState !== 'loading') {\n          this.logger.debug('DOM 内容加载完成');\n          resolve();\n        } else if (state === 'networkidle') {\n          // 简单实现：等待 500ms 无网络请求\n          setTimeout(() => {\n            this.logger.debug('网络空闲');\n            resolve();\n          }, 500);\n        }\n      };\n\n      if (document.readyState === 'complete' && state === 'load') {\n        resolve();\n      } else if (document.readyState !== 'loading' && state === 'domcontentloaded') {\n        resolve();\n      } else {\n        document.addEventListener('readystatechange', checkState, { once: true });\n      }\n    });\n  }\n\n  /**\n   * 简单延时\n   */\n  async waitForTimeout(ms: number): Promise<void> {\n    this.logger.debug(`等待 ${ms}ms`);\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n}\n\n// 扩展 Window 接口\ndeclare global {\n  interface Window {\n    PlaywrightWaitManager?: typeof WaitManager;\n  }\n}\n\n// 导出给浏览器使用\nif (typeof window !== 'undefined') {\n  window.PlaywrightWaitManager = WaitManager;\n}\n\n// Node.js 环境\ndeclare const module: any;\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = WaitManager;\n}\n\n// ES6 模块导出\nexport default WaitManager;","import type { ClickOptions, KeyboardOptions, Logger } from '../../types/index.js';\n\n/**\n * 事件模拟器 - 模拟各种用户交互事件\n */\nclass EventSimulator {\n  private readonly logger: Logger;\n\n  constructor() {\n    this.logger = new (window.PlaywrightLogger || console)() as Logger;\n  }\n\n  /**\n   * 模拟点击事件\n   */\n  simulateClick(element: HTMLElement, options: ClickOptions = {}): void {\n    const { button = 0, clickCount = 1, delay = 0 } = options;\n    \n    // 确保元素获得焦点\n    element.focus();\n\n    // 触发完整的鼠标事件序列\n    const mouseEvents: Array<keyof HTMLElementEventMap> = ['mousedown', 'mouseup', 'click'];\n    \n    mouseEvents.forEach((eventType, index) => {\n      setTimeout(() => {\n        const event = new MouseEvent(eventType, {\n          view: window,\n          bubbles: true,\n          cancelable: true,\n          button: button,\n          detail: clickCount\n        });\n        \n        element.dispatchEvent(event);\n        this.logger.debug(`触发 ${eventType} 事件`);\n      }, delay * index);\n    });\n  }\n\n  /**\n   * 模拟双击事件\n   */\n  simulateDoubleClick(element: HTMLElement): void {\n    this.simulateClick(element, { clickCount: 1 });\n    \n    setTimeout(() => {\n      const dblClickEvent = new MouseEvent('dblclick', {\n        view: window,\n        bubbles: true,\n        cancelable: true,\n        detail: 2\n      });\n      element.dispatchEvent(dblClickEvent);\n      this.logger.debug('触发 dblclick 事件');\n    }, 100);\n  }\n\n  /**\n   * 模拟悬停事件\n   */\n  simulateHover(element: HTMLElement): void {\n    const events: Array<keyof HTMLElementEventMap> = ['mouseover', 'mouseenter'];\n    \n    events.forEach(eventType => {\n      const event = new MouseEvent(eventType, {\n        view: window,\n        bubbles: true,\n        cancelable: true\n      });\n      element.dispatchEvent(event);\n      this.logger.debug(`触发 ${eventType} 事件`);\n    });\n  }\n\n  /**\n   * 模拟键盘事件\n   */\n  simulateKeyPress(element: HTMLElement, key: string, options: KeyboardOptions = {}): void {\n    const { ctrlKey = false, shiftKey = false, altKey = false, metaKey = false } = options;\n    \n    element.focus();\n    \n    // 首先触发 keydown 事件\n    const keydownEvent = new KeyboardEvent('keydown', {\n      key: key,\n      code: this.getKeyCode(key),\n      bubbles: true,\n      cancelable: true,\n      ctrlKey,\n      shiftKey,\n      altKey,\n      metaKey\n    });\n    \n    element.dispatchEvent(keydownEvent);\n    \n    // 处理特殊导航键的实际行为\n    if (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA') {\n      this.handleNavigationKey(element as HTMLInputElement | HTMLTextAreaElement, key);\n    }\n    \n    // 触发 keypress 事件 (某些键不触发 keypress)\n    if (!['Home', 'End', 'ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown', 'Backspace', 'Delete'].includes(key)) {\n      const keypressEvent = new KeyboardEvent('keypress', {\n        key: key,\n        code: this.getKeyCode(key),\n        bubbles: true,\n        cancelable: true,\n        ctrlKey,\n        shiftKey,\n        altKey,\n        metaKey\n      });\n      element.dispatchEvent(keypressEvent);\n    }\n    \n    // 触发 keyup 事件\n    const keyupEvent = new KeyboardEvent('keyup', {\n      key: key,\n      code: this.getKeyCode(key),\n      bubbles: true,\n      cancelable: true,\n      ctrlKey,\n      shiftKey,\n      altKey,\n      metaKey\n    });\n    \n    element.dispatchEvent(keyupEvent);\n    this.logger.debug(`触发键盘事件: ${key}`);\n  }\n\n  /**\n   * 处理导航键的实际行为\n   */\n  private handleNavigationKey(element: HTMLInputElement | HTMLTextAreaElement, key: string): void {\n    const start = element.selectionStart || 0;\n    const end = element.selectionEnd || 0;\n    const value = element.value || '';\n    \n    switch (key) {\n      case 'Home':\n        element.setSelectionRange(0, 0);\n        break;\n        \n      case 'End':\n        element.setSelectionRange(value.length, value.length);\n        break;\n        \n      case 'ArrowLeft':\n        if (start > 0) {\n          const newPos = Math.max(0, start - 1);\n          element.setSelectionRange(newPos, newPos);\n        }\n        break;\n        \n      case 'ArrowRight':\n        if (start < value.length) {\n          const newPos = Math.min(value.length, start + 1);\n          element.setSelectionRange(newPos, newPos);\n        }\n        break;\n        \n      case 'Backspace':\n        if (start === end && start > 0) {\n          // 删除光标前的字符\n          element.value = value.slice(0, start - 1) + value.slice(end);\n          element.setSelectionRange(start - 1, start - 1);\n          element.dispatchEvent(new Event('input', { bubbles: true }));\n        } else if (start !== end) {\n          // 删除选中文本\n          element.value = value.slice(0, start) + value.slice(end);\n          element.setSelectionRange(start, start);\n          element.dispatchEvent(new Event('input', { bubbles: true }));\n        }\n        break;\n        \n      case 'Delete':\n        if (start === end && start < value.length) {\n          // 删除光标后的字符\n          element.value = value.slice(0, start) + value.slice(end + 1);\n          element.setSelectionRange(start, start);\n          element.dispatchEvent(new Event('input', { bubbles: true }));\n        } else if (start !== end) {\n          // 删除选中文本\n          element.value = value.slice(0, start) + value.slice(end);\n          element.setSelectionRange(start, start);\n          element.dispatchEvent(new Event('input', { bubbles: true }));\n        }\n        break;\n    }\n  }\n\n  /**\n   * 模拟输入序列\n   */\n  async simulateTyping(element: HTMLInputElement | HTMLTextAreaElement, text: string, options: { delay?: number } = {}): Promise<void> {\n    const { delay = 50 } = options;\n    \n    element.focus();\n    \n    for (let i = 0; i < text.length; i++) {\n      const char = text[i];\n      \n      // 获取当前光标位置\n      const start = element.selectionStart || 0;\n      const end = element.selectionEnd || 0;\n      const currentValue = element.value || '';\n      \n      // 在光标位置插入字符\n      const newValue = currentValue.slice(0, start) + char + currentValue.slice(end);\n      element.value = newValue;\n      \n      // 更新光标位置\n      const newCursorPos = start + 1;\n      element.setSelectionRange(newCursorPos, newCursorPos);\n      \n      // 触发输入事件\n      element.dispatchEvent(new Event('input', { bubbles: true }));\n      this.simulateKeyPress(element, char);\n      \n      if (delay > 0) {\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n    \n    // 触发 change 事件\n    element.dispatchEvent(new Event('change', { bubbles: true }));\n    this.logger.debug(`输入文本: \"${text}\"`);\n  }\n\n  /**\n   * 模拟表单控件变化\n   */\n  simulateFormChange(element: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement, value: string | boolean): void {\n    if ((element as HTMLInputElement).type === 'checkbox' || (element as HTMLInputElement).type === 'radio') {\n      (element as HTMLInputElement).checked = value as boolean;\n    } else if (element.tagName === 'SELECT') {\n      (element as HTMLSelectElement).value = value as string;\n    } else {\n      (element as HTMLInputElement | HTMLTextAreaElement).value = value as string;\n    }\n    \n    // 触发相关事件\n    element.dispatchEvent(new Event('input', { bubbles: true }));\n    element.dispatchEvent(new Event('change', { bubbles: true }));\n    \n    this.logger.debug(`表单控件变化: ${element.tagName} = ${value}`);\n  }\n\n  /**\n   * 获取键码\n   */\n  private getKeyCode(key: string): string {\n    const keyCodes: Record<string, string> = {\n      'Enter': 'Enter',\n      'Escape': 'Escape',\n      'Tab': 'Tab',\n      'Backspace': 'Backspace',\n      'Delete': 'Delete',\n      'Home': 'Home',\n      'End': 'End',\n      'ArrowUp': 'ArrowUp',\n      'ArrowDown': 'ArrowDown',\n      'ArrowLeft': 'ArrowLeft',\n      'ArrowRight': 'ArrowRight',\n      ' ': 'Space'\n    };\n    \n    return keyCodes[key] || key;\n  }\n\n  /**\n   * 滚动元素到可视区域\n   */\n  async scrollIntoView(element: Element, options: { behavior?: ScrollBehavior; block?: ScrollLogicalPosition } = {}): Promise<void> {\n    const { behavior = 'smooth', block = 'center' } = options;\n    \n    element.scrollIntoView({ behavior, block });\n    \n    // 等待滚动完成\n    await new Promise(resolve => setTimeout(resolve, 100));\n    \n    this.logger.debug('元素滚动到可视区域');\n  }\n}\n\n// 扩展 Window 接口\ndeclare global {\n  interface Window {\n    PlaywrightEventSimulator?: typeof EventSimulator;\n    PlaywrightLogger?: any;\n  }\n}\n\n// 导出给浏览器使用\nif (typeof window !== 'undefined') {\n  window.PlaywrightEventSimulator = EventSimulator;\n}\n\n// Node.js 环境\ndeclare const module: any;\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = EventSimulator;\n}\n\n// ES6 模块导出\nexport default EventSimulator;","import type { \n  ClickOptions, \n  FillOptions, \n  TypeOptions, \n  LocatorOptions, \n  ElementWaitOptions,\n  Logger \n} from '../../types/index.js';\n\ninterface FilterOptions {\n  hasText?: string;\n  hasNotText?: string;\n  exact?: boolean;\n  position?: number | 'last';\n}\n\n/**\n * Locator 适配器 - 实现 Playwright Locator API\n */\nclass LocatorAdapter {\n  private selector: string;\n  private page: any; // TODO: Type this properly\n  private options: LocatorOptions;\n  private filters: FilterOptions[];\n  private logger: Logger;\n  private waitManager: any; // TODO: Type this properly\n  private eventSimulator: any; // TODO: Type this properly\n  private _element?: Element;\n\n  constructor(selector: string, page: any, options: LocatorOptions = {}) {\n    this.selector = selector;\n    this.page = page;\n    this.options = options;\n    this.filters = [];\n    this.logger = new (window.PlaywrightLogger || console)() as Logger;\n    this.waitManager = page.waitManager;\n    this.eventSimulator = page.eventSimulator;\n  }\n\n  // =============== 链式过滤器方法 ===============\n\n  /**\n   * 过滤 locator\n   */\n  filter(options: FilterOptions): LocatorAdapter {\n    const newLocator = new LocatorAdapter(this.selector, this.page);\n    newLocator.filters = [...this.filters, options];\n    return newLocator;\n  }\n\n  /**\n   * 获取第一个元素\n   */\n  first(): LocatorAdapter {\n    return this.nth(0);\n  }\n\n  /**\n   * 获取最后一个元素\n   */\n  last(): LocatorAdapter {\n    return this.filter({ position: 'last' });\n  }\n\n  /**\n   * 获取第 n 个元素\n   */\n  nth(n: number): LocatorAdapter {\n    return this.filter({ position: n });\n  }\n\n  /**\n   * 创建子 Locator (在当前 Locator 范围内查找)\n   */\n  locator(selector: string, options: LocatorOptions = {}): LocatorAdapter {\n    // 创建组合选择器，表示在当前选择器范围内查找子选择器\n    const combinedSelector = this.combineSelectorWithParent(selector);\n    const newLocator = new LocatorAdapter(combinedSelector, this.page, options);\n    // 继承当前的过滤器\n    newLocator.filters = [...this.filters];\n    return newLocator;\n  }\n\n  /**\n   * 将选择器与父选择器组合\n   */\n  private combineSelectorWithParent(childSelector: string): string {\n    // 如果子选择器是 XPath，需要特殊处理\n    if (childSelector.startsWith('xpath=')) {\n      const childXpath = childSelector.substring(6);\n      if (this.selector.startsWith('xpath=')) {\n        const parentXpath = this.selector.substring(6);\n        return `xpath=${parentXpath}//${childXpath}`;\n      } else {\n        // 父选择器是 CSS，子选择器是 XPath - 需要转换\n        return `xpath=//*[${this.cssSelectorToXPath(this.selector)}]//${childXpath}`;\n      }\n    }\n    \n    // 如果父选择器是 XPath，子选择器是 CSS\n    if (this.selector.startsWith('xpath=')) {\n      const parentXpath = this.selector.substring(6);\n      const childXpath = this.cssSelectorToXPath(childSelector);\n      return `xpath=${parentXpath}//*[${childXpath}]`;\n    }\n    \n    // 两个都是 CSS 选择器\n    return `${this.selector} ${childSelector}`;\n  }\n\n  /**\n   * 将 CSS 选择器转换为 XPath 条件（简化版）\n   */\n  private cssSelectorToXPath(cssSelector: string): string {\n    // 简化的 CSS 到 XPath 转换\n    if (cssSelector.startsWith('#')) {\n      // ID 选择器\n      return `@id=\"${cssSelector.substring(1)}\"`;\n    } else if (cssSelector.startsWith('.')) {\n      // 类选择器\n      return `contains(@class, \"${cssSelector.substring(1)}\")`;\n    } else if (cssSelector.startsWith('[') && cssSelector.endsWith(']')) {\n      // 属性选择器\n      const attrMatch = cssSelector.match(/\\[([^=]+)=\"([^\"]+)\"\\]/);\n      if (attrMatch) {\n        return `@${attrMatch[1]}=\"${attrMatch[2]}\"`;\n      }\n      const attrExistsMatch = cssSelector.match(/\\[([^=\\]]+)\\]/);\n      if (attrExistsMatch) {\n        return `@${attrExistsMatch[1]}`;\n      }\n    } else if (/^[a-zA-Z][a-zA-Z0-9]*$/.test(cssSelector)) {\n      // 标签选择器\n      return `self::${cssSelector}`;\n    }\n    \n    // 复杂选择器 - 暂时不支持完整转换，回退到组合 CSS\n    return `self::*`;\n  }\n\n  /**\n   * 根据文本过滤\n   */\n  getByText(text: string, options: { exact?: boolean } = {}): LocatorAdapter {\n    return this.filter({ hasText: text, exact: options.exact });\n  }\n\n  // =============== 核心操作方法 ===============\n\n  /**\n   * 点击元素\n   */\n  async click(options: ClickOptions = {}): Promise<void> {\n    const element = await this.getElement();\n    await this.page.scrollIntoViewIfNeeded(element);\n    \n    this.eventSimulator.simulateClick(element, options);\n    this.logger.debug(`点击元素: ${this.selector}`);\n  }\n\n  /**\n   * 双击元素\n   */\n  async dblclick(options: ClickOptions = {}): Promise<void> {\n    const element = await this.getElement();\n    await this.page.scrollIntoViewIfNeeded(element);\n    \n    this.eventSimulator.simulateDoubleClick(element);\n    this.logger.debug(`双击元素: ${this.selector}`);\n  }\n\n  /**\n   * 填充表单\n   */\n  async fill(value: string, options: FillOptions = {}): Promise<void> {\n    const element = await this.getElement() as HTMLInputElement | HTMLTextAreaElement;\n    await this.page.scrollIntoViewIfNeeded(element);\n    \n    // 清空并填充\n    element.value = '';\n    element.value = value;\n    \n    // 触发相关事件\n    element.dispatchEvent(new Event('input', { bubbles: true }));\n    element.dispatchEvent(new Event('change', { bubbles: true }));\n    \n    this.logger.debug(`填充元素: ${this.selector} = \"${value}\"`);\n  }\n\n  /**\n   * 按键操作\n   */\n  async press(key: string, options: TypeOptions = {}): Promise<void> {\n    const element = await this.getElement() as HTMLElement;\n    element.focus();\n    \n    this.eventSimulator.simulateKeyPress(element, key, options);\n    this.logger.debug(`按键: ${this.selector} -> ${key}`);\n  }\n\n  /**\n   * 逐字符输入（模拟打字）\n   */\n  async pressSequentially(text: string, options: TypeOptions = {}): Promise<void> {\n    const element = await this.getElement() as HTMLInputElement | HTMLTextAreaElement;\n    await this.eventSimulator.simulateTyping(element, text, options);\n    this.logger.debug(`逐字符输入: ${this.selector} -> \"${text}\"`);\n  }\n\n  /**\n   * 悬停\n   */\n  async hover(): Promise<void> {\n    const element = await this.getElement() as HTMLElement;\n    await this.page.scrollIntoViewIfNeeded(element);\n    \n    this.eventSimulator.simulateHover(element);\n    this.logger.debug(`悬停元素: ${this.selector}`);\n  }\n\n  /**\n   * 选择复选框\n   */\n  async check(): Promise<void> {\n    const element = await this.getElement() as HTMLInputElement;\n    if (element.type === 'checkbox' || element.type === 'radio') {\n      element.checked = true;\n      element.dispatchEvent(new Event('change', { bubbles: true }));\n      this.logger.debug(`选择复选框: ${this.selector}`);\n    }\n  }\n\n  /**\n   * 取消选择复选框\n   */\n  async uncheck(): Promise<void> {\n    const element = await this.getElement() as HTMLInputElement;\n    if (element.type === 'checkbox') {\n      element.checked = false;\n      element.dispatchEvent(new Event('change', { bubbles: true }));\n      this.logger.debug(`取消选择复选框: ${this.selector}`);\n    }\n  }\n\n  /**\n   * 选择下拉选项\n   */\n  async selectOption(values: string | string[], options: Record<string, any> = {}): Promise<void> {\n    const element = await this.getElement() as HTMLSelectElement;\n    if (element.tagName === 'SELECT') {\n      if (Array.isArray(values)) {\n        // 多选\n        Array.from(element.options).forEach(option => {\n          option.selected = values.includes(option.value) || values.includes(option.text);\n        });\n      } else {\n        element.value = values;\n      }\n      element.dispatchEvent(new Event('change', { bubbles: true }));\n      this.logger.debug(`选择下拉选项: ${this.selector} = ${values}`);\n    }\n  }\n\n  // =============== 状态检查方法 ===============\n\n  /**\n   * 检查元素是否可见\n   */\n  async isVisible(): Promise<boolean> {\n    try {\n      const element = await this.getElement();\n      const rect = element.getBoundingClientRect();\n      const style = getComputedStyle(element);\n      return rect.width > 0 && rect.height > 0 && \n             style.visibility !== 'hidden' && style.display !== 'none' &&\n             (element as HTMLElement).offsetParent !== null;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * 检查元素是否隐藏\n   */\n  async isHidden(): Promise<boolean> {\n    return !(await this.isVisible());\n  }\n\n  /**\n   * 检查元素是否启用\n   */\n  async isEnabled(): Promise<boolean> {\n    try {\n      const element = await this.getElement() as HTMLInputElement | HTMLButtonElement | HTMLSelectElement | HTMLTextAreaElement;\n      return !element.disabled && !element.hasAttribute('disabled');\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * 检查元素是否禁用\n   */\n  async isDisabled(): Promise<boolean> {\n    return !(await this.isEnabled());\n  }\n\n  /**\n   * 检查复选框是否选中\n   */\n  async isChecked(): Promise<boolean> {\n    try {\n      const element = await this.getElement() as HTMLInputElement;\n      return element.checked || false;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  // =============== 内容获取方法 ===============\n\n  /**\n   * 获取文本内容\n   */\n  async textContent(): Promise<string> {\n    const element = await this.getElement();\n    return element.textContent || '';\n  }\n\n  /**\n   * 获取内部文本\n   */\n  async innerText(): Promise<string> {\n    const element = await this.getElement() as HTMLElement;\n    return element.innerText || '';\n  }\n\n  /**\n   * 获取 HTML 内容\n   */\n  async innerHTML(): Promise<string> {\n    const element = await this.getElement() as HTMLElement;\n    return element.innerHTML || '';\n  }\n\n  /**\n   * 获取属性值\n   */\n  async getAttribute(name: string): Promise<string | null> {\n    const element = await this.getElement();\n    return element.getAttribute(name);\n  }\n\n  /**\n   * 获取输入值\n   */\n  async inputValue(): Promise<string> {\n    const element = await this.getElement() as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;\n    return element.value || '';\n  }\n\n  // =============== 等待方法 ===============\n\n  /**\n   * 等待元素状态\n   */\n  async waitFor(options: ElementWaitOptions = {}): Promise<void> {\n    const { state = 'visible', timeout = 30000 } = options;\n    \n    switch (state) {\n      case 'visible':\n        return this.waitForVisible(timeout);\n      case 'hidden':\n        return this.waitForHidden(timeout);\n      case 'attached':\n        return this.waitForAttached(timeout);\n      case 'detached':\n        return this.waitForDetached(timeout);\n      default:\n        throw new Error(`未知的等待状态: ${state}`);\n    }\n  }\n\n  /**\n   * 等待可见\n   */\n  private async waitForVisible(timeout: number): Promise<void> {\n    return this.waitManager.waitForCondition(\n      () => this.isVisible(),\n      timeout,\n      `元素 \"${this.selector}\" 等待可见超时`\n    );\n  }\n\n  /**\n   * 等待隐藏\n   */\n  private async waitForHidden(timeout: number): Promise<void> {\n    return this.waitManager.waitForCondition(\n      () => this.isHidden(),\n      timeout,\n      `元素 \"${this.selector}\" 等待隐藏超时`\n    );\n  }\n\n  /**\n   * 等待附加到DOM\n   */\n  private async waitForAttached(timeout: number): Promise<void> {\n    return this.waitManager.waitForCondition(\n      () => this.count() > 0,\n      timeout,\n      `元素 \"${this.selector}\" 等待附加到DOM超时`\n    );\n  }\n\n  /**\n   * 等待从DOM分离\n   */\n  private async waitForDetached(timeout: number): Promise<void> {\n    return this.waitManager.waitForCondition(\n      () => this.count() === 0,\n      timeout,\n      `元素 \"${this.selector}\" 等待从DOM分离超时`\n    );\n  }\n\n  // =============== 查询方法 ===============\n\n  /**\n   * 查询所有匹配的元素\n   */\n  private queryElements(selector: string): Element[] {\n    if (selector.startsWith('xpath=')) {\n      const xpath = selector.substring(6);\n      const result = document.evaluate(xpath, document, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);\n      const elements: Element[] = [];\n      for (let i = 0; i < result.snapshotLength; i++) {\n        const element = result.snapshotItem(i);\n        if (element) elements.push(element as Element);\n      }\n      return elements;\n    } else {\n      return Array.from(document.querySelectorAll(selector));\n    }\n  }\n\n  /**\n   * 获取匹配元素的数量\n   */\n  async count(): Promise<number> {\n    const elements = this.queryElements(this.selector);\n    return this.applyFilters(elements).length;\n  }\n\n  /**\n   * 获取所有匹配的 locator\n   */\n  async all(): Promise<LocatorAdapter[]> {\n    const elements = this.queryElements(this.selector);\n    const filteredElements = this.applyFilters(elements);\n    \n    return filteredElements.map(element => {\n      const locator = new LocatorAdapter(this.buildUniqueSelector(element), this.page);\n      locator._element = element;\n      return locator;\n    });\n  }\n\n  /**\n   * 获取单个元素\n   */\n  async getElement(): Promise<Element> {\n    if (this._element && document.contains(this._element)) {\n      return this._element;\n    }\n\n    const elements = this.queryElements(this.selector);\n    if (elements.length === 0) {\n      throw new Error(`找不到元素: ${this.selector}`);\n    }\n\n    const filteredElements = this.applyFilters(elements);\n    if (filteredElements.length === 0) {\n      throw new Error(`过滤后找不到元素: ${this.selector}`);\n    }\n\n    return filteredElements[0];\n  }\n\n  /**\n   * 应用过滤器\n   */\n  private applyFilters(elements: Element[]): Element[] {\n    let filtered = elements;\n    \n    for (const filter of this.filters) {\n      filtered = this.applyFilter(filtered, filter);\n    }\n    \n    return filtered;\n  }\n\n  /**\n   * 应用单个过滤器\n   */\n  private applyFilter(elements: Element[], filter: FilterOptions): Element[] {\n    if (typeof filter.position === 'number') {\n      return elements[filter.position] ? [elements[filter.position]] : [];\n    }\n    \n    if (filter.position === 'last') {\n      return elements.length > 0 ? [elements[elements.length - 1]] : [];\n    }\n    \n    if (filter.hasText) {\n      return elements.filter(element => {\n        const text = element.textContent || (element as HTMLElement).innerText || '';\n        return filter.exact ? text === filter.hasText : text.includes(filter.hasText!);\n      });\n    }\n    \n    if (filter.hasNotText) {\n      return elements.filter(element => {\n        const text = element.textContent || (element as HTMLElement).innerText || '';\n        return !text.includes(filter.hasNotText!);\n      });\n    }\n    \n    return elements;\n  }\n\n  /**\n   * 构建唯一选择器\n   */\n  private buildUniqueSelector(element: Element): string {\n    if (element.id) {\n      return `#${element.id}`;\n    }\n    \n    const path: string[] = [];\n    let current: Element | null = element;\n    \n    while (current && current !== document.body) {\n      let selector = current.tagName.toLowerCase();\n      \n      if (current.className) {\n        const classes = current.className.split(' ').filter(cls => cls.trim());\n        if (classes.length > 0) {\n          selector += '.' + classes.join('.');\n        }\n      }\n      \n      const siblings = Array.from(current.parentNode?.children || []).filter(\n        child => child.tagName === current!.tagName\n      );\n      \n      if (siblings.length > 1) {\n        const index = siblings.indexOf(current);\n        selector += `:nth-of-type(${index + 1})`;\n      }\n      \n      path.unshift(selector);\n      current = current.parentElement;\n    }\n    \n    return path.join(' > ');\n  }\n}\n\n// 扩展 Window 接口\ndeclare global {\n  interface Window {\n    PlaywrightLocatorAdapter?: typeof LocatorAdapter;\n    PlaywrightLogger?: any;\n  }\n}\n\n// 导出给浏览器使用\nif (typeof window !== 'undefined') {\n  window.PlaywrightLocatorAdapter = LocatorAdapter;\n}\n\n// Node.js 环境\ndeclare const module: any;\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = LocatorAdapter;\n}\n\n// ES6 模块导出\nexport default LocatorAdapter;","import type { \n  ClickOptions, \n  FillOptions, \n  TypeOptions, \n  PageGotoOptions, \n  BoundingBox, \n  ViewportSize,\n  Logger\n} from '../../types/index.js';\n\n/**\n * Page 适配器 - 实现 Playwright Page API\n */\nclass PageAdapter {\n  private readonly logger: Logger;\n  private readonly waitManager: any; // TODO: Type this properly\n  private readonly eventSimulator: any; // TODO: Type this properly\n\n  constructor() {\n    this.logger = new (window.PlaywrightLogger || (console as any))() as Logger;\n    this.waitManager = new (window.PlaywrightWaitManager as any)();\n    this.eventSimulator = new (window.PlaywrightEventSimulator as any)();\n  }\n\n  // =============== 导航方法 ===============\n\n  /**\n   * 导航到指定 URL\n   */\n  async goto(url: string, options: PageGotoOptions = {}): Promise<{ url: string; status: number }> {\n    const { waitUntil = 'load', timeout = 30000 } = options;\n    \n    this.logger.info(`导航到: ${url}`);\n    \n    if (window.location.href !== url) {\n      window.location.href = url;\n      await this.waitForLoadState(waitUntil, timeout);\n    }\n    \n    return { url: window.location.href, status: 200 };\n  }\n\n  /**\n   * 后退\n   */\n  async goBack(options: { waitUntil?: 'load' | 'domcontentloaded' | 'networkidle' } = {}): Promise<void> {\n    const { waitUntil = 'load' } = options;\n    window.history.back();\n    await this.waitForLoadState(waitUntil);\n  }\n\n  /**\n   * 前进\n   */\n  async goForward(options: { waitUntil?: 'load' | 'domcontentloaded' | 'networkidle' } = {}): Promise<void> {\n    const { waitUntil = 'load' } = options;\n    window.history.forward();\n    await this.waitForLoadState(waitUntil);\n  }\n\n  /**\n   * 刷新页面\n   */\n  async reload(options: { waitUntil?: 'load' | 'domcontentloaded' | 'networkidle' } = {}): Promise<void> {\n    const { waitUntil = 'load' } = options;\n    window.location.reload();\n    await this.waitForLoadState(waitUntil);\n  }\n\n  // =============== 页面信息获取 ===============\n\n  /**\n   * 获取当前 URL\n   */\n  url(): string {\n    return window.location.href;\n  }\n\n  /**\n   * 获取页面标题\n   */\n  async title(): Promise<string> {\n    return document.title;\n  }\n\n  /**\n   * 获取页面内容\n   */\n  async content(): Promise<string> {\n    return document.documentElement.outerHTML;\n  }\n\n  // =============== 元素交互方法 ===============\n\n  /**\n   * 点击元素\n   */\n  async click(selector: string, options: ClickOptions = {}): Promise<void> {\n    const element = await this.waitForSelector(selector);\n    await this.scrollIntoViewIfNeeded(element);\n    \n    this.eventSimulator.simulateClick(element, options);\n    this.logger.debug(`点击: ${selector}`);\n  }\n\n  /**\n   * 双击元素\n   */\n  async dblclick(selector: string, options: ClickOptions = {}): Promise<void> {\n    const element = await this.waitForSelector(selector);\n    await this.scrollIntoViewIfNeeded(element);\n    \n    this.eventSimulator.simulateDoubleClick(element);\n    this.logger.debug(`双击: ${selector}`);\n  }\n\n  /**\n   * 填充表单\n   */\n  async fill(selector: string, value: string, options: FillOptions = {}): Promise<void> {\n    const element = await this.waitForSelector(selector) as HTMLInputElement | HTMLTextAreaElement;\n    await this.scrollIntoViewIfNeeded(element);\n    \n    // 清空并填充\n    element.value = '';\n    element.value = value;\n    \n    // 触发相关事件\n    element.dispatchEvent(new Event('input', { bubbles: true }));\n    element.dispatchEvent(new Event('change', { bubbles: true }));\n    \n    this.logger.debug(`填充: ${selector} = \"${value}\"`);\n  }\n\n  /**\n   * 按键操作\n   */\n  async press(selector: string, key: string, options: TypeOptions = {}): Promise<void> {\n    const element = await this.waitForSelector(selector) as HTMLElement;\n    element.focus();\n    \n    this.eventSimulator.simulateKeyPress(element, key, options);\n    this.logger.debug(`按键: ${selector} -> ${key}`);\n  }\n\n  /**\n   * 输入文本（模拟打字）\n   */\n  async type(selector: string, text: string, options: TypeOptions = {}): Promise<void> {\n    const element = await this.waitForSelector(selector);\n    await this.eventSimulator.simulateTyping(element, text, options);\n    this.logger.debug(`输入: ${selector} -> \"${text}\"`);\n  }\n\n  /**\n   * 悬停\n   */\n  async hover(selector: string): Promise<void> {\n    const element = await this.waitForSelector(selector);\n    await this.scrollIntoViewIfNeeded(element);\n    \n    this.eventSimulator.simulateHover(element);\n    this.logger.debug(`悬停: ${selector}`);\n  }\n\n  /**\n   * 选择复选框\n   */\n  async check(selector: string): Promise<void> {\n    const element = await this.waitForSelector(selector) as HTMLInputElement;\n    if (element.type === 'checkbox' || element.type === 'radio') {\n      element.checked = true;\n      element.dispatchEvent(new Event('change', { bubbles: true }));\n      this.logger.debug(`选择: ${selector}`);\n    }\n  }\n\n  /**\n   * 取消选择复选框\n   */\n  async uncheck(selector: string): Promise<void> {\n    const element = await this.waitForSelector(selector) as HTMLInputElement;\n    if (element.type === 'checkbox') {\n      element.checked = false;\n      element.dispatchEvent(new Event('change', { bubbles: true }));\n      this.logger.debug(`取消选择: ${selector}`);\n    }\n  }\n\n  /**\n   * 选择下拉选项\n   */\n  async selectOption(selector: string, values: string | string[], options: Record<string, any> = {}): Promise<void> {\n    const element = await this.waitForSelector(selector) as HTMLSelectElement;\n    if (element.tagName === 'SELECT') {\n      if (Array.isArray(values)) {\n        // 多选\n        Array.from(element.options).forEach(option => {\n          option.selected = values.includes(option.value) || values.includes(option.text);\n        });\n      } else {\n        element.value = values;\n      }\n      element.dispatchEvent(new Event('change', { bubbles: true }));\n      this.logger.debug(`选择选项: ${selector} = ${values}`);\n    }\n  }\n\n  /**\n   * 聚焦元素\n   */\n  async focus(selector: string, options: Record<string, any> = {}): Promise<void> {\n    const element = await this.waitForSelector(selector) as HTMLElement;\n    await this.scrollIntoViewIfNeeded(element);\n    \n    element.focus();\n    this.logger.debug(`聚焦: ${selector}`);\n  }\n\n  // =============== 现代定位器方法 ===============\n\n  /**\n   * 创建 Locator\n   */\n  locator(selector: string, options: Record<string, any> = {}): any {\n    // 动态获取 LocatorAdapter 类\n    const LocatorAdapterClass = window.PlaywrightLocatorAdapter;\n    if (!LocatorAdapterClass) {\n      throw new Error('PlaywrightLocatorAdapter not found in global scope');\n    }\n    return new LocatorAdapterClass(selector, this, options);\n  }\n\n  /**\n   * 根据角色定位\n   */\n  getByRole(role: string, options: { name?: string; exact?: boolean; level?: number } = {}): any {\n    const { name, exact = false, level } = options;\n    \n    if (level && role === 'heading') {\n      return this.locator(`h${level}[role=\"heading\"], h${level}`);\n    }\n    \n    // 构建基础的角色选择器，包括隐式角色\n    let baseSelector = `[role=\"${role}\"]`;\n    \n    // 添加隐式 ARIA 角色的元素\n    const implicitRoles: Record<string, string> = {\n      'button': 'button, input[type=\"button\"], input[type=\"submit\"], input[type=\"reset\"]',\n      'link': 'a[href]',\n      'textbox': 'input[type=\"text\"], input[type=\"email\"], input[type=\"password\"], input[type=\"search\"], input[type=\"tel\"], input[type=\"url\"], textarea',\n      'combobox': 'select',\n      'checkbox': 'input[type=\"checkbox\"]',\n      'radio': 'input[type=\"radio\"]',\n      'heading': 'h1, h2, h3, h4, h5, h6'\n    };\n    \n    if (implicitRoles[role]) {\n      baseSelector = `[role=\"${role}\"], ${implicitRoles[role]}`;\n    }\n    \n    if (name) {\n      // 使用 XPath 处理复杂的文本匹配，包括隐式角色\n      let xpathParts = [`//*[@role=\"${role}\"]`];\n      \n      // 添加隐式角色的 XPath\n      if (implicitRoles[role]) {\n        const elements = implicitRoles[role].split(', ');\n        elements.forEach(element => {\n          if (element.includes('[')) {\n            // 处理带属性的元素，如 input[type=\"text\"]\n            const [tag, attrPart] = element.split('[');\n            // 移除右括号并解析属性\n            const attr = attrPart.replace(/\\]$/, '');\n            \n            if (attr.includes('=')) {\n              // 有值的属性，如 type=\"button\"\n              const [attrName, attrValue] = attr.split('=');\n              const cleanAttrName = attrName.trim();\n              const cleanAttrValue = attrValue.replace(/['\"]/g, '').trim();\n              xpathParts.push(`//${tag}[@${cleanAttrName}=\"${cleanAttrValue}\"]`);\n            } else {\n              // 仅存在性检查的属性\n              const cleanAttrName = attr.trim();\n              xpathParts.push(`//${tag}[@${cleanAttrName}]`);\n            }\n          } else {\n            // 简单标签名\n            xpathParts.push(`//${element}`);\n          }\n        });\n      }\n      \n      let xpath: string;\n      if (exact) {\n        xpath = xpathParts.map(part => \n          `${part}[@aria-label=\"${name}\"] | ${part}[normalize-space(text())=\"${name}\"]`\n        ).join(' | ');\n      } else {\n        xpath = xpathParts.map(part => \n          `${part}[contains(@aria-label, \"${name}\")] | ${part}[contains(normalize-space(text()), \"${name}\")]`\n        ).join(' | ');\n      }\n      return this.locator(`xpath=${xpath}`);\n    }\n    \n    return this.locator(baseSelector);\n  }\n\n  /**\n   * 根据文本定位\n   */\n  getByText(text: string, options: { exact?: boolean } = {}): any {\n    const { exact = false } = options;\n    let xpath: string;\n    \n    if (exact) {\n      xpath = `//*[normalize-space(text())=\"${text}\"]`;\n    } else {\n      xpath = `//*[contains(normalize-space(text()), \"${text}\")]`;\n    }\n    \n    return this.locator(`xpath=${xpath}`);\n  }\n\n  /**\n   * 根据标签定位\n   */\n  getByLabel(text: string, options: { exact?: boolean } = {}): any {\n    const { exact = false } = options;\n    \n    // 使用 XPath 来查找标签文本相关的输入元素\n    let xpath: string;\n    if (exact) {\n      xpath = `//input[@id = //label[normalize-space(text())=\"${text}\"]/@for] | //label[normalize-space(text())=\"${text}\"]//input | //input[@aria-labelledby = //label[normalize-space(text())=\"${text}\"]/@id]`;\n    } else {\n      xpath = `//input[@id = //label[contains(normalize-space(text()), \"${text}\")]/@for] | //label[contains(normalize-space(text()), \"${text}\")]//input | //input[@aria-labelledby = //label[contains(normalize-space(text()), \"${text}\")]/@id]`;\n    }\n    \n    return this.locator(`xpath=${xpath}`);\n  }\n\n  /**\n   * 根据占位符定位\n   */\n  getByPlaceholder(text: string, options: { exact?: boolean } = {}): any {\n    const { exact = false } = options;\n    const selector = exact \n      ? `[placeholder=\"${text}\"]`\n      : `[placeholder*=\"${text}\"]`;\n    \n    return this.locator(selector);\n  }\n\n  /**\n   * 根据测试 ID 定位\n   */\n  getByTestId(testId: string): any {\n    return this.locator(`[data-testid=\"${testId}\"]`);\n  }\n\n  /**\n   * 根据标题定位\n   */\n  getByTitle(text: string, options: { exact?: boolean } = {}): any {\n    const { exact = false } = options;\n    const selector = exact \n      ? `[title=\"${text}\"]`\n      : `[title*=\"${text}\"]`;\n    \n    return this.locator(selector);\n  }\n\n  // =============== 等待方法 ===============\n\n  /**\n   * 等待元素\n   */\n  async waitForSelector(selector: string, options: { timeout?: number; state?: string } = {}): Promise<Element> {\n    const { timeout = 30000, state = 'visible' } = options;\n    \n    // 如果是 xpath，需要特殊处理\n    if (selector.startsWith('xpath=')) {\n      return this.waitForXPath(selector.substring(6), { timeout });\n    }\n    \n    // 处理 :visible 和 :hidden 伪类选择器\n    let actualSelector = selector;\n    let requiredState = state;\n    \n    if (selector.includes(':visible')) {\n      actualSelector = selector.replace(':visible', '');\n      requiredState = 'visible';\n    } else if (selector.includes(':hidden')) {\n      actualSelector = selector.replace(':hidden', '');\n      requiredState = 'hidden';\n    }\n    \n    const element = await this.waitManager.waitForElement(actualSelector, timeout);\n    \n    if (requiredState === 'visible') {\n      await this.waitManager.waitForCondition(\n        () => {\n          const rect = element.getBoundingClientRect();\n          const style = getComputedStyle(element);\n          return rect.width > 0 && rect.height > 0 && \n                 style.visibility !== 'hidden' && style.display !== 'none';\n        },\n        timeout,\n        `元素 \"${actualSelector}\" 等待可见超时`\n      );\n    } else if (requiredState === 'hidden') {\n      await this.waitManager.waitForCondition(\n        () => {\n          const rect = element.getBoundingClientRect();\n          const style = getComputedStyle(element);\n          return rect.width === 0 || rect.height === 0 || \n                 style.visibility === 'hidden' || style.display === 'none';\n        },\n        timeout,\n        `元素 \"${actualSelector}\" 等待隐藏超时`\n      );\n    }\n    \n    return element;\n  }\n\n  /**\n   * 等待 XPath 元素\n   */\n  async waitForXPath(xpath: string, options: { timeout?: number } = {}): Promise<Element> {\n    const { timeout = 30000 } = options;\n    \n    return this.waitManager.waitForCondition(\n      () => {\n        const result = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);\n        return result.singleNodeValue;\n      },\n      timeout,\n      `XPath 元素等待超时: ${xpath}`\n    );\n  }\n\n  /**\n   * 等待超时\n   */\n  async waitForTimeout(ms: number): Promise<void> {\n    return this.waitManager.waitForTimeout(ms);\n  }\n\n  /**\n   * 等待函数\n   */\n  async waitForFunction<T>(fn: () => T, arg?: any, options: { timeout?: number } = {}): Promise<T> {\n    const { timeout = 30000 } = options;\n    return this.waitManager.waitForCondition(\n      () => fn(arg),\n      timeout,\n      '等待函数条件超时'\n    );\n  }\n\n  /**\n   * 等待 URL\n   */\n  async waitForURL(url: string | RegExp, options: { timeout?: number } = {}): Promise<void> {\n    const { timeout = 30000 } = options;\n    return this.waitManager.waitForURL(url, timeout);\n  }\n\n  /**\n   * 等待加载状态\n   */\n  async waitForLoadState(state: 'load' | 'domcontentloaded' | 'networkidle' = 'load'): Promise<void> {\n    return this.waitManager.waitForLoadState(state);\n  }\n\n  // =============== 脚本执行方法 ===============\n\n  /**\n   * 在页面上下文中执行脚本\n   */\n  async evaluate<T>(fn: (...args: any[]) => T, ...args: any[]): Promise<T> {\n    try {\n      return fn.apply(window, args);\n    } catch (error) {\n      this.logger.error('脚本执行失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 在页面上下文中执行脚本并返回句柄\n   */\n  async evaluateHandle<T>(fn: (...args: any[]) => T, ...args: any[]): Promise<T> {\n    return this.evaluate(fn, ...args);\n  }\n\n  /**\n   * 添加脚本标签\n   */\n  async addScriptTag(options: { url?: string; path?: string; content?: string; type?: string } = {}): Promise<HTMLScriptElement> {\n    const { url, path, content, type = 'text/javascript' } = options;\n    \n    const script = document.createElement('script');\n    script.type = type;\n    \n    if (url) {\n      script.src = url;\n    } else if (content) {\n      script.textContent = content;\n    }\n    \n    document.head.appendChild(script);\n    \n    // 等待脚本加载\n    if (url) {\n      await new Promise((resolve, reject) => {\n        script.onload = resolve;\n        script.onerror = reject;\n      });\n    }\n    \n    this.logger.debug('添加脚本标签');\n    return script;\n  }\n\n  /**\n   * 添加样式标签\n   */\n  async addStyleTag(options: { url?: string; path?: string; content?: string } = {}): Promise<HTMLLinkElement | HTMLStyleElement> {\n    const { url, path, content } = options;\n    \n    if (url) {\n      const link = document.createElement('link');\n      link.rel = 'stylesheet';\n      link.href = url;\n      document.head.appendChild(link);\n      return link;\n    } else if (content) {\n      const style = document.createElement('style');\n      style.textContent = content;\n      document.head.appendChild(style);\n      return style;\n    }\n\n    throw new Error('Either url or content must be provided');\n  }\n\n  // =============== 辅助方法 ===============\n\n  /**\n   * 滚动元素到可视区域\n   */\n  async scrollIntoViewIfNeeded(element: Element): Promise<void> {\n    const rect = element.getBoundingClientRect();\n    const isInViewport = rect.top >= 0 && rect.bottom <= window.innerHeight &&\n                        rect.left >= 0 && rect.right <= window.innerWidth;\n    \n    if (!isInViewport) {\n      element.scrollIntoView({ behavior: 'smooth', block: 'center' });\n      await this.waitForTimeout(100); // 等待滚动完成\n      this.logger.debug('元素滚动到可视区域');\n    }\n  }\n\n  /**\n   * 获取元素边界框\n   */\n  async boundingBox(selector: string): Promise<BoundingBox> {\n    const element = await this.waitForSelector(selector);\n    const rect = element.getBoundingClientRect();\n    \n    return {\n      x: rect.left + window.scrollX,\n      y: rect.top + window.scrollY,\n      width: rect.width,\n      height: rect.height\n    };\n  }\n\n  /**\n   * 设置视口大小（有限支持）\n   */\n  async setViewportSize(size: ViewportSize): Promise<ViewportSize> {\n    // 浏览器环境中无法直接设置视口大小\n    // 这里只是记录日志\n    this.logger.warn('浏览器环境中无法设置视口大小');\n    return { width: window.innerWidth, height: window.innerHeight };\n  }\n\n  /**\n   * 获取视口大小\n   */\n  viewportSize(): ViewportSize {\n    return { width: window.innerWidth, height: window.innerHeight };\n  }\n}\n\n// 扩展 Window 接口\ndeclare global {\n  interface Window {\n    PlaywrightPageAdapter?: typeof PageAdapter;\n    PlaywrightLocatorAdapter?: any;\n    PlaywrightWaitManager?: any;\n    PlaywrightEventSimulator?: any;\n    PlaywrightLogger?: any;\n  }\n}\n\n// 导出给浏览器使用\nif (typeof window !== 'undefined') {\n  window.PlaywrightPageAdapter = PageAdapter;\n}\n\n// Node.js 环境\ndeclare const module: any;\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = PageAdapter;\n}\n\n// ES6 模块导出\nexport default PageAdapter;","import type { ExpectMatcherOptions, Logger } from '../../types/index.js';\n\n/**\n * Expect 适配器 - 实现 Playwright Expect API\n */\nclass ExpectAdapter {\n  private target: any;\n  private isNot: boolean;\n  private timeout: number;\n  private logger: Logger;\n\n  constructor(target: any, options: { timeout?: number } = {}) {\n    this.target = target;\n    this.isNot = false;\n    this.timeout = options.timeout || 5000;\n    this.logger = new (window.PlaywrightLogger || console)() as Logger;\n  }\n\n  /**\n   * 取反\n   */\n  get not(): ExpectAdapter {\n    const newExpect = new ExpectAdapter(this.target, { timeout: this.timeout });\n    newExpect.isNot = !this.isNot;\n    return newExpect;\n  }\n\n  // =============== 可见性断言 ===============\n\n  /**\n   * 断言元素可见\n   */\n  async toBeVisible(options: ExpectMatcherOptions = {}): Promise<void> {\n    const timeout = options.timeout || this.timeout;\n    const expected = !this.isNot;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const isVisible = await this.target.isVisible();\n          return isVisible === expected;\n        },\n        timeout,\n        `期望元素${expected ? '可见' : '不可见'}`\n      );\n      \n      this.logger.debug(`✅ 元素${expected ? '可见' : '不可见'}断言通过`);\n    } catch (error) {\n      const actualVisible = await this.target.isVisible();\n      throw new Error(`期望元素${expected ? '可见' : '不可见'}，但实际${actualVisible ? '可见' : '不可见'}`);\n    }\n  }\n\n  /**\n   * 断言元素隐藏\n   */\n  async toBeHidden(options: ExpectMatcherOptions = {}): Promise<void> {\n    const timeout = options.timeout || this.timeout;\n    const expected = !this.isNot; // Hidden means NOT visible\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const isVisible = await this.target.isVisible();\n          return isVisible !== expected; // Element should NOT be visible when expected to be hidden\n        },\n        timeout,\n        `期望元素${expected ? '隐藏' : '可见'}`\n      );\n      \n      this.logger.debug(`✅ 元素${expected ? '隐藏' : '可见'}断言通过`);\n    } catch (error) {\n      const actualVisible = await this.target.isVisible();\n      throw new Error(`期望元素${expected ? '隐藏' : '可见'}，但实际${actualVisible ? '可见' : '隐藏'}`);\n    }\n  }\n\n  // =============== 状态断言 ===============\n\n  /**\n   * 断言元素启用\n   */\n  async toBeEnabled(options: ExpectMatcherOptions = {}): Promise<void> {\n    const timeout = options.timeout || this.timeout;\n    const expected = !this.isNot;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const isEnabled = await this.target.isEnabled();\n          return isEnabled === expected;\n        },\n        timeout,\n        `期望元素${expected ? '启用' : '禁用'}`\n      );\n      \n      this.logger.debug(`✅ 元素${expected ? '启用' : '禁用'}断言通过`);\n    } catch (error) {\n      const actualEnabled = await this.target.isEnabled();\n      throw new Error(`期望元素${expected ? '启用' : '禁用'}，但实际${actualEnabled ? '启用' : '禁用'}`);\n    }\n  }\n\n  /**\n   * 断言元素禁用\n   */\n  async toBeDisabled(options: ExpectMatcherOptions = {}): Promise<void> {\n    const timeout = options.timeout || this.timeout;\n    const expected = this.isNot;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const isEnabled = await this.target.isEnabled();\n          return isEnabled === expected;\n        },\n        timeout,\n        `期望元素${expected ? '启用' : '禁用'}`\n      );\n      \n      this.logger.debug(`✅ 元素${expected ? '启用' : '禁用'}断言通过`);\n    } catch (error) {\n      const actualEnabled = await this.target.isEnabled();\n      throw new Error(`期望元素${expected ? '启用' : '禁用'}，但实际${actualEnabled ? '启用' : '禁用'}`);\n    }\n  }\n\n  /**\n   * 断言复选框选中\n   */\n  async toBeChecked(options: ExpectMatcherOptions = {}): Promise<void> {\n    const timeout = options.timeout || this.timeout;\n    const expected = !this.isNot;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const isChecked = await this.target.isChecked();\n          return isChecked === expected;\n        },\n        timeout,\n        `期望元素${expected ? '选中' : '未选中'}`\n      );\n      \n      this.logger.debug(`✅ 元素${expected ? '选中' : '未选中'}断言通过`);\n    } catch (error) {\n      const actualChecked = await this.target.isChecked();\n      throw new Error(`期望元素${expected ? '选中' : '未选中'}，但实际${actualChecked ? '选中' : '未选中'}`);\n    }\n  }\n\n  // =============== 内容断言 ===============\n\n  /**\n   * 断言包含文本\n   */\n  async toHaveText(expectedText: string | RegExp | string[], options: ExpectMatcherOptions = {}): Promise<void> {\n    const timeout = options.timeout || this.timeout;\n    const useInnerText = options.useInnerText || false;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const actualText = useInnerText \n            ? await this.target.innerText()\n            : await this.target.textContent();\n          \n          let matches: boolean;\n          if (Array.isArray(expectedText)) {\n            matches = expectedText.every(text => actualText.includes(text));\n          } else if (expectedText instanceof RegExp) {\n            matches = expectedText.test(actualText);\n          } else {\n            matches = actualText.includes(expectedText);\n          }\n          \n          return this.isNot ? !matches : matches;\n        },\n        timeout,\n        `期望文本${this.isNot ? '不' : ''}包含 \"${expectedText}\"`\n      );\n      \n      this.logger.debug(`✅ 文本${this.isNot ? '不' : ''}包含断言通过`);\n    } catch (error) {\n      const actualText = useInnerText \n        ? await this.target.innerText()\n        : await this.target.textContent();\n      throw new Error(`期望文本${this.isNot ? '不' : ''}包含 \"${expectedText}\"，但实际文本为 \"${actualText}\"`);\n    }\n  }\n\n  /**\n   * 断言确切文本\n   */\n  async toHaveExactText(expectedText: string, options: ExpectMatcherOptions = {}): Promise<void> {\n    const timeout = options.timeout || this.timeout;\n    const useInnerText = options.useInnerText || false;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const actualText = useInnerText \n            ? await this.target.innerText()\n            : await this.target.textContent();\n          \n          const matches = actualText.trim() === expectedText.trim();\n          return this.isNot ? !matches : matches;\n        },\n        timeout,\n        `期望文本${this.isNot ? '不' : ''}完全匹配 \"${expectedText}\"`\n      );\n      \n      this.logger.debug(`✅ 确切文本${this.isNot ? '不' : ''}匹配断言通过`);\n    } catch (error) {\n      const actualText = useInnerText \n        ? await this.target.innerText()\n        : await this.target.textContent();\n      throw new Error(`期望文本${this.isNot ? '不' : ''}完全匹配 \"${expectedText}\"，但实际文本为 \"${actualText}\"`);\n    }\n  }\n\n  /**\n   * 断言包含文本（部分）\n   */\n  async toContainText(expectedText: string | RegExp, options: ExpectMatcherOptions = {}): Promise<void> {\n    return this.toHaveText(expectedText, options);\n  }\n\n  // =============== 属性断言 ===============\n\n  /**\n   * 断言有属性\n   */\n  async toHaveAttribute(name: string, value?: string | RegExp, options: ExpectMatcherOptions = {}): Promise<void> {\n    const timeout = options.timeout || this.timeout;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const actualValue = await this.target.getAttribute(name);\n          \n          let matches: boolean;\n          if (value === undefined) {\n            matches = actualValue !== null;\n          } else if (value instanceof RegExp) {\n            matches = value.test(actualValue || '');\n          } else {\n            matches = actualValue === value;\n          }\n          \n          return this.isNot ? !matches : matches;\n        },\n        timeout,\n        `期望${this.isNot ? '不' : ''}有属性 \"${name}\"`\n      );\n      \n      this.logger.debug(`✅ 属性${this.isNot ? '不' : ''}存在断言通过`);\n    } catch (error) {\n      const actualValue = await this.target.getAttribute(name);\n      throw new Error(`期望${this.isNot ? '不' : ''}有属性 \"${name}\"${value !== undefined ? ` = \"${value}\"` : ''}，但实际值为 \"${actualValue}\"`);\n    }\n  }\n\n  /**\n   * 断言有值\n   */\n  async toHaveValue(expectedValue: string | RegExp, options: ExpectMatcherOptions = {}): Promise<void> {\n    const timeout = options.timeout || this.timeout;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const actualValue = await this.target.inputValue();\n          \n          let matches: boolean;\n          if (expectedValue instanceof RegExp) {\n            matches = expectedValue.test(actualValue);\n          } else {\n            matches = actualValue === expectedValue;\n          }\n          \n          return this.isNot ? !matches : matches;\n        },\n        timeout,\n        `期望值${this.isNot ? '不' : ''}为 \"${expectedValue}\"`\n      );\n      \n      this.logger.debug(`✅ 值${this.isNot ? '不' : ''}匹配断言通过`);\n    } catch (error) {\n      const actualValue = await this.target.inputValue();\n      throw new Error(`期望值${this.isNot ? '不' : ''}为 \"${expectedValue}\"，但实际值为 \"${actualValue}\"`);\n    }\n  }\n\n  /**\n   * 断言有类名\n   */\n  async toHaveClass(expectedClass: string | string[] | RegExp, options: ExpectMatcherOptions = {}): Promise<void> {\n    const timeout = options.timeout || this.timeout;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const classAttr = await this.target.getAttribute('class');\n          const classes = classAttr ? classAttr.split(' ') : [];\n          \n          let matches: boolean;\n          if (Array.isArray(expectedClass)) {\n            matches = expectedClass.every(cls => classes.includes(cls));\n          } else if (expectedClass instanceof RegExp) {\n            matches = expectedClass.test(classAttr || '');\n          } else {\n            matches = classes.includes(expectedClass);\n          }\n          \n          return this.isNot ? !matches : matches;\n        },\n        timeout,\n        `期望${this.isNot ? '不' : ''}有类名 \"${expectedClass}\"`\n      );\n      \n      this.logger.debug(`✅ 类名${this.isNot ? '不' : ''}存在断言通过`);\n    } catch (error) {\n      const classAttr = await this.target.getAttribute('class');\n      throw new Error(`期望${this.isNot ? '不' : ''}有类名 \"${expectedClass}\"，但实际类名为 \"${classAttr}\"`);\n    }\n  }\n\n  /**\n   * 断言有 ID\n   */\n  async toHaveId(expectedId: string, options: ExpectMatcherOptions = {}): Promise<void> {\n    return this.toHaveAttribute('id', expectedId, options);\n  }\n\n  // =============== 数量断言 ===============\n\n  /**\n   * 断言数量\n   */\n  async toHaveCount(expectedCount: number, options: ExpectMatcherOptions = {}): Promise<void> {\n    const timeout = options.timeout || this.timeout;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const actualCount = await this.target.count();\n          const matches = actualCount === expectedCount;\n          return this.isNot ? !matches : matches;\n        },\n        timeout,\n        `期望数量${this.isNot ? '不' : ''}为 ${expectedCount}`\n      );\n      \n      this.logger.debug(`✅ 数量${this.isNot ? '不' : ''}匹配断言通过`);\n    } catch (error) {\n      const actualCount = await this.target.count();\n      throw new Error(`期望数量${this.isNot ? '不' : ''}为 ${expectedCount}，但实际数量为 ${actualCount}`);\n    }\n  }\n\n  // =============== URL 断言 ===============\n\n  /**\n   * 断言 URL\n   */\n  async toHaveURL(expectedUrl: string | RegExp, options: ExpectMatcherOptions = {}): Promise<void> {\n    const timeout = options.timeout || this.timeout;\n    \n    try {\n      await this.waitForCondition(\n        () => {\n          const currentUrl = window.location.href;\n          \n          let matches: boolean;\n          if (expectedUrl instanceof RegExp) {\n            matches = expectedUrl.test(currentUrl);\n          } else {\n            matches = currentUrl.includes(expectedUrl);\n          }\n          \n          return this.isNot ? !matches : matches;\n        },\n        timeout,\n        `期望 URL ${this.isNot ? '不' : ''}匹配 \"${expectedUrl}\"`\n      );\n      \n      this.logger.debug(`✅ URL ${this.isNot ? '不' : ''}匹配断言通过`);\n    } catch (error) {\n      const currentUrl = window.location.href;\n      throw new Error(`期望 URL ${this.isNot ? '不' : ''}匹配 \"${expectedUrl}\"，但当前 URL 为 \"${currentUrl}\"`);\n    }\n  }\n\n  /**\n   * 断言标题\n   */\n  async toHaveTitle(expectedTitle: string | RegExp, options: ExpectMatcherOptions = {}): Promise<void> {\n    const timeout = options.timeout || this.timeout;\n    \n    try {\n      await this.waitForCondition(\n        () => {\n          const currentTitle = document.title;\n          \n          let matches: boolean;\n          if (expectedTitle instanceof RegExp) {\n            matches = expectedTitle.test(currentTitle);\n          } else {\n            matches = currentTitle.includes(expectedTitle);\n          }\n          \n          return this.isNot ? !matches : matches;\n        },\n        timeout,\n        `期望标题${this.isNot ? '不' : ''}匹配 \"${expectedTitle}\"`\n      );\n      \n      this.logger.debug(`✅ 标题${this.isNot ? '不' : ''}匹配断言通过`);\n    } catch (error) {\n      const currentTitle = document.title;\n      throw new Error(`期望标题${this.isNot ? '不' : ''}匹配 \"${expectedTitle}\"，但当前标题为 \"${currentTitle}\"`);\n    }\n  }\n\n  // =============== 通用断言 ===============\n\n  /**\n   * 断言包含指定值（用于数组等）\n   */\n  toContain(expectedValue: any): void {\n    try {\n      let contains: boolean;\n      \n      if (Array.isArray(this.target)) {\n        contains = this.target.includes(expectedValue);\n      } else if (typeof this.target === 'string') {\n        contains = this.target.includes(expectedValue);\n      } else {\n        throw new Error('toContain 只支持数组或字符串类型');\n      }\n      \n      const shouldContain = !this.isNot;\n      if (contains !== shouldContain) {\n        throw new Error(`期望${shouldContain ? '' : '不'}包含 \"${expectedValue}\"`);\n      }\n      \n      this.logger.debug(`✅ 包含${shouldContain ? '' : '不'}断言通过`);\n    } catch (error) {\n      throw new Error(`期望${this.isNot ? '不' : ''}包含 \"${expectedValue}\"，但目标值为 ${JSON.stringify(this.target)}`);\n    }\n  }\n\n  // =============== 辅助方法 ===============\n\n  /**\n   * 等待条件满足\n   */\n  private async waitForCondition(\n    conditionFn: () => boolean | Promise<boolean>, \n    timeout: number, \n    description: string\n  ): Promise<void> {\n    const startTime = Date.now();\n    \n    const check = async (): Promise<void> => {\n      try {\n        const result = await conditionFn();\n        if (result) {\n          return;\n        }\n      } catch (error) {\n        // 继续等待\n      }\n\n      if (Date.now() - startTime >= timeout) {\n        throw new Error(`${description}超时 (${timeout}ms)`);\n      }\n\n      await new Promise(resolve => setTimeout(resolve, 100));\n      return check();\n    };\n\n    return check();\n  }\n}\n\n// 创建全局 expect 函数\nfunction createExpect() {\n  return function expect(target: any): ExpectAdapter {\n    return new ExpectAdapter(target);\n  };\n}\n\n// 扩展 Window 接口\ndeclare global {\n  interface Window {\n    PlaywrightExpectAdapter?: typeof ExpectAdapter;\n    PlaywrightExpect?: ReturnType<typeof createExpect>;\n    PlaywrightLogger?: any;\n  }\n}\n\n// 导出给浏览器使用\nif (typeof window !== 'undefined') {\n  window.PlaywrightExpectAdapter = ExpectAdapter;\n  window.PlaywrightExpect = createExpect();\n}\n\n// Node.js 环境\ndeclare const module: any;\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = { ExpectAdapter, createExpect };\n}\n\n// ES6 模块导出\nexport default ExpectAdapter;\nexport { createExpect };","import type { TestResult, Logger } from '../../types/index.js';\n\ninterface TestContext {\n  page: any; // TODO: Type this properly\n}\n\ninterface TestFunction {\n  (context: TestContext): Promise<void>;\n}\n\ninterface TestDefinition {\n  name: string;\n  fn: TestFunction;\n  run(): Promise<TestResult>;\n}\n\n/**\n * Playwright 运行时适配器\n * 模拟 @playwright/test 模块，让 Playwright 脚本能在浏览器中运行\n */\nclass PlaywrightRuntime {\n  private logger: Logger;\n\n  constructor() {\n    this.logger = new (window.PlaywrightLogger || console)() as Logger;\n    this.setupGlobalEnvironment();\n  }\n\n  /**\n   * 设置全局环境\n   */\n  setupGlobalEnvironment(): void {\n    // 模拟 @playwright/test 模块\n    window.PlaywrightTest = {\n      test: this.createTestFunction(),\n      expect: window.PlaywrightExpect || this.createExpectFunction()\n    };\n\n    // 设置模块系统\n    this.setupModuleSystem();\n    \n    this.logger.debug('Playwright 运行时环境初始化完成');\n  }\n\n  /**\n   * 创建 test 函数\n   */\n  createTestFunction(): (name: string, testFn: TestFunction) => TestDefinition {\n    const self = this;\n    \n    // 主 test 函数\n    function test(name: string, testFn: TestFunction): TestDefinition {\n      return {\n        name,\n        fn: testFn,\n        run: async (): Promise<TestResult> => {\n          const page = new window.PlaywrightPageAdapter();\n          const context: TestContext = { page };\n          const startTime = Date.now();\n\n          try {\n            self.logger.info(`🧪 开始测试: ${name}`);\n            \n            await testFn(context);\n            \n            const duration = Date.now() - startTime;\n            self.logger.success(`✅ 测试通过: ${name} (${duration}ms)`);\n            return { success: true, duration, name };\n          } catch (error) {\n            const duration = Date.now() - startTime;\n            self.logger.error(`❌ 测试失败: ${name} (${duration}ms)`, error);\n            return { \n              success: false, \n              duration, \n              name, \n              error: error as Error \n            };\n          }\n        }\n      };\n    }\n\n    // 为 test 函数添加方法\n    (test as any).skip = function(name: string, testFn: TestFunction): TestDefinition {\n      self.logger.info(`⏭️ 跳过测试: ${name}`);\n      return {\n        name,\n        fn: testFn,\n        run: async (): Promise<TestResult> => ({\n          success: true,\n          duration: 0,\n          name: `${name} (跳过)`\n        })\n      };\n    };\n\n    (test as any).only = function(name: string, testFn: TestFunction): TestDefinition {\n      // 在实际实现中，这会标记只运行这个测试\n      self.logger.info(`🎯 仅运行测试: ${name}`);\n      return test(name, testFn);\n    };\n\n    (test as any).fixme = function(name: string, testFn: TestFunction): TestDefinition {\n      self.logger.info(`🔧 修复中的测试: ${name}`);\n      return {\n        name,\n        fn: testFn,\n        run: async (): Promise<TestResult> => ({\n          success: true,\n          duration: 0,\n          name: `${name} (修复中)`\n        })\n      };\n    };\n\n    (test as any).describe = function(suiteName: string, suiteFn: () => void): void {\n      self.logger.info(`📁 测试套件: ${suiteName}`);\n      // 在实际实现中，这里会创建一个测试套件的作用域\n      suiteFn();\n    };\n\n    return test;\n  }\n\n  /**\n   * 创建 expect 函数（如果不存在）\n   */\n  createExpectFunction(): (target: any) => any {\n    return function expect(target: any) {\n      return new window.PlaywrightExpectAdapter(target);\n    };\n  }\n\n  /**\n   * 设置模块系统\n   */\n  setupModuleSystem(): void {\n    // 创建简单的模块加载器\n    if (!window.require) {\n      window.require = (moduleName: string) => {\n        switch (moduleName) {\n          case '@playwright/test':\n            return window.PlaywrightTest;\n          case 'expect':\n            return window.PlaywrightExpected || this.createExpectFunction();\n          default:\n            throw new Error(`模块 \"${moduleName}\" 未找到`);\n        }\n      };\n    }\n\n    // 设置导入/导出\n    if (!window.importFrom) {\n      const logger = this.logger;\n      window.importFrom = (moduleName: string, imports: string[]) => {\n        try {\n          const module = window.require!(moduleName);\n          const result: Record<string, any> = {};\n          \n          imports.forEach(importName => {\n            if (module && module[importName] !== undefined) {\n              result[importName] = module[importName];\n            } else if (module && importName === 'default') {\n              result[importName] = module;\n            } else {\n              logger.warn(`无法从模块 \"${moduleName}\" 找到导出 \"${importName}\"，使用默认值`);\n              // 对于 @playwright/test，提供默认实现\n              if (moduleName === '@playwright/test') {\n                if (importName === 'test') {\n                  result[importName] = window.PlaywrightTest?.test;\n                } else if (importName === 'expect') {\n                  result[importName] = window.PlaywrightTest?.expect;\n                }\n              }\n            }\n          });\n          \n          return result;\n        } catch (error) {\n          logger.error(`模块导入失败: ${moduleName}`, error);\n          throw error;\n        }\n      };\n    }\n\n    this.logger.debug('模块系统设置完成');\n  }\n\n  /**\n   * 预处理脚本内容，转换 ES6 import 语法\n   */\n  private preprocessScript(scriptContent: string): string {\n    // 简单地移除 import 语句，因为我们通过 Function 参数提供了这些函数\n    let processedContent = scriptContent.replace(\n      /import\\s*\\{\\s*[^}]+\\s*\\}\\s*from\\s*['\"]@playwright\\/test['\"];?\\s*\\n?/g,\n      ''\n    );\n\n    // 移除其他形式的 import 语句\n    processedContent = processedContent.replace(\n      /import\\s*\\*\\s*as\\s*\\w+\\s*from\\s*['\"]@playwright\\/test['\"];?\\s*\\n?/g,\n      ''\n    );\n\n    processedContent = processedContent.replace(\n      /import\\s+\\w+\\s+from\\s*['\"]@playwright\\/test['\"];?\\s*\\n?/g,\n      ''\n    );\n\n    return processedContent;\n  }\n\n  /**\n   * 执行脚本代码\n   */\n  async executeScript(scriptContent: string, scriptName: string = 'inline'): Promise<TestResult[]> {\n    const results: TestResult[] = [];\n    const tests: TestDefinition[] = [];\n\n    try {\n      // 保存原始的 test 函数\n      const originalTest = window.PlaywrightTest?.test;\n      \n      // 重写 test 函数来收集测试\n      if (window.PlaywrightTest) {\n        window.PlaywrightTest.test = (name: string, testFn: TestFunction) => {\n          const testDef = originalTest!(name, testFn);\n          tests.push(testDef);\n          return testDef;\n        };\n      }\n\n      // 准备执行环境\n      const context = this.createExecutionContext();\n      \n      // 执行脚本\n      this.logger.info(`📄 执行脚本: ${scriptName}`);\n      \n      // 预处理脚本内容\n      const processedContent = this.preprocessScript(scriptContent);\n      \n      // 使用 Function 构造器执行脚本，避免 eval 的作用域问题\n      const scriptFunction = new Function(\n        'test', 'expect', 'require', 'importFrom',\n        processedContent\n      );\n\n      scriptFunction(\n        window.PlaywrightTest?.test,\n        window.PlaywrightTest?.expect,\n        window.require,\n        window.importFrom\n      );\n\n      // 恢复原始的 test 函数\n      if (window.PlaywrightTest && originalTest) {\n        window.PlaywrightTest.test = originalTest;\n      }\n\n      // 运行收集到的测试\n      for (const test of tests) {\n        const result = await test.run();\n        results.push(result);\n      }\n\n      this.logger.info(`📊 脚本执行完成: ${tests.length} 个测试`);\n      \n    } catch (error) {\n      this.logger.error(`❌ 脚本执行失败: ${scriptName}`, error);\n      results.push({\n        success: false,\n        duration: 0,\n        name: `脚本执行: ${scriptName}`,\n        error: error as Error\n      });\n    }\n\n    return results;\n  }\n\n  /**\n   * 创建执行上下文\n   */\n  private createExecutionContext(): Record<string, any> {\n    return {\n      console,\n      window,\n      document,\n      setTimeout,\n      setInterval,\n      clearTimeout,\n      clearInterval,\n      Promise,\n      fetch: window.fetch,\n      // Playwright 相关\n      test: window.PlaywrightTest?.test,\n      expect: window.PlaywrightTest?.expect,\n      require: window.require,\n      importFrom: window.importFrom\n    };\n  }\n\n  /**\n   * 清理资源\n   */\n  cleanup(): void {\n    // 清理全局变量\n    delete window.PlaywrightTest;\n    delete window.require;\n    delete window.importFrom;\n    \n    this.logger.debug('Playwright 运行时清理完成');\n  }\n}\n\n// 扩展 Window 接口\ndeclare global {\n  interface Window {\n    PlaywrightRuntime?: typeof PlaywrightRuntime;\n    PlaywrightTest?: {\n      test: any;\n      expect: any;\n    };\n    PlaywrightExpected?: any;\n    PlaywrightExpectAdapter?: any;\n    PlaywrightPageAdapter?: any;\n    PlaywrightLogger?: any;\n    require?: (moduleName: string) => any;\n    importFrom?: (moduleName: string, imports: string[]) => Record<string, any>;\n  }\n}\n\n// 导出给浏览器使用\nif (typeof window !== 'undefined') {\n  window.PlaywrightRuntime = PlaywrightRuntime;\n}\n\n// Node.js 环境\ndeclare const module: any;\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = PlaywrightRuntime;\n}\n\n// ES6 模块导出\nexport default PlaywrightRuntime;","interface TestRunnerOptions {\n  timeout?: number;\n  retries?: number;\n  [key: string]: any;\n}\n\ninterface TestResult {\n  success: boolean;\n  skipped?: boolean;\n  [key: string]: any;\n}\n\ninterface ScriptExecutionResult {\n  scriptName: string;\n  duration: number;\n  results: TestResult[];\n  success: boolean;\n  error?: Error;\n}\n\ninterface BatchStats {\n  scripts: {\n    total: number;\n    passed: number;\n    failed: number;\n  };\n  tests: {\n    total: number;\n    passed: number;\n    failed: number;\n    skipped: number;\n  };\n  duration: number;\n}\n\ninterface GlobalHooks {\n  beforeAll?: () => void | Promise<void>;\n  afterAll?: () => void | Promise<void>;\n  beforeEach?: () => void | Promise<void>;\n  afterEach?: () => void | Promise<void>;\n}\n\ndeclare global {\n  interface Window {\n    PlaywrightRuntime?: any;\n    PlaywrightLogger?: any;\n    PlaywrightTest?: {\n      test: {\n        beforeAll: (fn: () => void | Promise<void>) => void;\n        afterAll: (fn: () => void | Promise<void>) => void;\n        beforeEach: (fn: () => void | Promise<void>) => void;\n        afterEach: (fn: () => void | Promise<void>) => void;\n        _beforeAllHooks: any[];\n        _afterAllHooks: any[];\n        _beforeEachHooks: any[];\n        _afterEachHooks: any[];\n      };\n    };\n    PlaywrightTestRunner?: typeof TestRunner;\n  }\n}\n\nexport default class TestRunner {\n  private runtime: any;\n  private logger: any;\n  private options: TestRunnerOptions;\n\n  constructor(options: TestRunnerOptions = {}) {\n    this.runtime = new (window.PlaywrightRuntime || (globalThis as any).PlaywrightRuntime)();\n    this.logger = new (window.PlaywrightLogger || console)();\n    this.options = {\n      timeout: 30000,\n      retries: 0,\n      ...options\n    };\n  }\n\n  /**\n   * 从文件加载并执行脚本\n   */\n  async loadAndRun(scriptPath: string): Promise<ScriptExecutionResult> {\n    try {\n      this.logger.info(`📂 加载脚本: ${scriptPath}`);\n      const response = await fetch(scriptPath);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      \n      const scriptContent = await response.text();\n      return await this.runScript(scriptContent, scriptPath);\n    } catch (error) {\n      this.logger.error(`脚本加载失败: ${scriptPath}`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * 直接执行脚本字符串\n   */\n  async runScript(scriptContent: string, scriptName: string = 'inline-script'): Promise<ScriptExecutionResult> {\n    try {\n      this.logger.info(`🚀 执行脚本: ${scriptName}`);\n      const startTime = Date.now();\n      \n      const results: TestResult[] = await this.runtime.executeScript(scriptContent);\n      \n      const duration = Date.now() - startTime;\n      this.logger.success(`✅ 脚本执行完成: ${scriptName} (${duration}ms)`);\n      \n      return {\n        scriptName,\n        duration,\n        results,\n        success: results.every(r => r.success || r.skipped)\n      };\n    } catch (error) {\n      this.logger.error(`脚本执行失败: ${scriptName}`, error);\n      return {\n        scriptName,\n        duration: 0,\n        results: [],\n        success: false,\n        error: error as Error\n      };\n    }\n  }\n\n  /**\n   * 执行多个脚本文件\n   */\n  async runScripts(scriptPaths: string[]): Promise<ScriptExecutionResult[]> {\n    const allResults: ScriptExecutionResult[] = [];\n    \n    this.logger.info(`📦 批量执行 ${scriptPaths.length} 个脚本`);\n    \n    for (const path of scriptPaths) {\n      try {\n        const result = await this.loadAndRun(path);\n        allResults.push(result);\n      } catch (error) {\n        allResults.push({\n          scriptName: path,\n          duration: 0,\n          results: [],\n          success: false,\n          error: error as Error\n        });\n      }\n    }\n    \n    // 输出批量执行总结\n    this.printBatchSummary(allResults);\n    \n    return allResults;\n  }\n\n  /**\n   * 从目录批量加载脚本\n   */\n  async runScriptsFromPattern(pattern: string): Promise<never> {\n    // 浏览器环境中无法直接读取文件系统\n    // 这里提供一个基础实现，需要服务器支持\n    this.logger.warn('浏览器环境中无法直接扫描文件系统，请使用 runScripts() 方法');\n    throw new Error('浏览器环境不支持文件系统扫描');\n  }\n\n  /**\n   * 设置全局钩子\n   */\n  setGlobalHooks(hooks: GlobalHooks): void {\n    const { beforeAll, afterAll, beforeEach, afterEach } = hooks;\n    const test = window.PlaywrightTest?.test;\n    \n    if (!test) {\n      throw new Error('PlaywrightTest.test 未找到');\n    }\n    \n    if (beforeAll) test.beforeAll(beforeAll);\n    if (afterAll) test.afterAll(afterAll);\n    if (beforeEach) test.beforeEach(beforeEach);\n    if (afterEach) test.afterEach(afterEach);\n    \n    this.logger.debug('全局钩子设置完成');\n  }\n\n  /**\n   * 设置全局配置\n   */\n  configure(config: Partial<TestRunnerOptions>): void {\n    this.options = { ...this.options, ...config };\n    this.logger.debug('测试配置更新:', this.options);\n  }\n\n  /**\n   * 打印批量执行总结\n   */\n  printBatchSummary(results: ScriptExecutionResult[]): void {\n    const totalScripts = results.length;\n    const successfulScripts = results.filter(r => r.success).length;\n    const failedScripts = results.filter(r => !r.success).length;\n    \n    const totalTests = results.reduce((sum, r) => sum + r.results.length, 0);\n    const passedTests = results.reduce((sum, r) => \n      sum + r.results.filter(test => test.success).length, 0\n    );\n    const failedTests = results.reduce((sum, r) => \n      sum + r.results.filter(test => !test.success && !test.skipped).length, 0\n    );\n    const skippedTests = results.reduce((sum, r) => \n      sum + r.results.filter(test => test.skipped).length, 0\n    );\n    \n    const totalDuration = results.reduce((sum, r) => sum + r.duration, 0);\n    \n    this.logger.info(`\n🎯 批量执行总结:\n📄 脚本统计:\n   ✅ 成功: ${successfulScripts}/${totalScripts}\n   ❌ 失败: ${failedScripts}/${totalScripts}\n\n🧪 测试统计:\n   ✅ 通过: ${passedTests}\n   ❌ 失败: ${failedTests}\n   ⏭️ 跳过: ${skippedTests}\n   📊 总计: ${totalTests}\n\n⏱️ 总耗时: ${totalDuration}ms\n    `);\n    \n    if (failedScripts > 0) {\n      this.logger.error('失败的脚本:');\n      results.filter(r => !r.success).forEach(r => {\n        this.logger.error(`  - ${r.scriptName}: ${r.error?.message || '未知错误'}`);\n      });\n    }\n  }\n\n  /**\n   * 获取执行统计\n   */\n  getStats(results: ScriptExecutionResult[] | ScriptExecutionResult): BatchStats | Omit<BatchStats, 'scripts'> {\n    if (Array.isArray(results) && results[0]?.results) {\n      // 批量执行结果\n      return {\n        scripts: {\n          total: results.length,\n          passed: results.filter(r => r.success).length,\n          failed: results.filter(r => !r.success).length\n        },\n        tests: {\n          total: results.reduce((sum, r) => sum + r.results.length, 0),\n          passed: results.reduce((sum, r) => \n            sum + r.results.filter(test => test.success).length, 0\n          ),\n          failed: results.reduce((sum, r) => \n            sum + r.results.filter(test => !test.success && !test.skipped).length, 0\n          ),\n          skipped: results.reduce((sum, r) => \n            sum + r.results.filter(test => test.skipped).length, 0\n          )\n        },\n        duration: results.reduce((sum, r) => sum + r.duration, 0)\n      };\n    } else {\n      // 单个脚本执行结果\n      const singleResult = results as ScriptExecutionResult;\n      return {\n        tests: {\n          total: singleResult.results?.length || 0,\n          passed: singleResult.results?.filter(test => test.success).length || 0,\n          failed: singleResult.results?.filter(test => !test.success && !test.skipped).length || 0,\n          skipped: singleResult.results?.filter(test => test.skipped).length || 0\n        },\n        duration: singleResult.duration || 0\n      };\n    }\n  }\n\n  /**\n   * 清理资源\n   */\n  cleanup(): void {\n    // 清理全局钩子\n    const test = window.PlaywrightTest?.test;\n    if (test) {\n      test._beforeAllHooks = [];\n      test._afterAllHooks = [];\n      test._beforeEachHooks = [];\n      test._afterEachHooks = [];\n    }\n    \n    this.logger.debug('测试运行器清理完成');\n  }\n}\n\n// 导出给浏览器使用\nif (typeof window !== 'undefined') {\n  (window as any).PlaywrightTestRunner = TestRunner;\n}","/**\n * Playwright 执行引擎主入口文件\n * 将所有组件组合并导出统一的 API\n */\n\nimport type { \n  PlaywrightExecutionEngineOptions, \n  ScriptExecutionResult,\n  TestResult\n} from '../types/index.js';\n\n// 导入所有依赖模块\nimport PlaywrightLogger from './utils/logger.js';\nimport PlaywrightWaitManager from './dom/wait-manager.js';\nimport PlaywrightEventSimulator from './dom/event-simulator.js';\nimport PlaywrightLocatorAdapter from './adapters/locator-adapter.js';\nimport PlaywrightPageAdapter from './adapters/page-adapter.js';\nimport PlaywrightExpectAdapter, { createExpect } from './adapters/expect-adapter.js';\nimport PlaywrightRuntime from './runtime/playwright-runtime.js';\nimport PlaywrightTestRunner from './runtime/test-runner.js';\n\n// 确保所有依赖都已加载\nfunction ensureDependencies(): void {\n  const dependencies = {\n    PlaywrightLogger,\n    PlaywrightWaitManager, \n    PlaywrightEventSimulator,\n    PlaywrightLocatorAdapter,\n    PlaywrightPageAdapter,\n    PlaywrightExpectAdapter,\n    createExpect,\n    PlaywrightRuntime,\n    PlaywrightTestRunner\n  };\n  \n  const missing = Object.entries(dependencies)\n    .filter(([name, component]) => !component)\n    .map(([name]) => name);\n  \n  if (missing.length > 0) {\n    console.warn('缺少依赖:', missing);\n  }\n}\n\n/**\n * Playwright 执行引擎主类\n */\nclass PlaywrightExecutionEngine {\n  private options: Required<PlaywrightExecutionEngineOptions>;\n  private logger: PlaywrightLogger;\n  private runtime: any; // TODO: Type this\n  private testRunner: any; // TODO: Type this\n\n  constructor(options: PlaywrightExecutionEngineOptions = {}) {\n    ensureDependencies();\n    \n    this.options = {\n      logLevel: 'info',\n      timeout: 30000,\n      ...options\n    };\n    \n    // 初始化组件\n    this.logger = new PlaywrightLogger(this.options.logLevel);\n    this.runtime = new PlaywrightRuntime();\n    this.testRunner = new PlaywrightTestRunner(this.options);\n    \n    this.logger.info('Playwright 执行引擎初始化完成');\n  }\n\n  /**\n   * 执行脚本字符串\n   */\n  async runScript(scriptContent: string, scriptName: string = 'inline'): Promise<ScriptExecutionResult> {\n    return await this.testRunner.runScript(scriptContent, scriptName);\n  }\n\n  /**\n   * 加载并执行脚本文件\n   */\n  async loadAndRun(scriptPath: string): Promise<ScriptExecutionResult> {\n    return await this.testRunner.loadAndRun(scriptPath);\n  }\n\n  /**\n   * 批量执行脚本文件\n   */\n  async runScripts(scriptPaths: string[]): Promise<ScriptExecutionResult[]> {\n    return await this.testRunner.runScripts(scriptPaths);\n  }\n\n  /**\n   * 创建新的 Page 实例\n   */\n  createPage(): PlaywrightPageAdapter {\n    return new PlaywrightPageAdapter();\n  }\n\n  /**\n   * 获取 Page 实例（createPage 的别名）\n   */\n  getPage(): PlaywrightPageAdapter {\n    return this.createPage();\n  }\n\n  /**\n   * 创建 expect 实例\n   */\n  expect(target: any): PlaywrightExpectAdapter {\n    return createExpect()(target);\n  }\n\n  /**\n   * 设置全局配置\n   */\n  configure(config: Partial<PlaywrightExecutionEngineOptions>): this {\n    this.options = { ...this.options, ...config };\n    this.testRunner.configure(config);\n    return this;\n  }\n\n  /**\n   * 设置全局钩子\n   */\n  setHooks(hooks: any): this { // TODO: Type this\n    this.testRunner.setGlobalHooks(hooks);\n    return this;\n  }\n\n  /**\n   * 获取执行统计\n   */\n  getStats(results: TestResult[]): any { // TODO: Type this\n    return this.testRunner.getStats(results);\n  }\n\n  /**\n   * 清理资源\n   */\n  cleanup(): void {\n    this.testRunner.cleanup();\n  }\n\n  /**\n   * 获取版本信息\n   */\n  static getVersion(): string {\n    return typeof __VERSION__ !== 'undefined' ? __VERSION__ : '1.0.0-beta';\n  }\n\n  /**\n   * 检查浏览器兼容性\n   */\n  static checkCompatibility(): boolean {\n    const features = {\n      'Promises': typeof Promise !== 'undefined',\n      'async/await': (async () => {})().constructor === Promise,\n      'Fetch API': typeof fetch !== 'undefined',\n      'MutationObserver': typeof MutationObserver !== 'undefined',\n      'querySelector': typeof document.querySelector !== 'undefined',\n      'addEventListener': typeof document.addEventListener !== 'undefined'\n    };\n    \n    const unsupported = Object.entries(features)\n      .filter(([feature, supported]) => !supported)\n      .map(([feature]) => feature);\n    \n    if (unsupported.length > 0) {\n      console.warn('浏览器不支持以下功能:', unsupported);\n      return false;\n    }\n    \n    return true;\n  }\n\n  /**\n   * 静态工厂方法\n   */\n  static create(options?: PlaywrightExecutionEngineOptions): PlaywrightExecutionEngine {\n    if (!PlaywrightExecutionEngine.checkCompatibility()) {\n      throw new Error('当前浏览器不支持 Playwright 执行引擎');\n    }\n    \n    return new PlaywrightExecutionEngine(options);\n  }\n\n  /**\n   * 快捷执行方法\n   */\n  static async run(script: string, options: PlaywrightExecutionEngineOptions = {}): Promise<ScriptExecutionResult> {\n    const engine = PlaywrightExecutionEngine.create(options);\n    return await engine.runScript(script);\n  }\n\n  /**\n   * 快捷加载方法\n   */\n  static async load(scriptPath: string, options: PlaywrightExecutionEngineOptions = {}): Promise<ScriptExecutionResult> {\n    const engine = PlaywrightExecutionEngine.create(options);\n    return await engine.loadAndRun(scriptPath);\n  }\n\n  /**\n   * 导出核心组件（供高级用户使用）\n   */\n  static Components = {\n    Logger: PlaywrightLogger,\n    WaitManager: PlaywrightWaitManager,\n    EventSimulator: PlaywrightEventSimulator,\n    PageAdapter: PlaywrightPageAdapter,\n    LocatorAdapter: PlaywrightLocatorAdapter,\n    ExpectAdapter: PlaywrightExpectAdapter,\n    Runtime: PlaywrightRuntime,\n    TestRunner: PlaywrightTestRunner\n  };\n}\n\n// 声明全局变量\ndeclare global {\n  const __VERSION__: string;\n  \n  interface Window {\n    PlaywrightExecutionEngine?: typeof PlaywrightExecutionEngine;\n    PWEngine?: typeof PlaywrightExecutionEngine;\n    runPlaywrightScript?: typeof PlaywrightExecutionEngine.run;\n    loadPlaywrightScript?: typeof PlaywrightExecutionEngine.load;\n  }\n}\n\n// 全局导出（仅在浏览器环境）\nif (typeof window !== 'undefined') {\n  window.PlaywrightExecutionEngine = PlaywrightExecutionEngine;\n  \n  // 兼容性别名\n  window.PWEngine = PlaywrightExecutionEngine;\n  \n  // 快捷全局方法\n  window.runPlaywrightScript = PlaywrightExecutionEngine.run;\n  window.loadPlaywrightScript = PlaywrightExecutionEngine.load;\n  \n  console.log('🎭 Playwright 执行引擎已加载完成');\n  console.log('版本:', PlaywrightExecutionEngine.getVersion());\n  console.log('使用方法: new PlaywrightExecutionEngine() 或 PlaywrightExecutionEngine.create()');\n}\n\n// ES6 模块默认导出\nexport default PlaywrightExecutionEngine;\n\n// 命名导出\nexport {\n  PlaywrightLogger,\n  PlaywrightWaitManager,\n  PlaywrightEventSimulator,\n  PlaywrightLocatorAdapter,\n  PlaywrightPageAdapter,\n  PlaywrightExpectAdapter,\n  createExpect,\n  PlaywrightRuntime,\n  PlaywrightTestRunner\n};"],"names":["module","PlaywrightLogger","PlaywrightWaitManager","PlaywrightEventSimulator","PlaywrightLocatorAdapter","PlaywrightPageAdapter","PlaywrightExpectAdapter","PlaywrightTestRunner"],"mappings":"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"}