{"version":3,"file":"playwright-execution-engine.iife.js","sources":["../src/utils/logger.js","../src/dom/wait-manager.js","../src/dom/event-simulator.js","../src/adapters/locator-adapter.js","../src/adapters/page-adapter.js","../src/adapters/expect-adapter.js","../src/runtime/playwright-runtime.js","../src/runtime/test-runner.js","../src/index.js"],"sourcesContent":["/**\n * 简单的日志系统\n */\nclass Logger {\n  constructor(level = 'info') {\n    this.level = level;\n    this.levels = {\n      debug: 0,\n      info: 1,\n      warn: 2,\n      error: 3\n    };\n  }\n\n  debug(message, ...args) {\n    if (this.levels[this.level] <= this.levels.debug) {\n      console.debug(`[DEBUG] ${message}`, ...args);\n    }\n  }\n\n  info(message, ...args) {\n    if (this.levels[this.level] <= this.levels.info) {\n      console.info(`[INFO] ${message}`, ...args);\n    }\n  }\n\n  warn(message, ...args) {\n    if (this.levels[this.level] <= this.levels.warn) {\n      console.warn(`[WARN] ${message}`, ...args);\n    }\n  }\n\n  error(message, ...args) {\n    if (this.levels[this.level] <= this.levels.error) {\n      console.error(`[ERROR] ${message}`, ...args);\n    }\n  }\n\n  success(message, ...args) {\n    if (this.levels[this.level] <= this.levels.info) {\n      console.log(`%c[SUCCESS] ${message}`, 'color: green', ...args);\n    }\n  }\n}\n\n// 导出给浏览器使用\nif (typeof window !== 'undefined') {\n  window.PlaywrightLogger = Logger;\n}\n\n// Node.js 环境\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = Logger;\n}\n\n// ES6 模块导出\nexport default Logger;","/**\n * 等待管理器 - 处理各种等待机制\n */\nclass WaitManager {\n  constructor() {\n    this.defaultTimeout = 30000;\n    this.logger = new (window.PlaywrightLogger || console)();\n  }\n\n  /**\n   * 查询单个元素（支持 CSS、XPath 和 text）\n   */\n  querySelector(selector) {\n    if (selector.startsWith('xpath=')) {\n      const xpath = selector.substring(6);\n      const result = document.evaluate(\n        xpath,\n        document,\n        null,\n        XPathResult.FIRST_ORDERED_NODE_TYPE,\n        null\n      );\n      return result.singleNodeValue;\n    } else if (selector.startsWith('text=')) {\n      const text = selector.substring(5);\n      // 使用 XPath 查找包含指定文本的元素\n      const xpath = `//*[contains(normalize-space(text()), \"${text}\")]`;\n      const result = document.evaluate(\n        xpath,\n        document,\n        null,\n        XPathResult.FIRST_ORDERED_NODE_TYPE,\n        null\n      );\n      return result.singleNodeValue;\n    } else {\n      return document.querySelector(selector);\n    }\n  }\n\n  /**\n   * 等待元素出现\n   */\n  async waitForElement(selector, timeout = this.defaultTimeout) {\n    return new Promise((resolve, reject) => {\n      const startTime = Date.now();\n      \n      // 立即检查\n      const existing = this.querySelector(selector);\n      if (existing) {\n        this.logger.debug(`元素立即找到: ${selector}`);\n        return resolve(existing);\n      }\n\n      let timeoutId;\n      let observer;\n\n      const cleanup = () => {\n        if (timeoutId) clearTimeout(timeoutId);\n        if (observer) observer.disconnect();\n      };\n\n      // 设置超时\n      timeoutId = setTimeout(() => {\n        cleanup();\n        reject(new Error(`等待元素超时: ${selector} (${timeout}ms)`));\n      }, timeout);\n\n      // 监听 DOM 变化\n      observer = new MutationObserver(() => {\n        const element = this.querySelector(selector);\n        if (element) {\n          cleanup();\n          const elapsed = Date.now() - startTime;\n          this.logger.debug(`元素找到: ${selector} (${elapsed}ms)`);\n          resolve(element);\n        }\n      });\n\n      observer.observe(document.body, {\n        childList: true,\n        subtree: true,\n        attributes: true\n      });\n    });\n  }\n\n  /**\n   * 等待条件满足\n   */\n  async waitForCondition(conditionFn, timeout = this.defaultTimeout, errorMessage = '等待条件超时') {\n    return new Promise((resolve, reject) => {\n      const startTime = Date.now();\n      \n      const check = async () => {\n        try {\n          const result = await conditionFn();\n          if (result) {\n            const elapsed = Date.now() - startTime;\n            this.logger.debug(`条件满足 (${elapsed}ms)`);\n            resolve(result);\n            return;\n          }\n        } catch (error) {\n          // 继续等待，忽略错误\n          this.logger.debug('条件检查出错，继续等待:', error.message);\n        }\n\n        if (Date.now() - startTime >= timeout) {\n          reject(new Error(`${errorMessage} (${timeout}ms)`));\n          return;\n        }\n\n        setTimeout(check, 100);\n      };\n\n      check();\n    });\n  }\n\n  /**\n   * 等待函数返回真值\n   */\n  async waitForFunction(fn, timeout = this.defaultTimeout) {\n    return this.waitForCondition(fn, timeout, '等待函数条件超时');\n  }\n\n  /**\n   * 等待 URL 变化\n   */\n  async waitForURL(urlPattern, timeout = this.defaultTimeout) {\n    return this.waitForCondition(\n      () => {\n        const currentUrl = window.location.href;\n        if (typeof urlPattern === 'string') {\n          return currentUrl.includes(urlPattern);\n        }\n        if (urlPattern instanceof RegExp) {\n          return urlPattern.test(currentUrl);\n        }\n        return false;\n      },\n      timeout,\n      `等待URL变化超时: ${urlPattern}`\n    );\n  }\n\n  /**\n   * 等待页面加载状态\n   */\n  async waitForLoadState(state = 'load') {\n    return new Promise((resolve) => {\n      const checkState = () => {\n        if (state === 'load' && document.readyState === 'complete') {\n          this.logger.debug('页面完全加载');\n          resolve();\n        } else if (state === 'domcontentloaded' && document.readyState !== 'loading') {\n          this.logger.debug('DOM 内容加载完成');\n          resolve();\n        } else if (state === 'networkidle') {\n          // 简单实现：等待 500ms 无网络请求\n          setTimeout(() => {\n            this.logger.debug('网络空闲');\n            resolve();\n          }, 500);\n        }\n      };\n\n      if (document.readyState === 'complete' && state === 'load') {\n        resolve();\n      } else if (document.readyState !== 'loading' && state === 'domcontentloaded') {\n        resolve();\n      } else {\n        document.addEventListener('readystatechange', checkState, { once: true });\n      }\n    });\n  }\n\n  /**\n   * 简单延时\n   */\n  async waitForTimeout(ms) {\n    this.logger.debug(`等待 ${ms}ms`);\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n}\n\n// 导出给浏览器使用\nif (typeof window !== 'undefined') {\n  window.PlaywrightWaitManager = WaitManager;\n}\n\n// Node.js 环境\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = WaitManager;\n}\n\n// ES6 模块导出\nexport default WaitManager;","/**\n * 事件模拟器 - 模拟各种用户交互事件\n */\nclass EventSimulator {\n  constructor() {\n    this.logger = new (window.PlaywrightLogger || console)();\n  }\n\n  /**\n   * 模拟点击事件\n   */\n  simulateClick(element, options = {}) {\n    const { button = 0, clickCount = 1, delay = 0 } = options;\n    \n    // 确保元素获得焦点\n    element.focus();\n\n    // 触发完整的鼠标事件序列\n    const mouseEvents = ['mousedown', 'mouseup', 'click'];\n    \n    mouseEvents.forEach((eventType, index) => {\n      setTimeout(() => {\n        const event = new MouseEvent(eventType, {\n          view: window,\n          bubbles: true,\n          cancelable: true,\n          button: button,\n          detail: clickCount\n        });\n        \n        element.dispatchEvent(event);\n        this.logger.debug(`触发 ${eventType} 事件`);\n      }, delay * index);\n    });\n  }\n\n  /**\n   * 模拟双击事件\n   */\n  simulateDoubleClick(element) {\n    this.simulateClick(element, { clickCount: 1 });\n    \n    setTimeout(() => {\n      const dblClickEvent = new MouseEvent('dblclick', {\n        view: window,\n        bubbles: true,\n        cancelable: true,\n        detail: 2\n      });\n      element.dispatchEvent(dblClickEvent);\n      this.logger.debug('触发 dblclick 事件');\n    }, 100);\n  }\n\n  /**\n   * 模拟悬停事件\n   */\n  simulateHover(element) {\n    const events = ['mouseover', 'mouseenter'];\n    \n    events.forEach(eventType => {\n      const event = new MouseEvent(eventType, {\n        view: window,\n        bubbles: true,\n        cancelable: true\n      });\n      element.dispatchEvent(event);\n      this.logger.debug(`触发 ${eventType} 事件`);\n    });\n  }\n\n  /**\n   * 模拟键盘事件\n   */\n  simulateKeyPress(element, key, options = {}) {\n    const { ctrlKey = false, shiftKey = false, altKey = false, metaKey = false } = options;\n    \n    element.focus();\n    \n    // 首先触发 keydown 事件\n    const keydownEvent = new KeyboardEvent('keydown', {\n      key: key,\n      code: this.getKeyCode(key),\n      bubbles: true,\n      cancelable: true,\n      ctrlKey,\n      shiftKey,\n      altKey,\n      metaKey\n    });\n    \n    element.dispatchEvent(keydownEvent);\n    \n    // 处理特殊导航键的实际行为\n    if (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA') {\n      this.handleNavigationKey(element, key);\n    }\n    \n    // 触发 keypress 事件 (某些键不触发 keypress)\n    if (!['Home', 'End', 'ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown', 'Backspace', 'Delete'].includes(key)) {\n      const keypressEvent = new KeyboardEvent('keypress', {\n        key: key,\n        code: this.getKeyCode(key),\n        bubbles: true,\n        cancelable: true,\n        ctrlKey,\n        shiftKey,\n        altKey,\n        metaKey\n      });\n      element.dispatchEvent(keypressEvent);\n    }\n    \n    // 触发 keyup 事件\n    const keyupEvent = new KeyboardEvent('keyup', {\n      key: key,\n      code: this.getKeyCode(key),\n      bubbles: true,\n      cancelable: true,\n      ctrlKey,\n      shiftKey,\n      altKey,\n      metaKey\n    });\n    \n    element.dispatchEvent(keyupEvent);\n    this.logger.debug(`触发键盘事件: ${key}`);\n  }\n\n  /**\n   * 处理导航键的实际行为\n   */\n  handleNavigationKey(element, key) {\n    const start = element.selectionStart || 0;\n    const end = element.selectionEnd || 0;\n    const value = element.value || '';\n    \n    switch (key) {\n      case 'Home':\n        element.setSelectionRange(0, 0);\n        break;\n        \n      case 'End':\n        element.setSelectionRange(value.length, value.length);\n        break;\n        \n      case 'ArrowLeft':\n        if (start > 0) {\n          const newPos = Math.max(0, start - 1);\n          element.setSelectionRange(newPos, newPos);\n        }\n        break;\n        \n      case 'ArrowRight':\n        if (start < value.length) {\n          const newPos = Math.min(value.length, start + 1);\n          element.setSelectionRange(newPos, newPos);\n        }\n        break;\n        \n      case 'Backspace':\n        if (start === end && start > 0) {\n          // 删除光标前的字符\n          element.value = value.slice(0, start - 1) + value.slice(end);\n          element.setSelectionRange(start - 1, start - 1);\n          element.dispatchEvent(new Event('input', { bubbles: true }));\n        } else if (start !== end) {\n          // 删除选中文本\n          element.value = value.slice(0, start) + value.slice(end);\n          element.setSelectionRange(start, start);\n          element.dispatchEvent(new Event('input', { bubbles: true }));\n        }\n        break;\n        \n      case 'Delete':\n        if (start === end && start < value.length) {\n          // 删除光标后的字符\n          element.value = value.slice(0, start) + value.slice(end + 1);\n          element.setSelectionRange(start, start);\n          element.dispatchEvent(new Event('input', { bubbles: true }));\n        } else if (start !== end) {\n          // 删除选中文本\n          element.value = value.slice(0, start) + value.slice(end);\n          element.setSelectionRange(start, start);\n          element.dispatchEvent(new Event('input', { bubbles: true }));\n        }\n        break;\n    }\n  }\n\n  /**\n   * 模拟输入序列\n   */\n  async simulateTyping(element, text, options = {}) {\n    const { delay = 50 } = options;\n    \n    element.focus();\n    \n    for (let i = 0; i < text.length; i++) {\n      const char = text[i];\n      \n      // 获取当前光标位置\n      const start = element.selectionStart || 0;\n      const end = element.selectionEnd || 0;\n      const currentValue = element.value || '';\n      \n      // 在光标位置插入字符\n      const newValue = currentValue.slice(0, start) + char + currentValue.slice(end);\n      element.value = newValue;\n      \n      // 更新光标位置\n      const newCursorPos = start + 1;\n      element.setSelectionRange(newCursorPos, newCursorPos);\n      \n      // 触发输入事件\n      element.dispatchEvent(new Event('input', { bubbles: true }));\n      this.simulateKeyPress(element, char);\n      \n      if (delay > 0) {\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n    \n    // 触发 change 事件\n    element.dispatchEvent(new Event('change', { bubbles: true }));\n    this.logger.debug(`输入文本: \"${text}\"`);\n  }\n\n  /**\n   * 模拟表单控件变化\n   */\n  simulateFormChange(element, value) {\n    if (element.type === 'checkbox' || element.type === 'radio') {\n      element.checked = value;\n    } else if (element.tagName === 'SELECT') {\n      element.value = value;\n    } else {\n      element.value = value;\n    }\n    \n    // 触发相关事件\n    element.dispatchEvent(new Event('input', { bubbles: true }));\n    element.dispatchEvent(new Event('change', { bubbles: true }));\n    \n    this.logger.debug(`表单控件变化: ${element.tagName} = ${value}`);\n  }\n\n  /**\n   * 获取键码\n   */\n  getKeyCode(key) {\n    const keyCodes = {\n      'Enter': 'Enter',\n      'Escape': 'Escape',\n      'Tab': 'Tab',\n      'Backspace': 'Backspace',\n      'Delete': 'Delete',\n      'Home': 'Home',\n      'End': 'End',\n      'ArrowUp': 'ArrowUp',\n      'ArrowDown': 'ArrowDown',\n      'ArrowLeft': 'ArrowLeft',\n      'ArrowRight': 'ArrowRight',\n      ' ': 'Space'\n    };\n    \n    return keyCodes[key] || key;\n  }\n\n  /**\n   * 滚动元素到可视区域\n   */\n  async scrollIntoView(element, options = {}) {\n    const { behavior = 'smooth', block = 'center' } = options;\n    \n    element.scrollIntoView({ behavior, block });\n    \n    // 等待滚动完成\n    await new Promise(resolve => setTimeout(resolve, 100));\n    \n    this.logger.debug('元素滚动到可视区域');\n  }\n}\n\n// 导出给浏览器使用\nif (typeof window !== 'undefined') {\n  window.PlaywrightEventSimulator = EventSimulator;\n}\n\n// Node.js 环境\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = EventSimulator;\n}\n\n// ES6 模块导出\nexport default EventSimulator;","/**\n * Locator 适配器 - 实现 Playwright Locator API\n */\nclass LocatorAdapter {\n  constructor(selector, page, options = {}) {\n    this.selector = selector;\n    this.page = page;\n    this.options = options;\n    this.filters = [];\n    this.logger = new (window.PlaywrightLogger || console)();\n    this.waitManager = page.waitManager;\n    this.eventSimulator = page.eventSimulator;\n  }\n\n  // =============== 链式过滤器方法 ===============\n\n  /**\n   * 过滤 locator\n   */\n  filter(options) {\n    const newLocator = new LocatorAdapter(this.selector, this.page);\n    newLocator.filters = [...this.filters, options];\n    return newLocator;\n  }\n\n  /**\n   * 获取第一个元素\n   */\n  first() {\n    return this.nth(0);\n  }\n\n  /**\n   * 获取最后一个元素\n   */\n  last() {\n    return this.filter({ position: 'last' });\n  }\n\n  /**\n   * 获取第 n 个元素\n   */\n  nth(n) {\n    return this.filter({ position: n });\n  }\n\n  /**\n   * 创建子 Locator (在当前 Locator 范围内查找)\n   */\n  locator(selector, options = {}) {\n    // 创建组合选择器，表示在当前选择器范围内查找子选择器\n    const combinedSelector = this.combineSelectorWithParent(selector);\n    const newLocator = new LocatorAdapter(combinedSelector, this.page, options);\n    // 继承当前的过滤器\n    newLocator.filters = [...this.filters];\n    return newLocator;\n  }\n\n  /**\n   * 将选择器与父选择器组合\n   */\n  combineSelectorWithParent(childSelector) {\n    // 如果子选择器是 XPath，需要特殊处理\n    if (childSelector.startsWith('xpath=')) {\n      const childXpath = childSelector.substring(6);\n      if (this.selector.startsWith('xpath=')) {\n        const parentXpath = this.selector.substring(6);\n        return `xpath=${parentXpath}//${childXpath}`;\n      } else {\n        // 父选择器是 CSS，子选择器是 XPath - 需要转换\n        return `xpath=//*[${this.cssSelectorToXPath(this.selector)}]//${childXpath}`;\n      }\n    }\n    \n    // 如果父选择器是 XPath，子选择器是 CSS\n    if (this.selector.startsWith('xpath=')) {\n      const parentXpath = this.selector.substring(6);\n      const childXpath = this.cssSelectorToXPath(childSelector);\n      return `xpath=${parentXpath}//*[${childXpath}]`;\n    }\n    \n    // 两个都是 CSS 选择器\n    return `${this.selector} ${childSelector}`;\n  }\n\n  /**\n   * 将 CSS 选择器转换为 XPath 条件（简化版）\n   */\n  cssSelectorToXPath(cssSelector) {\n    // 简化的 CSS 到 XPath 转换\n    if (cssSelector.startsWith('#')) {\n      // ID 选择器\n      return `@id=\"${cssSelector.substring(1)}\"`;\n    } else if (cssSelector.startsWith('.')) {\n      // 类选择器\n      return `contains(@class, \"${cssSelector.substring(1)}\")`;\n    } else if (cssSelector.startsWith('[') && cssSelector.endsWith(']')) {\n      // 属性选择器\n      const attrMatch = cssSelector.match(/\\[([^=]+)=\"([^\"]+)\"\\]/);\n      if (attrMatch) {\n        return `@${attrMatch[1]}=\"${attrMatch[2]}\"`;\n      }\n      const attrExistsMatch = cssSelector.match(/\\[([^=\\]]+)\\]/);\n      if (attrExistsMatch) {\n        return `@${attrExistsMatch[1]}`;\n      }\n    } else if (/^[a-zA-Z][a-zA-Z0-9]*$/.test(cssSelector)) {\n      // 标签选择器\n      return `self::${cssSelector}`;\n    }\n    \n    // 复杂选择器 - 暂时不支持完整转换，回退到组合 CSS\n    return `self::*`;\n  }\n\n  /**\n   * 根据文本过滤\n   */\n  getByText(text, options = {}) {\n    return this.filter({ hasText: text, exact: options.exact });\n  }\n\n  // =============== 核心操作方法 ===============\n\n  /**\n   * 点击元素\n   */\n  async click(options = {}) {\n    const element = await this.getElement();\n    await this.page.scrollIntoViewIfNeeded(element);\n    \n    this.eventSimulator.simulateClick(element, options);\n    this.logger.debug(`点击元素: ${this.selector}`);\n  }\n\n  /**\n   * 双击元素\n   */\n  async dblclick(options = {}) {\n    const element = await this.getElement();\n    await this.page.scrollIntoViewIfNeeded(element);\n    \n    this.eventSimulator.simulateDoubleClick(element);\n    this.logger.debug(`双击元素: ${this.selector}`);\n  }\n\n  /**\n   * 填充表单\n   */\n  async fill(value, options = {}) {\n    const element = await this.getElement();\n    await this.page.scrollIntoViewIfNeeded(element);\n    \n    // 清空并填充\n    element.value = '';\n    element.value = value;\n    \n    // 触发相关事件\n    element.dispatchEvent(new Event('input', { bubbles: true }));\n    element.dispatchEvent(new Event('change', { bubbles: true }));\n    \n    this.logger.debug(`填充元素: ${this.selector} = \"${value}\"`);\n  }\n\n  /**\n   * 按键操作\n   */\n  async press(key, options = {}) {\n    const element = await this.getElement();\n    element.focus();\n    \n    this.eventSimulator.simulateKeyPress(element, key, options);\n    this.logger.debug(`按键: ${this.selector} -> ${key}`);\n  }\n\n  /**\n   * 逐字符输入（模拟打字）\n   */\n  async pressSequentially(text, options = {}) {\n    const element = await this.getElement();\n    await this.eventSimulator.simulateTyping(element, text, options);\n    this.logger.debug(`逐字符输入: ${this.selector} -> \"${text}\"`);\n  }\n\n  /**\n   * 悬停\n   */\n  async hover() {\n    const element = await this.getElement();\n    await this.page.scrollIntoViewIfNeeded(element);\n    \n    this.eventSimulator.simulateHover(element);\n    this.logger.debug(`悬停元素: ${this.selector}`);\n  }\n\n  /**\n   * 选择复选框\n   */\n  async check() {\n    const element = await this.getElement();\n    if (element.type === 'checkbox' || element.type === 'radio') {\n      element.checked = true;\n      element.dispatchEvent(new Event('change', { bubbles: true }));\n      this.logger.debug(`选择复选框: ${this.selector}`);\n    }\n  }\n\n  /**\n   * 取消选择复选框\n   */\n  async uncheck() {\n    const element = await this.getElement();\n    if (element.type === 'checkbox') {\n      element.checked = false;\n      element.dispatchEvent(new Event('change', { bubbles: true }));\n      this.logger.debug(`取消选择复选框: ${this.selector}`);\n    }\n  }\n\n  /**\n   * 选择下拉选项\n   */\n  async selectOption(values, options = {}) {\n    const element = await this.getElement();\n    if (element.tagName === 'SELECT') {\n      if (Array.isArray(values)) {\n        // 多选\n        Array.from(element.options).forEach(option => {\n          option.selected = values.includes(option.value) || values.includes(option.text);\n        });\n      } else {\n        element.value = values;\n      }\n      element.dispatchEvent(new Event('change', { bubbles: true }));\n      this.logger.debug(`选择下拉选项: ${this.selector} = ${values}`);\n    }\n  }\n\n  // =============== 状态检查方法 ===============\n\n  /**\n   * 检查元素是否可见\n   */\n  async isVisible() {\n    try {\n      const element = await this.getElement();\n      const rect = element.getBoundingClientRect();\n      const style = getComputedStyle(element);\n      \n      return rect.width > 0 && \n             rect.height > 0 && \n             style.visibility !== 'hidden' && \n             style.display !== 'none' &&\n             element.offsetParent !== null;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * 检查元素是否隐藏\n   */\n  async isHidden() {\n    return !(await this.isVisible());\n  }\n\n  /**\n   * 检查元素是否启用\n   */\n  async isEnabled() {\n    try {\n      const element = await this.getElement();\n      return !element.disabled && !element.hasAttribute('disabled');\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * 检查元素是否禁用\n   */\n  async isDisabled() {\n    return !(await this.isEnabled());\n  }\n\n  /**\n   * 检查复选框是否选中\n   */\n  async isChecked() {\n    try {\n      const element = await this.getElement();\n      return element.checked || false;\n    } catch {\n      return false;\n    }\n  }\n\n  // =============== 内容获取方法 ===============\n\n  /**\n   * 获取文本内容\n   */\n  async textContent() {\n    const element = await this.getElement();\n    return element.textContent || '';\n  }\n\n  /**\n   * 获取内部文本\n   */\n  async innerText() {\n    const element = await this.getElement();\n    return element.innerText || '';\n  }\n\n  /**\n   * 获取 HTML 内容\n   */\n  async innerHTML() {\n    const element = await this.getElement();\n    return element.innerHTML || '';\n  }\n\n  /**\n   * 获取属性值\n   */\n  async getAttribute(name) {\n    const element = await this.getElement();\n    return element.getAttribute(name);\n  }\n\n  /**\n   * 获取输入值\n   */\n  async inputValue() {\n    const element = await this.getElement();\n    return element.value || '';\n  }\n\n  // =============== 等待方法 ===============\n\n  /**\n   * 等待元素状态\n   */\n  async waitFor(options = {}) {\n    const { state = 'visible', timeout = 30000 } = options;\n    \n    switch (state) {\n      case 'visible':\n        return this.waitForVisible(timeout);\n      case 'hidden':\n        return this.waitForHidden(timeout);\n      case 'attached':\n        return this.waitForAttached(timeout);\n      case 'detached':\n        return this.waitForDetached(timeout);\n      default:\n        throw new Error(`未知的等待状态: ${state}`);\n    }\n  }\n\n  async waitForVisible(timeout) {\n    return this.waitManager.waitForCondition(\n      () => this.isVisible(),\n      timeout,\n      `元素 \"${this.selector}\" 等待可见超时`\n    );\n  }\n\n  async waitForHidden(timeout) {\n    return this.waitManager.waitForCondition(\n      () => this.isHidden(),\n      timeout,\n      `元素 \"${this.selector}\" 等待隐藏超时`\n    );\n  }\n\n  async waitForAttached(timeout) {\n    return this.waitManager.waitForCondition(\n      () => this.count() > 0,\n      timeout,\n      `元素 \"${this.selector}\" 等待附加到DOM超时`\n    );\n  }\n\n  async waitForDetached(timeout) {\n    return this.waitManager.waitForCondition(\n      () => this.count() === 0,\n      timeout,\n      `元素 \"${this.selector}\" 等待从DOM分离超时`\n    );\n  }\n\n  // =============== 内部方法 ===============\n\n  /**\n   * 查询元素（支持 CSS 和 XPath）\n   */\n  queryElements(selector) {\n    if (selector.startsWith('xpath=')) {\n      const xpath = selector.substring(6);\n      const result = document.evaluate(\n        xpath,\n        document,\n        null,\n        XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,\n        null\n      );\n      \n      const elements = [];\n      for (let i = 0; i < result.snapshotLength; i++) {\n        elements.push(result.snapshotItem(i));\n      }\n      return elements;\n    } else {\n      return Array.from(document.querySelectorAll(selector));\n    }\n  }\n\n  /**\n   * 获取元素数量\n   */\n  async count() {\n    const elements = this.queryElements(this.selector);\n    return this.applyFilters(elements).length;\n  }\n\n  /**\n   * 获取所有匹配的元素\n   */\n  async all() {\n    const elements = this.queryElements(this.selector);\n    const filtered = this.applyFilters(elements);\n    \n    return filtered.map(element => {\n      const locator = new LocatorAdapter(this.buildUniqueSelector(element), this.page);\n      locator._element = element; // 缓存元素\n      return locator;\n    });\n  }\n\n  /**\n   * 获取单个元素\n   */\n  async getElement() {\n    // 如果有缓存的元素，直接返回\n    if (this._element && document.contains(this._element)) {\n      return this._element;\n    }\n\n    const elements = this.queryElements(this.selector);\n    \n    if (elements.length === 0) {\n      throw new Error(`找不到元素: ${this.selector}`);\n    }\n\n    const filteredElements = this.applyFilters(elements);\n\n    if (filteredElements.length === 0) {\n      throw new Error(`过滤后找不到元素: ${this.selector}`);\n    }\n\n    return filteredElements[0];\n  }\n\n  /**\n   * 应用过滤器\n   */\n  applyFilters(elements) {\n    let filtered = elements;\n    \n    for (const filter of this.filters) {\n      filtered = this.applyFilter(filtered, filter);\n    }\n\n    return filtered;\n  }\n\n  /**\n   * 应用单个过滤器\n   */\n  applyFilter(elements, filter) {\n    if (typeof filter.position === 'number') {\n      return elements[filter.position] ? [elements[filter.position]] : [];\n    }\n    \n    if (filter.position === 'last') {\n      return elements.length > 0 ? [elements[elements.length - 1]] : [];\n    }\n\n    if (filter.hasText) {\n      return elements.filter(el => {\n        const text = el.textContent || el.innerText || '';\n        return filter.exact ? text === filter.hasText : text.includes(filter.hasText);\n      });\n    }\n\n    if (filter.hasNotText) {\n      return elements.filter(el => {\n        const text = el.textContent || el.innerText || '';\n        return !text.includes(filter.hasNotText);\n      });\n    }\n\n    return elements;\n  }\n\n  /**\n   * 构建唯一选择器\n   */\n  buildUniqueSelector(element) {\n    if (element.id) {\n      return `#${element.id}`;\n    }\n    \n    // 构建路径选择器\n    const path = [];\n    let current = element;\n    \n    while (current && current !== document.body) {\n      let selector = current.tagName.toLowerCase();\n      \n      if (current.className) {\n        const classes = current.className.split(' ').filter(c => c.trim());\n        if (classes.length > 0) {\n          selector += '.' + classes.join('.');\n        }\n      }\n      \n      // 添加位置信息以确保唯一性\n      const siblings = Array.from(current.parentNode?.children || [])\n        .filter(sibling => sibling.tagName === current.tagName);\n      \n      if (siblings.length > 1) {\n        const index = siblings.indexOf(current);\n        selector += `:nth-of-type(${index + 1})`;\n      }\n      \n      path.unshift(selector);\n      current = current.parentElement;\n    }\n    \n    return path.join(' > ');\n  }\n}\n\n// 导出给浏览器使用\nif (typeof window !== 'undefined') {\n  window.PlaywrightLocatorAdapter = LocatorAdapter;\n}\n\n// Node.js 环境\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = LocatorAdapter;\n}\n\n// ES6 模块导出\nexport default LocatorAdapter;","/**\n * Page 适配器 - 实现 Playwright Page API\n */\nclass PageAdapter {\n  constructor() {\n    this.logger = new (window.PlaywrightLogger || console)();\n    this.waitManager = new window.PlaywrightWaitManager();\n    this.eventSimulator = new window.PlaywrightEventSimulator();\n  }\n\n  // =============== 导航方法 ===============\n\n  /**\n   * 导航到指定 URL\n   */\n  async goto(url, options = {}) {\n    const { waitUntil = 'load', timeout = 30000 } = options;\n    \n    this.logger.info(`导航到: ${url}`);\n    \n    if (window.location.href !== url) {\n      window.location.href = url;\n      await this.waitForLoadState(waitUntil, timeout);\n    }\n    \n    return { url: window.location.href, status: 200 };\n  }\n\n  /**\n   * 后退\n   */\n  async goBack(options = {}) {\n    const { waitUntil = 'load' } = options;\n    window.history.back();\n    await this.waitForLoadState(waitUntil);\n  }\n\n  /**\n   * 前进\n   */\n  async goForward(options = {}) {\n    const { waitUntil = 'load' } = options;\n    window.history.forward();\n    await this.waitForLoadState(waitUntil);\n  }\n\n  /**\n   * 刷新页面\n   */\n  async reload(options = {}) {\n    const { waitUntil = 'load' } = options;\n    window.location.reload();\n    await this.waitForLoadState(waitUntil);\n  }\n\n  // =============== 页面信息获取 ===============\n\n  /**\n   * 获取当前 URL\n   */\n  url() {\n    return window.location.href;\n  }\n\n  /**\n   * 获取页面标题\n   */\n  async title() {\n    return document.title;\n  }\n\n  /**\n   * 获取页面内容\n   */\n  async content() {\n    return document.documentElement.outerHTML;\n  }\n\n  // =============== 元素交互方法 ===============\n\n  /**\n   * 点击元素\n   */\n  async click(selector, options = {}) {\n    const element = await this.waitForSelector(selector);\n    await this.scrollIntoViewIfNeeded(element);\n    \n    this.eventSimulator.simulateClick(element, options);\n    this.logger.debug(`点击: ${selector}`);\n  }\n\n  /**\n   * 双击元素\n   */\n  async dblclick(selector, options = {}) {\n    const element = await this.waitForSelector(selector);\n    await this.scrollIntoViewIfNeeded(element);\n    \n    this.eventSimulator.simulateDoubleClick(element);\n    this.logger.debug(`双击: ${selector}`);\n  }\n\n  /**\n   * 填充表单\n   */\n  async fill(selector, value, options = {}) {\n    const element = await this.waitForSelector(selector);\n    await this.scrollIntoViewIfNeeded(element);\n    \n    // 清空并填充\n    element.value = '';\n    element.value = value;\n    \n    // 触发相关事件\n    element.dispatchEvent(new Event('input', { bubbles: true }));\n    element.dispatchEvent(new Event('change', { bubbles: true }));\n    \n    this.logger.debug(`填充: ${selector} = \"${value}\"`);\n  }\n\n  /**\n   * 按键操作\n   */\n  async press(selector, key, options = {}) {\n    const element = await this.waitForSelector(selector);\n    element.focus();\n    \n    this.eventSimulator.simulateKeyPress(element, key, options);\n    this.logger.debug(`按键: ${selector} -> ${key}`);\n  }\n\n  /**\n   * 输入文本（模拟打字）\n   */\n  async type(selector, text, options = {}) {\n    const element = await this.waitForSelector(selector);\n    await this.eventSimulator.simulateTyping(element, text, options);\n    this.logger.debug(`输入: ${selector} -> \"${text}\"`);\n  }\n\n  /**\n   * 悬停\n   */\n  async hover(selector) {\n    const element = await this.waitForSelector(selector);\n    await this.scrollIntoViewIfNeeded(element);\n    \n    this.eventSimulator.simulateHover(element);\n    this.logger.debug(`悬停: ${selector}`);\n  }\n\n  /**\n   * 选择复选框\n   */\n  async check(selector) {\n    const element = await this.waitForSelector(selector);\n    if (element.type === 'checkbox' || element.type === 'radio') {\n      element.checked = true;\n      element.dispatchEvent(new Event('change', { bubbles: true }));\n      this.logger.debug(`选择: ${selector}`);\n    }\n  }\n\n  /**\n   * 取消选择复选框\n   */\n  async uncheck(selector) {\n    const element = await this.waitForSelector(selector);\n    if (element.type === 'checkbox') {\n      element.checked = false;\n      element.dispatchEvent(new Event('change', { bubbles: true }));\n      this.logger.debug(`取消选择: ${selector}`);\n    }\n  }\n\n  /**\n   * 选择下拉选项\n   */\n  async selectOption(selector, values, options = {}) {\n    const element = await this.waitForSelector(selector);\n    if (element.tagName === 'SELECT') {\n      if (Array.isArray(values)) {\n        // 多选\n        Array.from(element.options).forEach(option => {\n          option.selected = values.includes(option.value) || values.includes(option.text);\n        });\n      } else {\n        element.value = values;\n      }\n      element.dispatchEvent(new Event('change', { bubbles: true }));\n      this.logger.debug(`选择选项: ${selector} = ${values}`);\n    }\n  }\n\n  /**\n   * 聚焦元素\n   */\n  async focus(selector, options = {}) {\n    const element = await this.waitForSelector(selector);\n    await this.scrollIntoViewIfNeeded(element);\n    \n    element.focus();\n    this.logger.debug(`聚焦: ${selector}`);\n  }\n\n  // =============== 现代定位器方法 ===============\n\n  /**\n   * 创建 Locator\n   */\n  locator(selector, options = {}) {\n    // 动态获取 LocatorAdapter 类\n    const LocatorAdapterClass = window.PlaywrightLocatorAdapter;\n    if (!LocatorAdapterClass) {\n      throw new Error('PlaywrightLocatorAdapter not found in global scope');\n    }\n    return new LocatorAdapterClass(selector, this, options);\n  }\n\n  /**\n   * 根据角色定位\n   */\n  getByRole(role, options = {}) {\n    const { name, exact = false, level } = options;\n    \n    if (level && role === 'heading') {\n      return this.locator(`h${level}[role=\"heading\"], h${level}`);\n    }\n    \n    // 构建基础的角色选择器，包括隐式角色\n    let baseSelector = `[role=\"${role}\"]`;\n    \n    // 添加隐式 ARIA 角色的元素\n    const implicitRoles = {\n      'button': 'button, input[type=\"button\"], input[type=\"submit\"], input[type=\"reset\"]',\n      'link': 'a[href]',\n      'textbox': 'input[type=\"text\"], input[type=\"email\"], input[type=\"password\"], input[type=\"search\"], input[type=\"tel\"], input[type=\"url\"], textarea',\n      'combobox': 'select',\n      'checkbox': 'input[type=\"checkbox\"]',\n      'radio': 'input[type=\"radio\"]',\n      'heading': 'h1, h2, h3, h4, h5, h6'\n    };\n    \n    if (implicitRoles[role]) {\n      baseSelector = `[role=\"${role}\"], ${implicitRoles[role]}`;\n    }\n    \n    if (name) {\n      // 使用 XPath 处理复杂的文本匹配，包括隐式角色\n      let xpathParts = [`//*[@role=\"${role}\"]`];\n      \n      // 添加隐式角色的 XPath\n      if (implicitRoles[role]) {\n        const elements = implicitRoles[role].split(', ');\n        elements.forEach(element => {\n          if (element.includes('[')) {\n            // 处理带属性的元素，如 input[type=\"text\"]\n            const [tag, attrPart] = element.split('[');\n            // 移除右括号并解析属性\n            const attr = attrPart.replace(/\\]$/, '');\n            \n            if (attr.includes('=')) {\n              // 有值的属性，如 type=\"button\"\n              const [attrName, attrValue] = attr.split('=');\n              const cleanAttrName = attrName.trim();\n              const cleanAttrValue = attrValue.replace(/['\"]/g, '').trim();\n              xpathParts.push(`//${tag}[@${cleanAttrName}=\"${cleanAttrValue}\"]`);\n            } else {\n              // 仅存在性检查的属性\n              const cleanAttrName = attr.trim();\n              xpathParts.push(`//${tag}[@${cleanAttrName}]`);\n            }\n          } else {\n            // 简单标签名\n            xpathParts.push(`//${element}`);\n          }\n        });\n      }\n      \n      let xpath;\n      if (exact) {\n        xpath = xpathParts.map(part => \n          `${part}[@aria-label=\"${name}\"] | ${part}[normalize-space(text())=\"${name}\"]`\n        ).join(' | ');\n      } else {\n        xpath = xpathParts.map(part => \n          `${part}[contains(@aria-label, \"${name}\")] | ${part}[contains(normalize-space(text()), \"${name}\")]`\n        ).join(' | ');\n      }\n      return this.locator(`xpath=${xpath}`);\n    }\n    \n    return this.locator(baseSelector);\n  }\n\n  /**\n   * 根据文本定位\n   */\n  getByText(text, options = {}) {\n    const { exact = false } = options;\n    let xpath;\n    \n    if (exact) {\n      xpath = `//*[normalize-space(text())=\"${text}\"]`;\n    } else {\n      xpath = `//*[contains(normalize-space(text()), \"${text}\")]`;\n    }\n    \n    return this.locator(`xpath=${xpath}`);\n  }\n\n  /**\n   * 根据标签定位\n   */\n  getByLabel(text, options = {}) {\n    const { exact = false } = options;\n    \n    // 使用 XPath 来查找标签文本相关的输入元素\n    let xpath;\n    if (exact) {\n      xpath = `//input[@id = //label[normalize-space(text())=\"${text}\"]/@for] | //label[normalize-space(text())=\"${text}\"]//input | //input[@aria-labelledby = //label[normalize-space(text())=\"${text}\"]/@id]`;\n    } else {\n      xpath = `//input[@id = //label[contains(normalize-space(text()), \"${text}\")]/@for] | //label[contains(normalize-space(text()), \"${text}\")]//input | //input[@aria-labelledby = //label[contains(normalize-space(text()), \"${text}\")]/@id]`;\n    }\n    \n    return this.locator(`xpath=${xpath}`);\n  }\n\n  /**\n   * 根据占位符定位\n   */\n  getByPlaceholder(text, options = {}) {\n    const { exact = false } = options;\n    const selector = exact \n      ? `[placeholder=\"${text}\"]`\n      : `[placeholder*=\"${text}\"]`;\n    \n    return this.locator(selector);\n  }\n\n  /**\n   * 根据测试 ID 定位\n   */\n  getByTestId(testId) {\n    return this.locator(`[data-testid=\"${testId}\"]`);\n  }\n\n  /**\n   * 根据标题定位\n   */\n  getByTitle(text, options = {}) {\n    const { exact = false } = options;\n    const selector = exact \n      ? `[title=\"${text}\"]`\n      : `[title*=\"${text}\"]`;\n    \n    return this.locator(selector);\n  }\n\n  // =============== 等待方法 ===============\n\n  /**\n   * 等待元素\n   */\n  async waitForSelector(selector, options = {}) {\n    const { timeout = 30000, state = 'visible' } = options;\n    \n    // 如果是 xpath，需要特殊处理\n    if (selector.startsWith('xpath=')) {\n      return this.waitForXPath(selector.substring(6), { timeout, state });\n    }\n    \n    // 处理 :visible 和 :hidden 伪类选择器\n    let actualSelector = selector;\n    let requiredState = state;\n    \n    if (selector.includes(':visible')) {\n      actualSelector = selector.replace(':visible', '');\n      requiredState = 'visible';\n    } else if (selector.includes(':hidden')) {\n      actualSelector = selector.replace(':hidden', '');\n      requiredState = 'hidden';\n    }\n    \n    const element = await this.waitManager.waitForElement(actualSelector, timeout);\n    \n    if (requiredState === 'visible') {\n      await this.waitManager.waitForCondition(\n        () => {\n          const rect = element.getBoundingClientRect();\n          const style = getComputedStyle(element);\n          return rect.width > 0 && rect.height > 0 && \n                 style.visibility !== 'hidden' && style.display !== 'none';\n        },\n        timeout,\n        `元素 \"${actualSelector}\" 等待可见超时`\n      );\n    } else if (requiredState === 'hidden') {\n      await this.waitManager.waitForCondition(\n        () => {\n          const rect = element.getBoundingClientRect();\n          const style = getComputedStyle(element);\n          return rect.width === 0 || rect.height === 0 || \n                 style.visibility === 'hidden' || style.display === 'none';\n        },\n        timeout,\n        `元素 \"${actualSelector}\" 等待隐藏超时`\n      );\n    }\n    \n    return element;\n  }\n\n  /**\n   * 等待 XPath 元素\n   */\n  async waitForXPath(xpath, options = {}) {\n    const { timeout = 30000 } = options;\n    \n    return this.waitManager.waitForCondition(\n      () => {\n        const result = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);\n        return result.singleNodeValue;\n      },\n      timeout,\n      `XPath 元素等待超时: ${xpath}`\n    );\n  }\n\n  /**\n   * 等待超时\n   */\n  async waitForTimeout(ms) {\n    return this.waitManager.waitForTimeout(ms);\n  }\n\n  /**\n   * 等待函数\n   */\n  async waitForFunction(fn, arg, options = {}) {\n    const { timeout = 30000 } = options;\n    return this.waitManager.waitForCondition(\n      () => fn(arg),\n      timeout,\n      '等待函数条件超时'\n    );\n  }\n\n  /**\n   * 等待 URL\n   */\n  async waitForURL(url, options = {}) {\n    const { timeout = 30000 } = options;\n    return this.waitManager.waitForURL(url, timeout);\n  }\n\n  /**\n   * 等待加载状态\n   */\n  async waitForLoadState(state = 'load', timeout = 30000) {\n    return this.waitManager.waitForLoadState(state);\n  }\n\n  // =============== 脚本执行方法 ===============\n\n  /**\n   * 在页面上下文中执行脚本\n   */\n  async evaluate(fn, ...args) {\n    try {\n      return fn.apply(window, args);\n    } catch (error) {\n      this.logger.error('脚本执行失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 在页面上下文中执行脚本并返回句柄\n   */\n  async evaluateHandle(fn, ...args) {\n    return this.evaluate(fn, ...args);\n  }\n\n  /**\n   * 添加脚本标签\n   */\n  async addScriptTag(options = {}) {\n    const { url, path, content, type = 'text/javascript' } = options;\n    \n    const script = document.createElement('script');\n    script.type = type;\n    \n    if (url) {\n      script.src = url;\n    } else if (content) {\n      script.textContent = content;\n    }\n    \n    document.head.appendChild(script);\n    \n    // 等待脚本加载\n    if (url) {\n      await new Promise((resolve, reject) => {\n        script.onload = resolve;\n        script.onerror = reject;\n      });\n    }\n    \n    this.logger.debug('添加脚本标签');\n    return script;\n  }\n\n  /**\n   * 添加样式标签\n   */\n  async addStyleTag(options = {}) {\n    const { url, path, content } = options;\n    \n    if (url) {\n      const link = document.createElement('link');\n      link.rel = 'stylesheet';\n      link.href = url;\n      document.head.appendChild(link);\n      return link;\n    } else if (content) {\n      const style = document.createElement('style');\n      style.textContent = content;\n      document.head.appendChild(style);\n      return style;\n    }\n  }\n\n  // =============== 辅助方法 ===============\n\n  /**\n   * 滚动元素到可视区域\n   */\n  async scrollIntoViewIfNeeded(element) {\n    const rect = element.getBoundingClientRect();\n    const isInViewport = rect.top >= 0 && rect.bottom <= window.innerHeight &&\n                        rect.left >= 0 && rect.right <= window.innerWidth;\n    \n    if (!isInViewport) {\n      element.scrollIntoView({ behavior: 'smooth', block: 'center' });\n      await this.waitForTimeout(100); // 等待滚动完成\n      this.logger.debug('元素滚动到可视区域');\n    }\n  }\n\n  /**\n   * 获取元素边界框\n   */\n  async boundingBox(selector) {\n    const element = await this.waitForSelector(selector);\n    const rect = element.getBoundingClientRect();\n    \n    return {\n      x: rect.left + window.scrollX,\n      y: rect.top + window.scrollY,\n      width: rect.width,\n      height: rect.height\n    };\n  }\n\n  /**\n   * 设置视口大小（有限支持）\n   */\n  async setViewportSize(size) {\n    // 浏览器环境中无法直接设置视口大小\n    // 这里只是记录日志\n    this.logger.warn('浏览器环境中无法设置视口大小');\n    return { width: window.innerWidth, height: window.innerHeight };\n  }\n\n  /**\n   * 获取视口大小\n   */\n  viewportSize() {\n    return { width: window.innerWidth, height: window.innerHeight };\n  }\n}\n\n// 导出给浏览器使用\nif (typeof window !== 'undefined') {\n  window.PlaywrightPageAdapter = PageAdapter;\n}\n\n// Node.js 环境\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = PageAdapter;\n}\n\n// ES6 模块导出\nexport default PageAdapter;","/**\n * Expect 适配器 - 实现 Playwright Expect API\n */\nclass ExpectAdapter {\n  constructor(target, options = {}) {\n    this.target = target;\n    this.isNot = false;\n    this.timeout = options.timeout || 5000;\n    this.logger = new (window.PlaywrightLogger || console)();\n  }\n\n  /**\n   * 取反\n   */\n  get not() {\n    const newExpect = new ExpectAdapter(this.target, { timeout: this.timeout });\n    newExpect.isNot = !this.isNot;\n    return newExpect;\n  }\n\n  // =============== 可见性断言 ===============\n\n  /**\n   * 断言元素可见\n   */\n  async toBeVisible(options = {}) {\n    const timeout = options.timeout || this.timeout;\n    const expected = !this.isNot;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const isVisible = await this.target.isVisible();\n          return isVisible === expected;\n        },\n        timeout,\n        `期望元素${expected ? '可见' : '不可见'}`\n      );\n      \n      this.logger.debug(`✅ 元素${expected ? '可见' : '不可见'}断言通过`);\n    } catch (error) {\n      const actualVisible = await this.target.isVisible();\n      throw new Error(`期望元素${expected ? '可见' : '不可见'}，但实际${actualVisible ? '可见' : '不可见'}`);\n    }\n  }\n\n  /**\n   * 断言元素隐藏\n   */\n  async toBeHidden(options = {}) {\n    const timeout = options.timeout || this.timeout;\n    const expected = !this.isNot; // Hidden means NOT visible\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const isVisible = await this.target.isVisible();\n          return isVisible !== expected; // Element should NOT be visible when expected to be hidden\n        },\n        timeout,\n        `期望元素${expected ? '隐藏' : '可见'}`\n      );\n      \n      this.logger.debug(`✅ 元素${expected ? '隐藏' : '可见'}断言通过`);\n    } catch (error) {\n      const actualVisible = await this.target.isVisible();\n      throw new Error(`期望元素${expected ? '隐藏' : '可见'}，但实际${actualVisible ? '可见' : '隐藏'}`);\n    }\n  }\n\n  // =============== 状态断言 ===============\n\n  /**\n   * 断言元素启用\n   */\n  async toBeEnabled(options = {}) {\n    const timeout = options.timeout || this.timeout;\n    const expected = !this.isNot;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const isEnabled = await this.target.isEnabled();\n          return isEnabled === expected;\n        },\n        timeout,\n        `期望元素${expected ? '启用' : '禁用'}`\n      );\n      \n      this.logger.debug(`✅ 元素${expected ? '启用' : '禁用'}断言通过`);\n    } catch (error) {\n      const actualEnabled = await this.target.isEnabled();\n      throw new Error(`期望元素${expected ? '启用' : '禁用'}，但实际${actualEnabled ? '启用' : '禁用'}`);\n    }\n  }\n\n  /**\n   * 断言元素禁用\n   */\n  async toBeDisabled(options = {}) {\n    const timeout = options.timeout || this.timeout;\n    const expected = this.isNot;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const isEnabled = await this.target.isEnabled();\n          return isEnabled === expected;\n        },\n        timeout,\n        `期望元素${expected ? '启用' : '禁用'}`\n      );\n      \n      this.logger.debug(`✅ 元素${expected ? '启用' : '禁用'}断言通过`);\n    } catch (error) {\n      const actualEnabled = await this.target.isEnabled();\n      throw new Error(`期望元素${expected ? '启用' : '禁用'}，但实际${actualEnabled ? '启用' : '禁用'}`);\n    }\n  }\n\n  /**\n   * 断言复选框选中\n   */\n  async toBeChecked(options = {}) {\n    const timeout = options.timeout || this.timeout;\n    const expected = !this.isNot;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const isChecked = await this.target.isChecked();\n          return isChecked === expected;\n        },\n        timeout,\n        `期望元素${expected ? '选中' : '未选中'}`\n      );\n      \n      this.logger.debug(`✅ 元素${expected ? '选中' : '未选中'}断言通过`);\n    } catch (error) {\n      const actualChecked = await this.target.isChecked();\n      throw new Error(`期望元素${expected ? '选中' : '未选中'}，但实际${actualChecked ? '选中' : '未选中'}`);\n    }\n  }\n\n  // =============== 内容断言 ===============\n\n  /**\n   * 断言包含文本\n   */\n  async toHaveText(expectedText, options = {}) {\n    const timeout = options.timeout || this.timeout;\n    const useInnerText = options.useInnerText || false;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const actualText = useInnerText \n            ? await this.target.innerText()\n            : await this.target.textContent();\n          \n          let matches;\n          if (Array.isArray(expectedText)) {\n            matches = expectedText.every(text => actualText.includes(text));\n          } else if (expectedText instanceof RegExp) {\n            matches = expectedText.test(actualText);\n          } else {\n            matches = actualText.includes(expectedText);\n          }\n          \n          return this.isNot ? !matches : matches;\n        },\n        timeout,\n        `期望文本${this.isNot ? '不' : ''}包含 \"${expectedText}\"`\n      );\n      \n      this.logger.debug(`✅ 文本${this.isNot ? '不' : ''}包含断言通过`);\n    } catch (error) {\n      const actualText = useInnerText \n        ? await this.target.innerText()\n        : await this.target.textContent();\n      throw new Error(`期望文本${this.isNot ? '不' : ''}包含 \"${expectedText}\"，但实际文本为 \"${actualText}\"`);\n    }\n  }\n\n  /**\n   * 断言确切文本\n   */\n  async toHaveExactText(expectedText, options = {}) {\n    const timeout = options.timeout || this.timeout;\n    const useInnerText = options.useInnerText || false;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const actualText = useInnerText \n            ? await this.target.innerText()\n            : await this.target.textContent();\n          \n          const matches = actualText.trim() === expectedText.trim();\n          return this.isNot ? !matches : matches;\n        },\n        timeout,\n        `期望文本${this.isNot ? '不' : ''}完全匹配 \"${expectedText}\"`\n      );\n      \n      this.logger.debug(`✅ 确切文本${this.isNot ? '不' : ''}匹配断言通过`);\n    } catch (error) {\n      const actualText = useInnerText \n        ? await this.target.innerText()\n        : await this.target.textContent();\n      throw new Error(`期望文本${this.isNot ? '不' : ''}完全匹配 \"${expectedText}\"，但实际文本为 \"${actualText}\"`);\n    }\n  }\n\n  /**\n   * 断言包含文本（部分）\n   */\n  async toContainText(expectedText, options = {}) {\n    return this.toHaveText(expectedText, options);\n  }\n\n  // =============== 属性断言 ===============\n\n  /**\n   * 断言有属性\n   */\n  async toHaveAttribute(name, value, options = {}) {\n    const timeout = options.timeout || this.timeout;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const actualValue = await this.target.getAttribute(name);\n          \n          let matches;\n          if (value === undefined) {\n            matches = actualValue !== null;\n          } else if (value instanceof RegExp) {\n            matches = value.test(actualValue || '');\n          } else {\n            matches = actualValue === value;\n          }\n          \n          return this.isNot ? !matches : matches;\n        },\n        timeout,\n        `期望${this.isNot ? '不' : ''}有属性 \"${name}\"`\n      );\n      \n      this.logger.debug(`✅ 属性${this.isNot ? '不' : ''}存在断言通过`);\n    } catch (error) {\n      const actualValue = await this.target.getAttribute(name);\n      throw new Error(`期望${this.isNot ? '不' : ''}有属性 \"${name}\"${value !== undefined ? ` = \"${value}\"` : ''}，但实际值为 \"${actualValue}\"`);\n    }\n  }\n\n  /**\n   * 断言有值\n   */\n  async toHaveValue(expectedValue, options = {}) {\n    const timeout = options.timeout || this.timeout;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const actualValue = await this.target.inputValue();\n          \n          let matches;\n          if (expectedValue instanceof RegExp) {\n            matches = expectedValue.test(actualValue);\n          } else {\n            matches = actualValue === expectedValue;\n          }\n          \n          return this.isNot ? !matches : matches;\n        },\n        timeout,\n        `期望值${this.isNot ? '不' : ''}为 \"${expectedValue}\"`\n      );\n      \n      this.logger.debug(`✅ 值${this.isNot ? '不' : ''}匹配断言通过`);\n    } catch (error) {\n      const actualValue = await this.target.inputValue();\n      throw new Error(`期望值${this.isNot ? '不' : ''}为 \"${expectedValue}\"，但实际值为 \"${actualValue}\"`);\n    }\n  }\n\n  /**\n   * 断言有类名\n   */\n  async toHaveClass(expectedClass, options = {}) {\n    const timeout = options.timeout || this.timeout;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const classAttr = await this.target.getAttribute('class');\n          const classes = classAttr ? classAttr.split(' ') : [];\n          \n          let matches;\n          if (Array.isArray(expectedClass)) {\n            matches = expectedClass.every(cls => classes.includes(cls));\n          } else if (expectedClass instanceof RegExp) {\n            matches = expectedClass.test(classAttr || '');\n          } else {\n            matches = classes.includes(expectedClass);\n          }\n          \n          return this.isNot ? !matches : matches;\n        },\n        timeout,\n        `期望${this.isNot ? '不' : ''}有类名 \"${expectedClass}\"`\n      );\n      \n      this.logger.debug(`✅ 类名${this.isNot ? '不' : ''}存在断言通过`);\n    } catch (error) {\n      const classAttr = await this.target.getAttribute('class');\n      throw new Error(`期望${this.isNot ? '不' : ''}有类名 \"${expectedClass}\"，但实际类名为 \"${classAttr}\"`);\n    }\n  }\n\n  /**\n   * 断言有 ID\n   */\n  async toHaveId(expectedId, options = {}) {\n    return this.toHaveAttribute('id', expectedId, options);\n  }\n\n  // =============== 数量断言 ===============\n\n  /**\n   * 断言数量\n   */\n  async toHaveCount(expectedCount, options = {}) {\n    const timeout = options.timeout || this.timeout;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const actualCount = await this.target.count();\n          const matches = actualCount === expectedCount;\n          return this.isNot ? !matches : matches;\n        },\n        timeout,\n        `期望数量${this.isNot ? '不' : ''}为 ${expectedCount}`\n      );\n      \n      this.logger.debug(`✅ 数量${this.isNot ? '不' : ''}匹配断言通过`);\n    } catch (error) {\n      const actualCount = await this.target.count();\n      throw new Error(`期望数量${this.isNot ? '不' : ''}为 ${expectedCount}，但实际数量为 ${actualCount}`);\n    }\n  }\n\n  // =============== URL 断言 ===============\n\n  /**\n   * 断言 URL\n   */\n  async toHaveURL(expectedUrl, options = {}) {\n    const timeout = options.timeout || this.timeout;\n    \n    try {\n      await this.waitForCondition(\n        () => {\n          const currentUrl = window.location.href;\n          \n          let matches;\n          if (expectedUrl instanceof RegExp) {\n            matches = expectedUrl.test(currentUrl);\n          } else {\n            matches = currentUrl.includes(expectedUrl);\n          }\n          \n          return this.isNot ? !matches : matches;\n        },\n        timeout,\n        `期望 URL ${this.isNot ? '不' : ''}匹配 \"${expectedUrl}\"`\n      );\n      \n      this.logger.debug(`✅ URL ${this.isNot ? '不' : ''}匹配断言通过`);\n    } catch (error) {\n      const currentUrl = window.location.href;\n      throw new Error(`期望 URL ${this.isNot ? '不' : ''}匹配 \"${expectedUrl}\"，但当前 URL 为 \"${currentUrl}\"`);\n    }\n  }\n\n  /**\n   * 断言标题\n   */\n  async toHaveTitle(expectedTitle, options = {}) {\n    const timeout = options.timeout || this.timeout;\n    \n    try {\n      await this.waitForCondition(\n        () => {\n          const currentTitle = document.title;\n          \n          let matches;\n          if (expectedTitle instanceof RegExp) {\n            matches = expectedTitle.test(currentTitle);\n          } else {\n            matches = currentTitle.includes(expectedTitle);\n          }\n          \n          return this.isNot ? !matches : matches;\n        },\n        timeout,\n        `期望标题${this.isNot ? '不' : ''}匹配 \"${expectedTitle}\"`\n      );\n      \n      this.logger.debug(`✅ 标题${this.isNot ? '不' : ''}匹配断言通过`);\n    } catch (error) {\n      const currentTitle = document.title;\n      throw new Error(`期望标题${this.isNot ? '不' : ''}匹配 \"${expectedTitle}\"，但当前标题为 \"${currentTitle}\"`);\n    }\n  }\n\n  // =============== 通用断言 ===============\n\n  /**\n   * 断言包含指定值（用于数组等）\n   */\n  toContain(expectedValue) {\n    try {\n      let contains;\n      \n      if (Array.isArray(this.target)) {\n        contains = this.target.includes(expectedValue);\n      } else if (typeof this.target === 'string') {\n        contains = this.target.includes(expectedValue);\n      } else {\n        throw new Error('toContain 只支持数组或字符串类型');\n      }\n      \n      const shouldContain = !this.isNot;\n      if (contains !== shouldContain) {\n        throw new Error(`期望${shouldContain ? '' : '不'}包含 \"${expectedValue}\"`);\n      }\n      \n      this.logger.debug(`✅ 包含${shouldContain ? '' : '不'}断言通过`);\n    } catch (error) {\n      throw new Error(`期望${this.isNot ? '不' : ''}包含 \"${expectedValue}\"，但目标值为 ${JSON.stringify(this.target)}`);\n    }\n  }\n\n  // =============== 辅助方法 ===============\n\n  /**\n   * 等待条件满足\n   */\n  async waitForCondition(conditionFn, timeout, description) {\n    const startTime = Date.now();\n    \n    const check = async () => {\n      try {\n        const result = await conditionFn();\n        if (result) {\n          return result;\n        }\n      } catch (error) {\n        // 继续等待\n      }\n\n      if (Date.now() - startTime >= timeout) {\n        throw new Error(`${description}超时 (${timeout}ms)`);\n      }\n\n      await new Promise(resolve => setTimeout(resolve, 100));\n      return check();\n    };\n\n    return check();\n  }\n}\n\n// 创建全局 expect 函数\nfunction createExpect() {\n  return function expect(target) {\n    return new ExpectAdapter(target);\n  };\n}\n\n// 导出给浏览器使用\nif (typeof window !== 'undefined') {\n  window.PlaywrightExpectAdapter = ExpectAdapter;\n  window.PlaywrightExpect = createExpect();\n}\n\n// Node.js 环境\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = { ExpectAdapter, createExpect };\n}\n\n// ES6 模块导出\nexport default ExpectAdapter;\nexport { createExpect };","/**\n * Playwright 运行时适配器\n * 模拟 @playwright/test 模块，让 Playwright 脚本能在浏览器中运行\n */\nclass PlaywrightRuntime {\n  constructor() {\n    this.logger = new (window.PlaywrightLogger || console)();\n    this.setupGlobalEnvironment();\n  }\n\n  /**\n   * 设置全局环境\n   */\n  setupGlobalEnvironment() {\n    // 模拟 @playwright/test 模块\n    window.PlaywrightTest = {\n      test: this.createTestFunction(),\n      expect: window.PlaywrightExpect || this.createExpectFunction()\n    };\n\n    // 设置模块系统\n    this.setupModuleSystem();\n    \n    this.logger.debug('Playwright 运行时环境初始化完成');\n  }\n\n  /**\n   * 创建 test 函数\n   */\n  createTestFunction() {\n    const self = this;\n    \n    // 主 test 函数\n    function test(name, testFn) {\n      return {\n        name,\n        fn: testFn,\n        run: async () => {\n          const page = new window.PlaywrightPageAdapter();\n          const context = { page };\n          const startTime = Date.now();\n\n          try {\n            self.logger.info(`🧪 开始测试: ${name}`);\n            \n            await testFn(context);\n            \n            const duration = Date.now() - startTime;\n            self.logger.success(`✅ 测试通过: ${name} (${duration}ms)`);\n            return { success: true, duration, name };\n          } catch (error) {\n            const duration = Date.now() - startTime;\n            self.logger.error(`❌ 测试失败: ${name} (${duration}ms)`, error);\n            return { success: false, error, duration, name };\n          }\n        }\n      };\n    }\n\n    // 添加 test 的静态方法\n    test.skip = (name, testFn) => {\n      self.logger.warn(`⏭️ 跳过测试: ${name}`);\n      return {\n        name,\n        fn: testFn,\n        skipped: true,\n        run: async () => ({ success: true, skipped: true, name })\n      };\n    };\n\n    test.only = (name, testFn) => {\n      const testCase = test(name, testFn);\n      testCase.only = true;\n      return testCase;\n    };\n\n    test.describe = (name, suiteFn) => {\n      self.logger.info(`📁 测试套件: ${name}`);\n      return suiteFn();\n    };\n\n    test.beforeEach = (hookFn) => {\n      // 简单实现，存储钩子函数\n      test._beforeEachHooks = test._beforeEachHooks || [];\n      test._beforeEachHooks.push(hookFn);\n    };\n\n    test.afterEach = (hookFn) => {\n      test._afterEachHooks = test._afterEachHooks || [];\n      test._afterEachHooks.push(hookFn);\n    };\n\n    test.beforeAll = (hookFn) => {\n      test._beforeAllHooks = test._beforeAllHooks || [];\n      test._beforeAllHooks.push(hookFn);\n    };\n\n    test.afterAll = (hookFn) => {\n      test._afterAllHooks = test._afterAllHooks || [];\n      test._afterAllHooks.push(hookFn);\n    };\n\n    return test;\n  }\n\n  /**\n   * 创建 expect 函数\n   */\n  createExpectFunction() {\n    return function expect(target) {\n      return new (window.PlaywrightExpectAdapter || ExpectAdapter)(target);\n    };\n  }\n\n  /**\n   * 设置模块系统\n   */\n  setupModuleSystem() {\n    // 拦截 ES6 import\n    if (typeof window.importShim === 'undefined') {\n      window.importShim = {\n        '@playwright/test': window.PlaywrightTest\n      };\n    }\n  }\n\n  /**\n   * 直接执行 Playwright 脚本\n   */\n  async executeScript(scriptContent) {\n    try {\n      // 转换 import 语句\n      const transformedScript = this.transformImports(scriptContent);\n      \n      // 在沙箱环境中执行\n      const testCases = await this.runInSandbox(transformedScript);\n      \n      // 执行所有测试\n      const results = await this.runTests(testCases);\n      \n      return results;\n    } catch (error) {\n      this.logger.error('脚本执行失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 转换 import 语句\n   */\n  transformImports(scriptContent) {\n    // 简单的字符串替换，将 import 转换为我们的运行时\n    let transformed = scriptContent;\n    \n    // 匹配各种 import 形式\n    const importPatterns = [\n      // import { test, expect } from '@playwright/test';\n      /import\\s*{\\s*([^}]+)\\s*}\\s*from\\s*['\"]@playwright\\/test['\"];?/g,\n      // import { expect, test } from '@playwright/test';\n      /import\\s*{\\s*([^}]+)\\s*}\\s*from\\s*['\"]@playwright\\/test['\"];?/g,\n      // import * as pw from '@playwright/test';\n      /import\\s*\\*\\s*as\\s+(\\w+)\\s*from\\s*['\"]@playwright\\/test['\"];?/g\n    ];\n    \n    // 替换标准导入\n    transformed = transformed.replace(importPatterns[0], (match, imports) => {\n      const importItems = imports.split(',').map(item => item.trim());\n      const declarations = importItems.map(item => {\n        const cleanItem = item.replace(/\\s+as\\s+\\w+/, ''); // 移除 as 别名\n        return `${item} = window.PlaywrightTest.${cleanItem}`;\n      }).join(', ');\n      \n      return `const { ${declarations} } = window.PlaywrightTest;`;\n    });\n    \n    // 替换命名空间导入\n    transformed = transformed.replace(importPatterns[2], (match, namespace) => {\n      return `const ${namespace} = window.PlaywrightTest;`;\n    });\n    \n    // 简单替换（兜底）\n    transformed = transformed\n      .replace(/import\\s*{\\s*test,?\\s*expect\\s*}\\s*from\\s*['\"]@playwright\\/test['\"];?/g, \n               'const { test, expect } = window.PlaywrightTest;')\n      .replace(/import\\s*{\\s*expect,?\\s*test\\s*}\\s*from\\s*['\"]@playwright\\/test['\"];?/g, \n               'const { test, expect } = window.PlaywrightTest;');\n    \n    this.logger.debug('Import 语句转换完成');\n    return transformed;\n  }\n\n  /**\n   * 在沙箱环境中执行脚本\n   */\n  async runInSandbox(scriptContent) {\n    const testCases = [];\n    \n    // 重写 test 函数来收集测试用例\n    const originalTest = window.PlaywrightTest.test;\n    const self = this;\n    \n    window.PlaywrightTest.test = function(name, fn) {\n      const testCase = originalTest(name, fn);\n      testCases.push(testCase);\n      self.logger.debug(`收集测试用例: ${name}`);\n      return testCase;\n    };\n    \n    // 保持原有的静态方法\n    Object.keys(originalTest).forEach(key => {\n      if (typeof originalTest[key] === 'function') {\n        window.PlaywrightTest.test[key] = originalTest[key];\n      }\n    });\n\n    try {\n      // 执行脚本\n      const scriptFunction = new Function(scriptContent);\n      scriptFunction();\n      \n      this.logger.info(`收集到 ${testCases.length} 个测试用例`);\n    } catch (error) {\n      this.logger.error('脚本执行出错:', error);\n      throw error;\n    } finally {\n      // 恢复原始 test 函数\n      window.PlaywrightTest.test = originalTest;\n    }\n\n    return testCases;\n  }\n\n  /**\n   * 运行测试\n   */\n  async runTests(testCases) {\n    const results = [];\n    const onlyTests = testCases.filter(test => test.only);\n    const testsToRun = onlyTests.length > 0 ? onlyTests : testCases.filter(test => !test.skipped);\n    \n    this.logger.info(`开始执行 ${testsToRun.length} 个测试`);\n    \n    // 执行 beforeAll 钩子\n    await this.runHooks('_beforeAllHooks');\n    \n    for (const testCase of testsToRun) {\n      try {\n        // 执行 beforeEach 钩子\n        await this.runHooks('_beforeEachHooks', testCase);\n        \n        // 执行测试\n        const result = await testCase.run();\n        results.push(result);\n        \n        // 执行 afterEach 钩子\n        await this.runHooks('_afterEachHooks', testCase);\n        \n      } catch (error) {\n        this.logger.error(`测试执行异常: ${testCase.name}`, error);\n        results.push({ \n          success: false, \n          error, \n          name: testCase.name,\n          duration: 0 \n        });\n      }\n    }\n    \n    // 执行 afterAll 钩子\n    await this.runHooks('_afterAllHooks');\n    \n    // 输出测试总结\n    this.printTestSummary(results);\n    \n    return results;\n  }\n\n  /**\n   * 运行钩子函数\n   */\n  async runHooks(hookType, testCase = null) {\n    const test = window.PlaywrightTest.test;\n    const hooks = test[hookType] || [];\n    \n    for (const hook of hooks) {\n      try {\n        if (testCase) {\n          const page = new window.PlaywrightPageAdapter();\n          await hook({ page });\n        } else {\n          await hook();\n        }\n      } catch (error) {\n        this.logger.error(`钩子函数执行失败 (${hookType}):`, error);\n      }\n    }\n  }\n\n  /**\n   * 打印测试总结\n   */\n  printTestSummary(results) {\n    const passed = results.filter(r => r.success).length;\n    const failed = results.filter(r => !r.success).length;\n    const skipped = results.filter(r => r.skipped).length;\n    const totalDuration = results.reduce((sum, r) => sum + (r.duration || 0), 0);\n    \n    this.logger.info(`\n📊 测试总结:\n   ✅ 通过: ${passed}\n   ❌ 失败: ${failed}\n   ⏭️ 跳过: ${skipped}\n   ⏱️ 总耗时: ${totalDuration}ms\n    `);\n    \n    if (failed > 0) {\n      this.logger.error('失败的测试:');\n      results.filter(r => !r.success).forEach(r => {\n        this.logger.error(`  - ${r.name}: ${r.error?.message}`);\n      });\n    }\n  }\n}\n\n// 导出给浏览器使用\nif (typeof window !== 'undefined') {\n  window.PlaywrightRuntime = PlaywrightRuntime;\n}\n\n// Node.js 环境\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = PlaywrightRuntime;\n}\n\n// ES6 模块导出\nexport default PlaywrightRuntime;","/**\n * 测试运行器\n * 提供加载和运行 Playwright 脚本的接口\n */\nclass TestRunner {\n  constructor(options = {}) {\n    this.runtime = new (window.PlaywrightRuntime || PlaywrightRuntime)();\n    this.logger = new (window.PlaywrightLogger || console)();\n    this.options = {\n      timeout: 30000,\n      retries: 0,\n      ...options\n    };\n  }\n\n  /**\n   * 从文件加载并执行脚本\n   */\n  async loadAndRun(scriptPath) {\n    try {\n      this.logger.info(`📂 加载脚本: ${scriptPath}`);\n      const response = await fetch(scriptPath);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      \n      const scriptContent = await response.text();\n      return await this.runScript(scriptContent, scriptPath);\n    } catch (error) {\n      this.logger.error(`脚本加载失败: ${scriptPath}`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * 直接执行脚本字符串\n   */\n  async runScript(scriptContent, scriptName = 'inline-script') {\n    try {\n      this.logger.info(`🚀 执行脚本: ${scriptName}`);\n      const startTime = Date.now();\n      \n      const results = await this.runtime.executeScript(scriptContent);\n      \n      const duration = Date.now() - startTime;\n      this.logger.success(`✅ 脚本执行完成: ${scriptName} (${duration}ms)`);\n      \n      return {\n        scriptName,\n        duration,\n        results,\n        success: results.every(r => r.success || r.skipped)\n      };\n    } catch (error) {\n      this.logger.error(`脚本执行失败: ${scriptName}`, error);\n      return {\n        scriptName,\n        duration: 0,\n        results: [],\n        success: false,\n        error\n      };\n    }\n  }\n\n  /**\n   * 执行多个脚本文件\n   */\n  async runScripts(scriptPaths) {\n    const allResults = [];\n    \n    this.logger.info(`📦 批量执行 ${scriptPaths.length} 个脚本`);\n    \n    for (const path of scriptPaths) {\n      try {\n        const result = await this.loadAndRun(path);\n        allResults.push(result);\n      } catch (error) {\n        allResults.push({\n          scriptName: path,\n          duration: 0,\n          results: [],\n          success: false,\n          error\n        });\n      }\n    }\n    \n    // 输出批量执行总结\n    this.printBatchSummary(allResults);\n    \n    return allResults;\n  }\n\n  /**\n   * 从目录批量加载脚本\n   */\n  async runScriptsFromPattern(pattern) {\n    // 浏览器环境中无法直接读取文件系统\n    // 这里提供一个基础实现，需要服务器支持\n    this.logger.warn('浏览器环境中无法直接扫描文件系统，请使用 runScripts() 方法');\n    throw new Error('浏览器环境不支持文件系统扫描');\n  }\n\n  /**\n   * 设置全局钩子\n   */\n  setGlobalHooks(hooks) {\n    const { beforeAll, afterAll, beforeEach, afterEach } = hooks;\n    const test = window.PlaywrightTest.test;\n    \n    if (beforeAll) test.beforeAll(beforeAll);\n    if (afterAll) test.afterAll(afterAll);\n    if (beforeEach) test.beforeEach(beforeEach);\n    if (afterEach) test.afterEach(afterEach);\n    \n    this.logger.debug('全局钩子设置完成');\n  }\n\n  /**\n   * 设置全局配置\n   */\n  configure(config) {\n    this.options = { ...this.options, ...config };\n    this.logger.debug('测试配置更新:', this.options);\n  }\n\n  /**\n   * 打印批量执行总结\n   */\n  printBatchSummary(results) {\n    const totalScripts = results.length;\n    const successfulScripts = results.filter(r => r.success).length;\n    const failedScripts = results.filter(r => !r.success).length;\n    \n    const totalTests = results.reduce((sum, r) => sum + r.results.length, 0);\n    const passedTests = results.reduce((sum, r) => \n      sum + r.results.filter(test => test.success).length, 0\n    );\n    const failedTests = results.reduce((sum, r) => \n      sum + r.results.filter(test => !test.success && !test.skipped).length, 0\n    );\n    const skippedTests = results.reduce((sum, r) => \n      sum + r.results.filter(test => test.skipped).length, 0\n    );\n    \n    const totalDuration = results.reduce((sum, r) => sum + r.duration, 0);\n    \n    this.logger.info(`\n🎯 批量执行总结:\n📄 脚本统计:\n   ✅ 成功: ${successfulScripts}/${totalScripts}\n   ❌ 失败: ${failedScripts}/${totalScripts}\n\n🧪 测试统计:\n   ✅ 通过: ${passedTests}\n   ❌ 失败: ${failedTests}\n   ⏭️ 跳过: ${skippedTests}\n   📊 总计: ${totalTests}\n\n⏱️ 总耗时: ${totalDuration}ms\n    `);\n    \n    if (failedScripts > 0) {\n      this.logger.error('失败的脚本:');\n      results.filter(r => !r.success).forEach(r => {\n        this.logger.error(`  - ${r.scriptName}: ${r.error?.message || '未知错误'}`);\n      });\n    }\n  }\n\n  /**\n   * 获取执行统计\n   */\n  getStats(results) {\n    if (Array.isArray(results) && results[0]?.results) {\n      // 批量执行结果\n      return {\n        scripts: {\n          total: results.length,\n          passed: results.filter(r => r.success).length,\n          failed: results.filter(r => !r.success).length\n        },\n        tests: {\n          total: results.reduce((sum, r) => sum + r.results.length, 0),\n          passed: results.reduce((sum, r) => \n            sum + r.results.filter(test => test.success).length, 0\n          ),\n          failed: results.reduce((sum, r) => \n            sum + r.results.filter(test => !test.success && !test.skipped).length, 0\n          ),\n          skipped: results.reduce((sum, r) => \n            sum + r.results.filter(test => test.skipped).length, 0\n          )\n        },\n        duration: results.reduce((sum, r) => sum + r.duration, 0)\n      };\n    } else {\n      // 单个脚本执行结果\n      return {\n        tests: {\n          total: results.results?.length || 0,\n          passed: results.results?.filter(test => test.success).length || 0,\n          failed: results.results?.filter(test => !test.success && !test.skipped).length || 0,\n          skipped: results.results?.filter(test => test.skipped).length || 0\n        },\n        duration: results.duration || 0\n      };\n    }\n  }\n\n  /**\n   * 清理资源\n   */\n  cleanup() {\n    // 清理全局钩子\n    const test = window.PlaywrightTest.test;\n    test._beforeAllHooks = [];\n    test._afterAllHooks = [];\n    test._beforeEachHooks = [];\n    test._afterEachHooks = [];\n    \n    this.logger.debug('测试运行器清理完成');\n  }\n}\n\n// 导出给浏览器使用\nif (typeof window !== 'undefined') {\n  window.PlaywrightTestRunner = TestRunner;\n}\n\n// Node.js 环境\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = TestRunner;\n}\n\n// ES6 模块导出\nexport default TestRunner;","/**\n * Playwright 执行引擎主入口文件\n * 将所有组件组合并导出统一的 API\n */\n\n// 导入所有依赖模块\nimport PlaywrightLogger from './utils/logger.js';\nimport PlaywrightWaitManager from './dom/wait-manager.js';\nimport PlaywrightEventSimulator from './dom/event-simulator.js';\nimport PlaywrightLocatorAdapter from './adapters/locator-adapter.js';\nimport PlaywrightPageAdapter from './adapters/page-adapter.js';\nimport PlaywrightExpectAdapter, { createExpect } from './adapters/expect-adapter.js';\nimport PlaywrightRuntime from './runtime/playwright-runtime.js';\nimport PlaywrightTestRunner from './runtime/test-runner.js';\n\n// 确保所有依赖都已加载\nfunction ensureDependencies() {\n  const dependencies = {\n    PlaywrightLogger,\n    PlaywrightWaitManager, \n    PlaywrightEventSimulator,\n    PlaywrightLocatorAdapter,\n    PlaywrightPageAdapter,\n    PlaywrightExpectAdapter,\n    createExpect,\n    PlaywrightRuntime,\n    PlaywrightTestRunner\n  };\n  \n  const missing = Object.entries(dependencies)\n    .filter(([name, component]) => !component)\n    .map(([name]) => name);\n  \n  if (missing.length > 0) {\n    console.warn('缺少依赖:', missing);\n  }\n}\n\n/**\n * Playwright 执行引擎主类\n */\nclass PlaywrightExecutionEngine {\n  constructor(options = {}) {\n    ensureDependencies();\n    \n    this.options = {\n      logLevel: 'info',\n      timeout: 30000,\n      ...options\n    };\n    \n    // 初始化组件\n    this.logger = new PlaywrightLogger(this.options.logLevel);\n    this.runtime = new PlaywrightRuntime();\n    this.testRunner = new PlaywrightTestRunner(this.options);\n    \n    this.logger.info('Playwright 执行引擎初始化完成');\n  }\n\n  /**\n   * 执行脚本字符串\n   */\n  async runScript(scriptContent, scriptName = 'inline') {\n    return await this.testRunner.runScript(scriptContent, scriptName);\n  }\n\n  /**\n   * 加载并执行脚本文件\n   */\n  async loadAndRun(scriptPath) {\n    return await this.testRunner.loadAndRun(scriptPath);\n  }\n\n  /**\n   * 批量执行脚本文件\n   */\n  async runScripts(scriptPaths) {\n    return await this.testRunner.runScripts(scriptPaths);\n  }\n\n  /**\n   * 创建新的 Page 实例\n   */\n  createPage() {\n    return new PlaywrightPageAdapter();\n  }\n\n  /**\n   * 获取 Page 实例（createPage 的别名）\n   */\n  getPage() {\n    return this.createPage();\n  }\n\n  /**\n   * 创建 expect 实例\n   */\n  expect(target) {\n    return createExpect()(target);\n  }\n\n  /**\n   * 设置全局配置\n   */\n  configure(config) {\n    this.options = { ...this.options, ...config };\n    this.testRunner.configure(config);\n    return this;\n  }\n\n  /**\n   * 设置全局钩子\n   */\n  setHooks(hooks) {\n    this.testRunner.setGlobalHooks(hooks);\n    return this;\n  }\n\n  /**\n   * 获取执行统计\n   */\n  getStats(results) {\n    return this.testRunner.getStats(results);\n  }\n\n  /**\n   * 清理资源\n   */\n  cleanup() {\n    this.testRunner.cleanup();\n  }\n\n  /**\n   * 获取版本信息\n   */\n  static getVersion() {\n    return typeof __VERSION__ !== 'undefined' ? __VERSION__ : '1.0.0-beta';\n  }\n\n  /**\n   * 检查浏览器兼容性\n   */\n  static checkCompatibility() {\n    const features = {\n      'Promises': typeof Promise !== 'undefined',\n      'async/await': (async () => {})().constructor === Promise,\n      'Fetch API': typeof fetch !== 'undefined',\n      'MutationObserver': typeof MutationObserver !== 'undefined',\n      'querySelector': typeof document.querySelector !== 'undefined',\n      'addEventListener': typeof document.addEventListener !== 'undefined'\n    };\n    \n    const unsupported = Object.entries(features)\n      .filter(([feature, supported]) => !supported)\n      .map(([feature]) => feature);\n    \n    if (unsupported.length > 0) {\n      console.warn('浏览器不支持以下功能:', unsupported);\n      return false;\n    }\n    \n    return true;\n  }\n}\n\n// 静态工厂方法\nPlaywrightExecutionEngine.create = function(options) {\n  if (!PlaywrightExecutionEngine.checkCompatibility()) {\n    throw new Error('当前浏览器不支持 Playwright 执行引擎');\n  }\n  \n  return new PlaywrightExecutionEngine(options);\n};\n\n// 快捷方法\nPlaywrightExecutionEngine.run = async function(script, options = {}) {\n  const engine = PlaywrightExecutionEngine.create(options);\n  return await engine.runScript(script);\n};\n\nPlaywrightExecutionEngine.load = async function(scriptPath, options = {}) {\n  const engine = PlaywrightExecutionEngine.create(options);\n  return await engine.loadAndRun(scriptPath);\n};\n\n// 导出核心组件（供高级用户使用）\nPlaywrightExecutionEngine.Components = {\n  Logger: PlaywrightLogger,\n  WaitManager: PlaywrightWaitManager,\n  EventSimulator: PlaywrightEventSimulator,\n  PageAdapter: PlaywrightPageAdapter,\n  LocatorAdapter: PlaywrightLocatorAdapter,\n  ExpectAdapter: PlaywrightExpectAdapter,\n  Runtime: PlaywrightRuntime,\n  TestRunner: PlaywrightTestRunner\n};\n\n// 全局导出（仅在浏览器环境）\nif (typeof window !== 'undefined') {\n  window.PlaywrightExecutionEngine = PlaywrightExecutionEngine;\n  \n  // 兼容性别名\n  window.PWEngine = PlaywrightExecutionEngine;\n  \n  // 快捷全局方法\n  window.runPlaywrightScript = PlaywrightExecutionEngine.run;\n  window.loadPlaywrightScript = PlaywrightExecutionEngine.load;\n  \n  console.log('🎭 Playwright 执行引擎已加载完成');\n  console.log('版本:', PlaywrightExecutionEngine.getVersion());\n  console.log('使用方法: new PlaywrightExecutionEngine() 或 PlaywrightExecutionEngine.create()');\n}\n\n// ES6 模块默认导出\nexport default PlaywrightExecutionEngine;\n\n// 命名导出\nexport {\n  PlaywrightLogger,\n  PlaywrightWaitManager,\n  PlaywrightEventSimulator,\n  PlaywrightLocatorAdapter,\n  PlaywrightPageAdapter,\n  PlaywrightExpectAdapter,\n  createExpect,\n  PlaywrightRuntime,\n  PlaywrightTestRunner\n};"],"names":["Logger","constructor","level","this","levels","debug","info","warn","error","message","args","console","success","log","window","PlaywrightLogger","module","exports","WaitManager","defaultTimeout","logger","querySelector","selector","startsWith","xpath","substring","document","evaluate","XPathResult","FIRST_ORDERED_NODE_TYPE","singleNodeValue","waitForElement","_0","__async","arguments","timeout","Promise","resolve","reject","startTime","Date","now","existing","timeoutId","observer","cleanup","disconnect","setTimeout","Error","MutationObserver","element","elapsed","observe","body","childList","subtree","attributes","waitForCondition","conditionFn","errorMessage","check","result","waitForFunction","fn","waitForURL","urlPattern","currentUrl","location","href","includes","RegExp","test","waitForLoadState","state","checkState","readyState","addEventListener","once","waitForTimeout","ms","PlaywrightWaitManager","EventSimulator","simulateClick","options","button","clickCount","delay","focus","forEach","eventType","index","event","MouseEvent","view","bubbles","cancelable","detail","dispatchEvent","simulateDoubleClick","dblClickEvent","simulateHover","simulateKeyPress","key","ctrlKey","shiftKey","altKey","metaKey","keydownEvent","KeyboardEvent","code","getKeyCode","tagName","handleNavigationKey","keypressEvent","keyupEvent","start","selectionStart","end","selectionEnd","value","setSelectionRange","length","newPos","Math","max","min","slice","Event","simulateTyping","_1","text","i","char","currentValue","newValue","newCursorPos","simulateFormChange","type","checked","Enter","Escape","Tab","Backspace","Delete","Home","End","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","scrollIntoView","behavior","block","PlaywrightEventSimulator","LocatorAdapter","page","filters","waitManager","eventSimulator","filter","newLocator","first","nth","last","position","n","locator","combinedSelector","combineSelectorWithParent","childSelector","childXpath","cssSelectorToXPath","cssSelector","endsWith","attrMatch","match","attrExistsMatch","getByText","hasText","exact","click","getElement","scrollIntoViewIfNeeded","dblclick","fill","press","pressSequentially","hover","uncheck","selectOption","values","Array","isArray","from","option","selected","isVisible","rect","getBoundingClientRect","style","getComputedStyle","width","height","visibility","display","offsetParent","e","isHidden","isEnabled","disabled","hasAttribute","isDisabled","isChecked","textContent","innerText","innerHTML","getAttribute","name","inputValue","waitFor","waitForVisible","waitForHidden","waitForAttached","waitForDetached","count","queryElements","ORDERED_NODE_SNAPSHOT_TYPE","elements","snapshotLength","push","snapshotItem","querySelectorAll","applyFilters","all","map","buildUniqueSelector","_element","contains","filteredElements","filtered","applyFilter","el","hasNotText","id","path","current","toLowerCase","className","classes","split","c","trim","join","siblings","_a","parentNode","children","sibling","indexOf","unshift","parentElement","PlaywrightLocatorAdapter","PageAdapter","goto","url","waitUntil","status","goBack","history","back","goForward","forward","reload","title","content","documentElement","outerHTML","waitForSelector","LocatorAdapterClass","getByRole","role","baseSelector","implicitRoles","link","textbox","combobox","checkbox","radio","heading","xpathParts","tag","attrPart","attr","replace","attrName","attrValue","cleanAttrName","cleanAttrValue","part","getByLabel","getByPlaceholder","getByTestId","testId","getByTitle","waitForXPath","actualSelector","requiredState","arg","apply","evaluateHandle","addScriptTag","script","createElement","src","head","appendChild","onload","onerror","addStyleTag","rel","top","bottom","innerHeight","left","right","innerWidth","boundingBox","x","scrollX","y","scrollY","setViewportSize","size","viewportSize","PlaywrightPageAdapter","ExpectAdapter$1","ExpectAdapter","target","isNot","not","newExpect","toBeVisible","expected","actualVisible","toBeHidden","toBeEnabled","actualEnabled","toBeDisabled","toBeChecked","actualChecked","toHaveText","expectedText","useInnerText","actualText","matches","every","toHaveExactText","toContainText","toHaveAttribute","actualValue","toHaveValue","expectedValue","toHaveClass","expectedClass","classAttr","cls","toHaveId","expectedId","toHaveCount","expectedCount","actualCount","toHaveURL","expectedUrl","toHaveTitle","expectedTitle","currentTitle","toContain","shouldContain","JSON","stringify","description","createExpect","PlaywrightExpectAdapter","PlaywrightExpect","PlaywrightRuntime$1","setupGlobalEnvironment","PlaywrightTest","createTestFunction","expect","createExpectFunction","setupModuleSystem","self","testFn","run","context","duration","skip","skipped","only","testCase","describe","suiteFn","beforeEach","hookFn","_beforeEachHooks","afterEach","_afterEachHooks","beforeAll","_beforeAllHooks","afterAll","_afterAllHooks","importShim","executeScript","scriptContent","transformedScript","transformImports","testCases","runInSandbox","runTests","transformed","importPatterns","imports","item","cleanItem","namespace","originalTest","Object","keys","Function","scriptFunction","results","onlyTests","testsToRun","runHooks","printTestSummary","hookType","hooks","hook","passed","r","failed","totalDuration","reduce","sum","PlaywrightRuntime","TestRunner","runtime","__spreadValues","retries","loadAndRun","scriptPath","response","fetch","ok","statusText","runScript","scriptName","runScripts","scriptPaths","allResults","printBatchSummary","runScriptsFromPattern","pattern","setGlobalHooks","configure","config","totalScripts","successfulScripts","failedScripts","totalTests","passedTests","failedTests","skippedTests","getStats","scripts","total","tests","_b","_c","_d","_e","PlaywrightTestRunner","PlaywrightExecutionEngine","dependencies","missing","entries","component","ensureDependencies","logLevel","testRunner","createPage","getPage","setHooks","getVersion","checkCompatibility","features","Promises","unsupported","feature","supported","create","engine","load","Components","Runtime","PWEngine","runPlaywrightScript","loadPlaywrightScript"],"mappings":"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"}