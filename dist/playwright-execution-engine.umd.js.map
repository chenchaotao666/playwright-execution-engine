{"version":3,"file":"playwright-execution-engine.umd.js","sources":["../src/utils/logger.ts","../src/dom/wait-manager.ts","../src/dom/event-simulator.ts","../src/adapters/locator-adapter.ts","../src/adapters/page-adapter.ts","../src/adapters/expect-adapter.ts","../src/runtime/playwright-runtime.ts","../src/runtime/test-runner.ts","../src/index.ts"],"sourcesContent":["export type LogLevel = 'debug' | 'info' | 'warn' | 'error';\n\ninterface LogLevels {\n  debug: number;\n  info: number;\n  warn: number;\n  error: number;\n}\n\ndeclare global {\n  interface Window {\n    PlaywrightLogger?: typeof Logger;\n  }\n}\n\nexport default class Logger {\n  private level: LogLevel;\n  private levels: LogLevels;\n\n  constructor(level: LogLevel = 'info') {\n    this.level = level;\n    this.levels = {\n      debug: 0,\n      info: 1,\n      warn: 2,\n      error: 3\n    };\n  }\n\n  debug(message: string, ...args: any[]): void {\n    if (this.levels[this.level] <= this.levels.debug) {\n      console.debug(`[DEBUG] ${message}`, ...args);\n    }\n  }\n\n  info(message: string, ...args: any[]): void {\n    if (this.levels[this.level] <= this.levels.info) {\n      console.info(`[INFO] ${message}`, ...args);\n    }\n  }\n\n  warn(message: string, ...args: any[]): void {\n    if (this.levels[this.level] <= this.levels.warn) {\n      console.warn(`[WARN] ${message}`, ...args);\n    }\n  }\n\n  error(message: string, ...args: any[]): void {\n    if (this.levels[this.level] <= this.levels.error) {\n      console.error(`[ERROR] ${message}`, ...args);\n    }\n  }\n\n  success(message: string, ...args: any[]): void {\n    if (this.levels[this.level] <= this.levels.info) {\n      console.log(`%c[SUCCESS] ${message}`, 'color: green', ...args);\n    }\n  }\n}\n\n// 导出给浏览器使用\nif (typeof window !== 'undefined') {\n  (window as any).PlaywrightLogger = Logger;\n}","import type { Logger } from '../../types/index.js';\n\n/**\n * 等待管理器 - 处理各种等待机制\n */\nclass WaitManager {\n  private readonly defaultTimeout: number;\n  private readonly logger: Logger;\n\n  constructor() {\n    this.defaultTimeout = 30000;\n    this.logger = new (window.PlaywrightLogger || console)() as Logger;\n  }\n\n  /**\n   * 查询单个元素（支持 CSS、XPath 和 text）\n   */\n  querySelector(selector: string): Element | null {\n    if (selector.startsWith('xpath=')) {\n      const xpath = selector.substring(6);\n      const result = document.evaluate(\n        xpath,\n        document,\n        null,\n        XPathResult.FIRST_ORDERED_NODE_TYPE,\n        null\n      );\n      return result.singleNodeValue as Element | null;\n    } else if (selector.startsWith('text=')) {\n      const text = selector.substring(5);\n      // 使用 XPath 查找包含指定文本的元素\n      const xpath = `//*[contains(normalize-space(text()), \"${text}\")]`;\n      const result = document.evaluate(\n        xpath,\n        document,\n        null,\n        XPathResult.FIRST_ORDERED_NODE_TYPE,\n        null\n      );\n      return result.singleNodeValue as Element | null;\n    } else {\n      return document.querySelector(selector);\n    }\n  }\n\n  /**\n   * 等待元素出现\n   */\n  async waitForElement(selector: string, timeout: number = this.defaultTimeout): Promise<Element> {\n    return new Promise((resolve, reject) => {\n      const startTime = Date.now();\n      \n      // 立即检查\n      const existing = this.querySelector(selector);\n      if (existing) {\n        this.logger.debug(`元素立即找到: ${selector}`);\n        return resolve(existing);\n      }\n\n      let timeoutId: NodeJS.Timeout | undefined;\n      let observer: MutationObserver | undefined;\n\n      const cleanup = (): void => {\n        if (timeoutId) clearTimeout(timeoutId);\n        if (observer) observer.disconnect();\n      };\n\n      // 设置超时\n      timeoutId = setTimeout(() => {\n        cleanup();\n        reject(new Error(`等待元素超时: ${selector} (${timeout}ms)`));\n      }, timeout);\n\n      // 监听 DOM 变化\n      observer = new MutationObserver(() => {\n        const element = this.querySelector(selector);\n        if (element) {\n          cleanup();\n          const elapsed = Date.now() - startTime;\n          this.logger.debug(`元素找到: ${selector} (${elapsed}ms)`);\n          resolve(element);\n        }\n      });\n\n      observer.observe(document.body, {\n        childList: true,\n        subtree: true,\n        attributes: true\n      });\n    });\n  }\n\n  /**\n   * 等待条件满足\n   */\n  async waitForCondition<T>(\n    conditionFn: () => T | Promise<T>, \n    timeout: number = this.defaultTimeout, \n    errorMessage: string = '等待条件超时'\n  ): Promise<T> {\n    return new Promise((resolve, reject) => {\n      const startTime = Date.now();\n      \n      const check = async (): Promise<void> => {\n        try {\n          const result = await conditionFn();\n          if (result) {\n            const elapsed = Date.now() - startTime;\n            this.logger.debug(`条件满足 (${elapsed}ms)`);\n            resolve(result);\n            return;\n          }\n        } catch (error) {\n          // 继续等待，忽略错误\n          this.logger.debug('条件检查出错，继续等待:', (error as Error).message);\n        }\n\n        if (Date.now() - startTime >= timeout) {\n          reject(new Error(`${errorMessage} (${timeout}ms)`));\n          return;\n        }\n\n        setTimeout(check, 100);\n      };\n\n      check();\n    });\n  }\n\n  /**\n   * 等待函数返回真值\n   */\n  async waitForFunction<T>(fn: () => T | Promise<T>, timeout: number = this.defaultTimeout): Promise<T> {\n    return this.waitForCondition(fn, timeout, '等待函数条件超时');\n  }\n\n  /**\n   * 等待 URL 变化\n   */\n  async waitForURL(urlPattern: string | RegExp, timeout: number = this.defaultTimeout): Promise<boolean> {\n    return this.waitForCondition(\n      () => {\n        const currentUrl = window.location.href;\n        if (typeof urlPattern === 'string') {\n          return currentUrl.includes(urlPattern);\n        }\n        if (urlPattern instanceof RegExp) {\n          return urlPattern.test(currentUrl);\n        }\n        return false;\n      },\n      timeout,\n      `等待URL变化超时: ${urlPattern}`\n    );\n  }\n\n  /**\n   * 等待页面加载状态\n   */\n  async waitForLoadState(state: 'load' | 'domcontentloaded' | 'networkidle' = 'load'): Promise<void> {\n    return new Promise((resolve) => {\n      const checkState = (): void => {\n        if (state === 'load' && document.readyState === 'complete') {\n          this.logger.debug('页面完全加载');\n          resolve();\n        } else if (state === 'domcontentloaded' && document.readyState !== 'loading') {\n          this.logger.debug('DOM 内容加载完成');\n          resolve();\n        } else if (state === 'networkidle') {\n          // 简单实现：等待 500ms 无网络请求\n          setTimeout(() => {\n            this.logger.debug('网络空闲');\n            resolve();\n          }, 500);\n        }\n      };\n\n      if (document.readyState === 'complete' && state === 'load') {\n        resolve();\n      } else if (document.readyState !== 'loading' && state === 'domcontentloaded') {\n        resolve();\n      } else {\n        document.addEventListener('readystatechange', checkState, { once: true });\n      }\n    });\n  }\n\n  /**\n   * 简单延时\n   */\n  async waitForTimeout(ms: number): Promise<void> {\n    this.logger.debug(`等待 ${ms}ms`);\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n}\n\n// 扩展 Window 接口\ndeclare global {\n  interface Window {\n    PlaywrightWaitManager?: typeof WaitManager;\n  }\n}\n\n// 导出给浏览器使用\nif (typeof window !== 'undefined') {\n  window.PlaywrightWaitManager = WaitManager;\n}\n\n// Node.js 环境\ndeclare const module: any;\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = WaitManager;\n}\n\n// ES6 模块导出\nexport default WaitManager;","import type { ClickOptions, KeyboardOptions, Logger } from '../../types/index.js';\n\n/**\n * 事件模拟器 - 模拟各种用户交互事件\n */\nclass EventSimulator {\n  private readonly logger: Logger;\n\n  constructor() {\n    this.logger = new (window.PlaywrightLogger || console)() as Logger;\n  }\n\n  /**\n   * 模拟点击事件\n   */\n  simulateClick(element: HTMLElement, options: ClickOptions = {}): void {\n    const { button = 0, clickCount = 1, delay = 0 } = options;\n    \n    // 确保元素获得焦点\n    element.focus();\n\n    // 触发完整的鼠标事件序列\n    const mouseEvents: Array<keyof HTMLElementEventMap> = ['mousedown', 'mouseup', 'click'];\n    \n    mouseEvents.forEach((eventType, index) => {\n      setTimeout(() => {\n        const event = new MouseEvent(eventType, {\n          view: window,\n          bubbles: true,\n          cancelable: true,\n          button: button,\n          detail: clickCount\n        });\n        \n        element.dispatchEvent(event);\n        this.logger.debug(`触发 ${eventType} 事件`);\n      }, delay * index);\n    });\n  }\n\n  /**\n   * 模拟双击事件\n   */\n  simulateDoubleClick(element: HTMLElement): void {\n    this.simulateClick(element, { clickCount: 1 });\n    \n    setTimeout(() => {\n      const dblClickEvent = new MouseEvent('dblclick', {\n        view: window,\n        bubbles: true,\n        cancelable: true,\n        detail: 2\n      });\n      element.dispatchEvent(dblClickEvent);\n      this.logger.debug('触发 dblclick 事件');\n    }, 100);\n  }\n\n  /**\n   * 模拟悬停事件\n   */\n  simulateHover(element: HTMLElement): void {\n    const events: Array<keyof HTMLElementEventMap> = ['mouseover', 'mouseenter'];\n    \n    events.forEach(eventType => {\n      const event = new MouseEvent(eventType, {\n        view: window,\n        bubbles: true,\n        cancelable: true\n      });\n      element.dispatchEvent(event);\n      this.logger.debug(`触发 ${eventType} 事件`);\n    });\n  }\n\n  /**\n   * 模拟键盘事件\n   */\n  simulateKeyPress(element: HTMLElement, key: string, options: KeyboardOptions = {}): void {\n    const { ctrlKey = false, shiftKey = false, altKey = false, metaKey = false } = options;\n    \n    element.focus();\n    \n    // 首先触发 keydown 事件\n    const keydownEvent = new KeyboardEvent('keydown', {\n      key: key,\n      code: this.getKeyCode(key),\n      bubbles: true,\n      cancelable: true,\n      ctrlKey,\n      shiftKey,\n      altKey,\n      metaKey\n    });\n    \n    element.dispatchEvent(keydownEvent);\n    \n    // 处理特殊导航键的实际行为\n    if (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA') {\n      this.handleNavigationKey(element as HTMLInputElement | HTMLTextAreaElement, key);\n    }\n    \n    // 触发 keypress 事件 (某些键不触发 keypress)\n    if (!['Home', 'End', 'ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown', 'Backspace', 'Delete'].includes(key)) {\n      const keypressEvent = new KeyboardEvent('keypress', {\n        key: key,\n        code: this.getKeyCode(key),\n        bubbles: true,\n        cancelable: true,\n        ctrlKey,\n        shiftKey,\n        altKey,\n        metaKey\n      });\n      element.dispatchEvent(keypressEvent);\n    }\n    \n    // 触发 keyup 事件\n    const keyupEvent = new KeyboardEvent('keyup', {\n      key: key,\n      code: this.getKeyCode(key),\n      bubbles: true,\n      cancelable: true,\n      ctrlKey,\n      shiftKey,\n      altKey,\n      metaKey\n    });\n    \n    element.dispatchEvent(keyupEvent);\n    this.logger.debug(`触发键盘事件: ${key}`);\n  }\n\n  /**\n   * 处理导航键的实际行为\n   */\n  private handleNavigationKey(element: HTMLInputElement | HTMLTextAreaElement, key: string): void {\n    const start = element.selectionStart || 0;\n    const end = element.selectionEnd || 0;\n    const value = element.value || '';\n    \n    switch (key) {\n      case 'Home':\n        element.setSelectionRange(0, 0);\n        break;\n        \n      case 'End':\n        element.setSelectionRange(value.length, value.length);\n        break;\n        \n      case 'ArrowLeft':\n        if (start > 0) {\n          const newPos = Math.max(0, start - 1);\n          element.setSelectionRange(newPos, newPos);\n        }\n        break;\n        \n      case 'ArrowRight':\n        if (start < value.length) {\n          const newPos = Math.min(value.length, start + 1);\n          element.setSelectionRange(newPos, newPos);\n        }\n        break;\n        \n      case 'Backspace':\n        if (start === end && start > 0) {\n          // 删除光标前的字符\n          element.value = value.slice(0, start - 1) + value.slice(end);\n          element.setSelectionRange(start - 1, start - 1);\n          element.dispatchEvent(new Event('input', { bubbles: true }));\n        } else if (start !== end) {\n          // 删除选中文本\n          element.value = value.slice(0, start) + value.slice(end);\n          element.setSelectionRange(start, start);\n          element.dispatchEvent(new Event('input', { bubbles: true }));\n        }\n        break;\n        \n      case 'Delete':\n        if (start === end && start < value.length) {\n          // 删除光标后的字符\n          element.value = value.slice(0, start) + value.slice(end + 1);\n          element.setSelectionRange(start, start);\n          element.dispatchEvent(new Event('input', { bubbles: true }));\n        } else if (start !== end) {\n          // 删除选中文本\n          element.value = value.slice(0, start) + value.slice(end);\n          element.setSelectionRange(start, start);\n          element.dispatchEvent(new Event('input', { bubbles: true }));\n        }\n        break;\n    }\n  }\n\n  /**\n   * 模拟输入序列\n   */\n  async simulateTyping(element: HTMLInputElement | HTMLTextAreaElement, text: string, options: { delay?: number } = {}): Promise<void> {\n    const { delay = 50 } = options;\n    \n    element.focus();\n    \n    for (let i = 0; i < text.length; i++) {\n      const char = text[i];\n      \n      // 获取当前光标位置\n      const start = element.selectionStart || 0;\n      const end = element.selectionEnd || 0;\n      const currentValue = element.value || '';\n      \n      // 在光标位置插入字符\n      const newValue = currentValue.slice(0, start) + char + currentValue.slice(end);\n      element.value = newValue;\n      \n      // 更新光标位置\n      const newCursorPos = start + 1;\n      element.setSelectionRange(newCursorPos, newCursorPos);\n      \n      // 触发输入事件\n      element.dispatchEvent(new Event('input', { bubbles: true }));\n      this.simulateKeyPress(element, char);\n      \n      if (delay > 0) {\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n    \n    // 触发 change 事件\n    element.dispatchEvent(new Event('change', { bubbles: true }));\n    this.logger.debug(`输入文本: \"${text}\"`);\n  }\n\n  /**\n   * 模拟表单控件变化\n   */\n  simulateFormChange(element: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement, value: string | boolean): void {\n    if ((element as HTMLInputElement).type === 'checkbox' || (element as HTMLInputElement).type === 'radio') {\n      (element as HTMLInputElement).checked = value as boolean;\n    } else if (element.tagName === 'SELECT') {\n      (element as HTMLSelectElement).value = value as string;\n    } else {\n      (element as HTMLInputElement | HTMLTextAreaElement).value = value as string;\n    }\n    \n    // 触发相关事件\n    element.dispatchEvent(new Event('input', { bubbles: true }));\n    element.dispatchEvent(new Event('change', { bubbles: true }));\n    \n    this.logger.debug(`表单控件变化: ${element.tagName} = ${value}`);\n  }\n\n  /**\n   * 获取键码\n   */\n  private getKeyCode(key: string): string {\n    const keyCodes: Record<string, string> = {\n      'Enter': 'Enter',\n      'Escape': 'Escape',\n      'Tab': 'Tab',\n      'Backspace': 'Backspace',\n      'Delete': 'Delete',\n      'Home': 'Home',\n      'End': 'End',\n      'ArrowUp': 'ArrowUp',\n      'ArrowDown': 'ArrowDown',\n      'ArrowLeft': 'ArrowLeft',\n      'ArrowRight': 'ArrowRight',\n      ' ': 'Space'\n    };\n    \n    return keyCodes[key] || key;\n  }\n\n  /**\n   * 滚动元素到可视区域\n   */\n  async scrollIntoView(element: Element, options: { behavior?: ScrollBehavior; block?: ScrollLogicalPosition } = {}): Promise<void> {\n    const { behavior = 'smooth', block = 'center' } = options;\n    \n    element.scrollIntoView({ behavior, block });\n    \n    // 等待滚动完成\n    await new Promise(resolve => setTimeout(resolve, 100));\n    \n    this.logger.debug('元素滚动到可视区域');\n  }\n}\n\n// 扩展 Window 接口\ndeclare global {\n  interface Window {\n    PlaywrightEventSimulator?: typeof EventSimulator;\n    PlaywrightLogger?: any;\n  }\n}\n\n// 导出给浏览器使用\nif (typeof window !== 'undefined') {\n  window.PlaywrightEventSimulator = EventSimulator;\n}\n\n// Node.js 环境\ndeclare const module: any;\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = EventSimulator;\n}\n\n// ES6 模块导出\nexport default EventSimulator;","import type { \n  ClickOptions, \n  FillOptions, \n  TypeOptions, \n  LocatorOptions, \n  ElementWaitOptions,\n  Logger \n} from '../../types/index.js';\n\ninterface FilterOptions {\n  hasText?: string;\n  hasNotText?: string;\n  exact?: boolean;\n  position?: number | 'last';\n}\n\n/**\n * Locator 适配器 - 实现 Playwright Locator API\n */\nclass LocatorAdapter {\n  private selector: string;\n  private page: any; // TODO: Type this properly\n  private options: LocatorOptions;\n  private filters: FilterOptions[];\n  private logger: Logger;\n  private waitManager: any; // TODO: Type this properly\n  private eventSimulator: any; // TODO: Type this properly\n  private _element?: Element;\n\n  constructor(selector: string, page: any, options: LocatorOptions = {}) {\n    this.selector = selector;\n    this.page = page;\n    this.options = options;\n    this.filters = [];\n    this.logger = new (window.PlaywrightLogger || console)() as Logger;\n    this.waitManager = page.waitManager;\n    this.eventSimulator = page.eventSimulator;\n  }\n\n  // =============== 链式过滤器方法 ===============\n\n  /**\n   * 过滤 locator\n   */\n  filter(options: FilterOptions): LocatorAdapter {\n    const newLocator = new LocatorAdapter(this.selector, this.page);\n    newLocator.filters = [...this.filters, options];\n    return newLocator;\n  }\n\n  /**\n   * 获取第一个元素\n   */\n  first(): LocatorAdapter {\n    return this.nth(0);\n  }\n\n  /**\n   * 获取最后一个元素\n   */\n  last(): LocatorAdapter {\n    return this.filter({ position: 'last' });\n  }\n\n  /**\n   * 获取第 n 个元素\n   */\n  nth(n: number): LocatorAdapter {\n    return this.filter({ position: n });\n  }\n\n  /**\n   * 创建子 Locator (在当前 Locator 范围内查找)\n   */\n  locator(selector: string, options: LocatorOptions = {}): LocatorAdapter {\n    // 创建组合选择器，表示在当前选择器范围内查找子选择器\n    const combinedSelector = this.combineSelectorWithParent(selector);\n    const newLocator = new LocatorAdapter(combinedSelector, this.page, options);\n    // 继承当前的过滤器\n    newLocator.filters = [...this.filters];\n    return newLocator;\n  }\n\n  /**\n   * 将选择器与父选择器组合\n   */\n  private combineSelectorWithParent(childSelector: string): string {\n    // 如果子选择器是 XPath，需要特殊处理\n    if (childSelector.startsWith('xpath=')) {\n      const childXpath = childSelector.substring(6);\n      if (this.selector.startsWith('xpath=')) {\n        const parentXpath = this.selector.substring(6);\n        return `xpath=${parentXpath}//${childXpath}`;\n      } else {\n        // 父选择器是 CSS，子选择器是 XPath - 需要转换\n        return `xpath=//*[${this.cssSelectorToXPath(this.selector)}]//${childXpath}`;\n      }\n    }\n    \n    // 如果父选择器是 XPath，子选择器是 CSS\n    if (this.selector.startsWith('xpath=')) {\n      const parentXpath = this.selector.substring(6);\n      const childXpath = this.cssSelectorToXPath(childSelector);\n      return `xpath=${parentXpath}//*[${childXpath}]`;\n    }\n    \n    // 两个都是 CSS 选择器\n    return `${this.selector} ${childSelector}`;\n  }\n\n  /**\n   * 将 CSS 选择器转换为 XPath 条件（简化版）\n   */\n  private cssSelectorToXPath(cssSelector: string): string {\n    // 简化的 CSS 到 XPath 转换\n    if (cssSelector.startsWith('#')) {\n      // ID 选择器\n      return `@id=\"${cssSelector.substring(1)}\"`;\n    } else if (cssSelector.startsWith('.')) {\n      // 类选择器\n      return `contains(@class, \"${cssSelector.substring(1)}\")`;\n    } else if (cssSelector.startsWith('[') && cssSelector.endsWith(']')) {\n      // 属性选择器\n      const attrMatch = cssSelector.match(/\\[([^=]+)=\"([^\"]+)\"\\]/);\n      if (attrMatch) {\n        return `@${attrMatch[1]}=\"${attrMatch[2]}\"`;\n      }\n      const attrExistsMatch = cssSelector.match(/\\[([^=\\]]+)\\]/);\n      if (attrExistsMatch) {\n        return `@${attrExistsMatch[1]}`;\n      }\n    } else if (/^[a-zA-Z][a-zA-Z0-9]*$/.test(cssSelector)) {\n      // 标签选择器\n      return `self::${cssSelector}`;\n    }\n    \n    // 复杂选择器 - 暂时不支持完整转换，回退到组合 CSS\n    return `self::*`;\n  }\n\n  /**\n   * 根据文本过滤\n   */\n  getByText(text: string, options: { exact?: boolean } = {}): LocatorAdapter {\n    return this.filter({ hasText: text, exact: options.exact });\n  }\n\n  // =============== 核心操作方法 ===============\n\n  /**\n   * 点击元素\n   */\n  async click(options: ClickOptions = {}): Promise<void> {\n    const element = await this.getElement();\n    await this.page.scrollIntoViewIfNeeded(element);\n    \n    this.eventSimulator.simulateClick(element, options);\n    this.logger.debug(`点击元素: ${this.selector}`);\n  }\n\n  /**\n   * 双击元素\n   */\n  async dblclick(options: ClickOptions = {}): Promise<void> {\n    const element = await this.getElement();\n    await this.page.scrollIntoViewIfNeeded(element);\n    \n    this.eventSimulator.simulateDoubleClick(element);\n    this.logger.debug(`双击元素: ${this.selector}`);\n  }\n\n  /**\n   * 填充表单\n   */\n  async fill(value: string, options: FillOptions = {}): Promise<void> {\n    const element = await this.getElement() as HTMLInputElement | HTMLTextAreaElement;\n    await this.page.scrollIntoViewIfNeeded(element);\n    \n    // 清空并填充\n    element.value = '';\n    element.value = value;\n    \n    // 触发相关事件\n    element.dispatchEvent(new Event('input', { bubbles: true }));\n    element.dispatchEvent(new Event('change', { bubbles: true }));\n    \n    this.logger.debug(`填充元素: ${this.selector} = \"${value}\"`);\n  }\n\n  /**\n   * 按键操作\n   */\n  async press(key: string, options: TypeOptions = {}): Promise<void> {\n    const element = await this.getElement() as HTMLElement;\n    element.focus();\n    \n    this.eventSimulator.simulateKeyPress(element, key, options);\n    this.logger.debug(`按键: ${this.selector} -> ${key}`);\n  }\n\n  /**\n   * 逐字符输入（模拟打字）\n   */\n  async pressSequentially(text: string, options: TypeOptions = {}): Promise<void> {\n    const element = await this.getElement() as HTMLInputElement | HTMLTextAreaElement;\n    await this.eventSimulator.simulateTyping(element, text, options);\n    this.logger.debug(`逐字符输入: ${this.selector} -> \"${text}\"`);\n  }\n\n  /**\n   * 悬停\n   */\n  async hover(): Promise<void> {\n    const element = await this.getElement() as HTMLElement;\n    await this.page.scrollIntoViewIfNeeded(element);\n    \n    this.eventSimulator.simulateHover(element);\n    this.logger.debug(`悬停元素: ${this.selector}`);\n  }\n\n  /**\n   * 选择复选框\n   */\n  async check(): Promise<void> {\n    const element = await this.getElement() as HTMLInputElement;\n    if (element.type === 'checkbox' || element.type === 'radio') {\n      element.checked = true;\n      element.dispatchEvent(new Event('change', { bubbles: true }));\n      this.logger.debug(`选择复选框: ${this.selector}`);\n    }\n  }\n\n  /**\n   * 取消选择复选框\n   */\n  async uncheck(): Promise<void> {\n    const element = await this.getElement() as HTMLInputElement;\n    if (element.type === 'checkbox') {\n      element.checked = false;\n      element.dispatchEvent(new Event('change', { bubbles: true }));\n      this.logger.debug(`取消选择复选框: ${this.selector}`);\n    }\n  }\n\n  /**\n   * 选择下拉选项\n   */\n  async selectOption(values: string | string[], options: Record<string, any> = {}): Promise<void> {\n    const element = await this.getElement() as HTMLSelectElement;\n    if (element.tagName === 'SELECT') {\n      if (Array.isArray(values)) {\n        // 多选\n        Array.from(element.options).forEach(option => {\n          option.selected = values.includes(option.value) || values.includes(option.text);\n        });\n      } else {\n        element.value = values;\n      }\n      element.dispatchEvent(new Event('change', { bubbles: true }));\n      this.logger.debug(`选择下拉选项: ${this.selector} = ${values}`);\n    }\n  }\n\n  // =============== 状态检查方法 ===============\n\n  /**\n   * 检查元素是否可见\n   */\n  async isVisible(): Promise<boolean> {\n    try {\n      const element = await this.getElement();\n      const rect = element.getBoundingClientRect();\n      const style = getComputedStyle(element);\n      return rect.width > 0 && rect.height > 0 && \n             style.visibility !== 'hidden' && style.display !== 'none' &&\n             (element as HTMLElement).offsetParent !== null;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * 检查元素是否隐藏\n   */\n  async isHidden(): Promise<boolean> {\n    return !(await this.isVisible());\n  }\n\n  /**\n   * 检查元素是否启用\n   */\n  async isEnabled(): Promise<boolean> {\n    try {\n      const element = await this.getElement() as HTMLInputElement | HTMLButtonElement | HTMLSelectElement | HTMLTextAreaElement;\n      return !element.disabled && !element.hasAttribute('disabled');\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * 检查元素是否禁用\n   */\n  async isDisabled(): Promise<boolean> {\n    return !(await this.isEnabled());\n  }\n\n  /**\n   * 检查复选框是否选中\n   */\n  async isChecked(): Promise<boolean> {\n    try {\n      const element = await this.getElement() as HTMLInputElement;\n      return element.checked || false;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  // =============== 内容获取方法 ===============\n\n  /**\n   * 获取文本内容\n   */\n  async textContent(): Promise<string> {\n    const element = await this.getElement();\n    return element.textContent || '';\n  }\n\n  /**\n   * 获取内部文本\n   */\n  async innerText(): Promise<string> {\n    const element = await this.getElement() as HTMLElement;\n    return element.innerText || '';\n  }\n\n  /**\n   * 获取 HTML 内容\n   */\n  async innerHTML(): Promise<string> {\n    const element = await this.getElement() as HTMLElement;\n    return element.innerHTML || '';\n  }\n\n  /**\n   * 获取属性值\n   */\n  async getAttribute(name: string): Promise<string | null> {\n    const element = await this.getElement();\n    return element.getAttribute(name);\n  }\n\n  /**\n   * 获取输入值\n   */\n  async inputValue(): Promise<string> {\n    const element = await this.getElement() as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;\n    return element.value || '';\n  }\n\n  // =============== 等待方法 ===============\n\n  /**\n   * 等待元素状态\n   */\n  async waitFor(options: ElementWaitOptions = {}): Promise<void> {\n    const { state = 'visible', timeout = 30000 } = options;\n    \n    switch (state) {\n      case 'visible':\n        return this.waitForVisible(timeout);\n      case 'hidden':\n        return this.waitForHidden(timeout);\n      case 'attached':\n        return this.waitForAttached(timeout);\n      case 'detached':\n        return this.waitForDetached(timeout);\n      default:\n        throw new Error(`未知的等待状态: ${state}`);\n    }\n  }\n\n  /**\n   * 等待可见\n   */\n  private async waitForVisible(timeout: number): Promise<void> {\n    return this.waitManager.waitForCondition(\n      () => this.isVisible(),\n      timeout,\n      `元素 \"${this.selector}\" 等待可见超时`\n    );\n  }\n\n  /**\n   * 等待隐藏\n   */\n  private async waitForHidden(timeout: number): Promise<void> {\n    return this.waitManager.waitForCondition(\n      () => this.isHidden(),\n      timeout,\n      `元素 \"${this.selector}\" 等待隐藏超时`\n    );\n  }\n\n  /**\n   * 等待附加到DOM\n   */\n  private async waitForAttached(timeout: number): Promise<void> {\n    return this.waitManager.waitForCondition(\n      () => this.count() > 0,\n      timeout,\n      `元素 \"${this.selector}\" 等待附加到DOM超时`\n    );\n  }\n\n  /**\n   * 等待从DOM分离\n   */\n  private async waitForDetached(timeout: number): Promise<void> {\n    return this.waitManager.waitForCondition(\n      () => this.count() === 0,\n      timeout,\n      `元素 \"${this.selector}\" 等待从DOM分离超时`\n    );\n  }\n\n  // =============== 查询方法 ===============\n\n  /**\n   * 查询所有匹配的元素\n   */\n  private queryElements(selector: string): Element[] {\n    if (selector.startsWith('xpath=')) {\n      const xpath = selector.substring(6);\n      const result = document.evaluate(xpath, document, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);\n      const elements: Element[] = [];\n      for (let i = 0; i < result.snapshotLength; i++) {\n        const element = result.snapshotItem(i);\n        if (element) elements.push(element as Element);\n      }\n      return elements;\n    } else {\n      return Array.from(document.querySelectorAll(selector));\n    }\n  }\n\n  /**\n   * 获取匹配元素的数量\n   */\n  async count(): Promise<number> {\n    const elements = this.queryElements(this.selector);\n    return this.applyFilters(elements).length;\n  }\n\n  /**\n   * 获取所有匹配的 locator\n   */\n  async all(): Promise<LocatorAdapter[]> {\n    const elements = this.queryElements(this.selector);\n    const filteredElements = this.applyFilters(elements);\n    \n    return filteredElements.map(element => {\n      const locator = new LocatorAdapter(this.buildUniqueSelector(element), this.page);\n      locator._element = element;\n      return locator;\n    });\n  }\n\n  /**\n   * 获取单个元素\n   */\n  async getElement(): Promise<Element> {\n    if (this._element && document.contains(this._element)) {\n      return this._element;\n    }\n\n    const elements = this.queryElements(this.selector);\n    if (elements.length === 0) {\n      throw new Error(`找不到元素: ${this.selector}`);\n    }\n\n    const filteredElements = this.applyFilters(elements);\n    if (filteredElements.length === 0) {\n      throw new Error(`过滤后找不到元素: ${this.selector}`);\n    }\n\n    return filteredElements[0];\n  }\n\n  /**\n   * 应用过滤器\n   */\n  private applyFilters(elements: Element[]): Element[] {\n    let filtered = elements;\n    \n    for (const filter of this.filters) {\n      filtered = this.applyFilter(filtered, filter);\n    }\n    \n    return filtered;\n  }\n\n  /**\n   * 应用单个过滤器\n   */\n  private applyFilter(elements: Element[], filter: FilterOptions): Element[] {\n    if (typeof filter.position === 'number') {\n      return elements[filter.position] ? [elements[filter.position]] : [];\n    }\n    \n    if (filter.position === 'last') {\n      return elements.length > 0 ? [elements[elements.length - 1]] : [];\n    }\n    \n    if (filter.hasText) {\n      return elements.filter(element => {\n        const text = element.textContent || (element as HTMLElement).innerText || '';\n        return filter.exact ? text === filter.hasText : text.includes(filter.hasText!);\n      });\n    }\n    \n    if (filter.hasNotText) {\n      return elements.filter(element => {\n        const text = element.textContent || (element as HTMLElement).innerText || '';\n        return !text.includes(filter.hasNotText!);\n      });\n    }\n    \n    return elements;\n  }\n\n  /**\n   * 构建唯一选择器\n   */\n  private buildUniqueSelector(element: Element): string {\n    if (element.id) {\n      return `#${element.id}`;\n    }\n    \n    const path: string[] = [];\n    let current: Element | null = element;\n    \n    while (current && current !== document.body) {\n      let selector = current.tagName.toLowerCase();\n      \n      if (current.className) {\n        const classes = current.className.split(' ').filter(cls => cls.trim());\n        if (classes.length > 0) {\n          selector += '.' + classes.join('.');\n        }\n      }\n      \n      const siblings = Array.from(current.parentNode?.children || []).filter(\n        child => child.tagName === current!.tagName\n      );\n      \n      if (siblings.length > 1) {\n        const index = siblings.indexOf(current);\n        selector += `:nth-of-type(${index + 1})`;\n      }\n      \n      path.unshift(selector);\n      current = current.parentElement;\n    }\n    \n    return path.join(' > ');\n  }\n}\n\n// 扩展 Window 接口\ndeclare global {\n  interface Window {\n    PlaywrightLocatorAdapter?: typeof LocatorAdapter;\n    PlaywrightLogger?: any;\n  }\n}\n\n// 导出给浏览器使用\nif (typeof window !== 'undefined') {\n  window.PlaywrightLocatorAdapter = LocatorAdapter;\n}\n\n// Node.js 环境\ndeclare const module: any;\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = LocatorAdapter;\n}\n\n// ES6 模块导出\nexport default LocatorAdapter;","import type { \n  ClickOptions, \n  FillOptions, \n  TypeOptions, \n  PageGotoOptions, \n  BoundingBox, \n  ViewportSize,\n  Logger\n} from '../../types/index.js';\n\n/**\n * Page 适配器 - 实现 Playwright Page API\n */\nclass PageAdapter {\n  private readonly logger: Logger;\n  private readonly waitManager: any; // TODO: Type this properly\n  private readonly eventSimulator: any; // TODO: Type this properly\n\n  constructor() {\n    this.logger = new (window.PlaywrightLogger || (console as any))() as Logger;\n    this.waitManager = new (window.PlaywrightWaitManager as any)();\n    this.eventSimulator = new (window.PlaywrightEventSimulator as any)();\n  }\n\n  // =============== 导航方法 ===============\n\n  /**\n   * 导航到指定 URL\n   */\n  async goto(url: string, options: PageGotoOptions = {}): Promise<{ url: string; status: number }> {\n    const { waitUntil = 'load', timeout = 30000 } = options;\n    \n    this.logger.info(`导航到: ${url}`);\n    \n    if (window.location.href !== url) {\n      window.location.href = url;\n      await this.waitForLoadState(waitUntil, timeout);\n    }\n    \n    return { url: window.location.href, status: 200 };\n  }\n\n  /**\n   * 后退\n   */\n  async goBack(options: { waitUntil?: 'load' | 'domcontentloaded' | 'networkidle' } = {}): Promise<void> {\n    const { waitUntil = 'load' } = options;\n    window.history.back();\n    await this.waitForLoadState(waitUntil);\n  }\n\n  /**\n   * 前进\n   */\n  async goForward(options: { waitUntil?: 'load' | 'domcontentloaded' | 'networkidle' } = {}): Promise<void> {\n    const { waitUntil = 'load' } = options;\n    window.history.forward();\n    await this.waitForLoadState(waitUntil);\n  }\n\n  /**\n   * 刷新页面\n   */\n  async reload(options: { waitUntil?: 'load' | 'domcontentloaded' | 'networkidle' } = {}): Promise<void> {\n    const { waitUntil = 'load' } = options;\n    window.location.reload();\n    await this.waitForLoadState(waitUntil);\n  }\n\n  // =============== 页面信息获取 ===============\n\n  /**\n   * 获取当前 URL\n   */\n  url(): string {\n    return window.location.href;\n  }\n\n  /**\n   * 获取页面标题\n   */\n  async title(): Promise<string> {\n    return document.title;\n  }\n\n  /**\n   * 获取页面内容\n   */\n  async content(): Promise<string> {\n    return document.documentElement.outerHTML;\n  }\n\n  // =============== 元素交互方法 ===============\n\n  /**\n   * 点击元素\n   */\n  async click(selector: string, options: ClickOptions = {}): Promise<void> {\n    const element = await this.waitForSelector(selector);\n    await this.scrollIntoViewIfNeeded(element);\n    \n    this.eventSimulator.simulateClick(element, options);\n    this.logger.debug(`点击: ${selector}`);\n  }\n\n  /**\n   * 双击元素\n   */\n  async dblclick(selector: string, options: ClickOptions = {}): Promise<void> {\n    const element = await this.waitForSelector(selector);\n    await this.scrollIntoViewIfNeeded(element);\n    \n    this.eventSimulator.simulateDoubleClick(element);\n    this.logger.debug(`双击: ${selector}`);\n  }\n\n  /**\n   * 填充表单\n   */\n  async fill(selector: string, value: string, options: FillOptions = {}): Promise<void> {\n    const element = await this.waitForSelector(selector) as HTMLInputElement | HTMLTextAreaElement;\n    await this.scrollIntoViewIfNeeded(element);\n    \n    // 清空并填充\n    element.value = '';\n    element.value = value;\n    \n    // 触发相关事件\n    element.dispatchEvent(new Event('input', { bubbles: true }));\n    element.dispatchEvent(new Event('change', { bubbles: true }));\n    \n    this.logger.debug(`填充: ${selector} = \"${value}\"`);\n  }\n\n  /**\n   * 按键操作\n   */\n  async press(selector: string, key: string, options: TypeOptions = {}): Promise<void> {\n    const element = await this.waitForSelector(selector) as HTMLElement;\n    element.focus();\n    \n    this.eventSimulator.simulateKeyPress(element, key, options);\n    this.logger.debug(`按键: ${selector} -> ${key}`);\n  }\n\n  /**\n   * 输入文本（模拟打字）\n   */\n  async type(selector: string, text: string, options: TypeOptions = {}): Promise<void> {\n    const element = await this.waitForSelector(selector);\n    await this.eventSimulator.simulateTyping(element, text, options);\n    this.logger.debug(`输入: ${selector} -> \"${text}\"`);\n  }\n\n  /**\n   * 悬停\n   */\n  async hover(selector: string): Promise<void> {\n    const element = await this.waitForSelector(selector);\n    await this.scrollIntoViewIfNeeded(element);\n    \n    this.eventSimulator.simulateHover(element);\n    this.logger.debug(`悬停: ${selector}`);\n  }\n\n  /**\n   * 选择复选框\n   */\n  async check(selector: string): Promise<void> {\n    const element = await this.waitForSelector(selector) as HTMLInputElement;\n    if (element.type === 'checkbox' || element.type === 'radio') {\n      element.checked = true;\n      element.dispatchEvent(new Event('change', { bubbles: true }));\n      this.logger.debug(`选择: ${selector}`);\n    }\n  }\n\n  /**\n   * 取消选择复选框\n   */\n  async uncheck(selector: string): Promise<void> {\n    const element = await this.waitForSelector(selector) as HTMLInputElement;\n    if (element.type === 'checkbox') {\n      element.checked = false;\n      element.dispatchEvent(new Event('change', { bubbles: true }));\n      this.logger.debug(`取消选择: ${selector}`);\n    }\n  }\n\n  /**\n   * 选择下拉选项\n   */\n  async selectOption(selector: string, values: string | string[], options: Record<string, any> = {}): Promise<void> {\n    const element = await this.waitForSelector(selector) as HTMLSelectElement;\n    if (element.tagName === 'SELECT') {\n      if (Array.isArray(values)) {\n        // 多选\n        Array.from(element.options).forEach(option => {\n          option.selected = values.includes(option.value) || values.includes(option.text);\n        });\n      } else {\n        element.value = values;\n      }\n      element.dispatchEvent(new Event('change', { bubbles: true }));\n      this.logger.debug(`选择选项: ${selector} = ${values}`);\n    }\n  }\n\n  /**\n   * 聚焦元素\n   */\n  async focus(selector: string, options: Record<string, any> = {}): Promise<void> {\n    const element = await this.waitForSelector(selector) as HTMLElement;\n    await this.scrollIntoViewIfNeeded(element);\n    \n    element.focus();\n    this.logger.debug(`聚焦: ${selector}`);\n  }\n\n  // =============== 现代定位器方法 ===============\n\n  /**\n   * 创建 Locator\n   */\n  locator(selector: string, options: Record<string, any> = {}): any {\n    // 动态获取 LocatorAdapter 类\n    const LocatorAdapterClass = window.PlaywrightLocatorAdapter;\n    if (!LocatorAdapterClass) {\n      throw new Error('PlaywrightLocatorAdapter not found in global scope');\n    }\n    return new LocatorAdapterClass(selector, this, options);\n  }\n\n  /**\n   * 根据角色定位\n   */\n  getByRole(role: string, options: { name?: string; exact?: boolean; level?: number } = {}): any {\n    const { name, exact = false, level } = options;\n    \n    if (level && role === 'heading') {\n      return this.locator(`h${level}[role=\"heading\"], h${level}`);\n    }\n    \n    // 构建基础的角色选择器，包括隐式角色\n    let baseSelector = `[role=\"${role}\"]`;\n    \n    // 添加隐式 ARIA 角色的元素\n    const implicitRoles: Record<string, string> = {\n      'button': 'button, input[type=\"button\"], input[type=\"submit\"], input[type=\"reset\"]',\n      'link': 'a[href]',\n      'textbox': 'input[type=\"text\"], input[type=\"email\"], input[type=\"password\"], input[type=\"search\"], input[type=\"tel\"], input[type=\"url\"], textarea',\n      'combobox': 'select',\n      'checkbox': 'input[type=\"checkbox\"]',\n      'radio': 'input[type=\"radio\"]',\n      'heading': 'h1, h2, h3, h4, h5, h6'\n    };\n    \n    if (implicitRoles[role]) {\n      baseSelector = `[role=\"${role}\"], ${implicitRoles[role]}`;\n    }\n    \n    if (name) {\n      // 使用 XPath 处理复杂的文本匹配，包括隐式角色\n      let xpathParts = [`//*[@role=\"${role}\"]`];\n      \n      // 添加隐式角色的 XPath\n      if (implicitRoles[role]) {\n        const elements = implicitRoles[role].split(', ');\n        elements.forEach(element => {\n          if (element.includes('[')) {\n            // 处理带属性的元素，如 input[type=\"text\"]\n            const [tag, attrPart] = element.split('[');\n            // 移除右括号并解析属性\n            const attr = attrPart.replace(/\\]$/, '');\n            \n            if (attr.includes('=')) {\n              // 有值的属性，如 type=\"button\"\n              const [attrName, attrValue] = attr.split('=');\n              const cleanAttrName = attrName.trim();\n              const cleanAttrValue = attrValue.replace(/['\"]/g, '').trim();\n              xpathParts.push(`//${tag}[@${cleanAttrName}=\"${cleanAttrValue}\"]`);\n            } else {\n              // 仅存在性检查的属性\n              const cleanAttrName = attr.trim();\n              xpathParts.push(`//${tag}[@${cleanAttrName}]`);\n            }\n          } else {\n            // 简单标签名\n            xpathParts.push(`//${element}`);\n          }\n        });\n      }\n      \n      let xpath: string;\n      if (exact) {\n        xpath = xpathParts.map(part => \n          `${part}[@aria-label=\"${name}\"] | ${part}[normalize-space(text())=\"${name}\"]`\n        ).join(' | ');\n      } else {\n        xpath = xpathParts.map(part => \n          `${part}[contains(@aria-label, \"${name}\")] | ${part}[contains(normalize-space(text()), \"${name}\")]`\n        ).join(' | ');\n      }\n      return this.locator(`xpath=${xpath}`);\n    }\n    \n    return this.locator(baseSelector);\n  }\n\n  /**\n   * 根据文本定位\n   */\n  getByText(text: string, options: { exact?: boolean } = {}): any {\n    const { exact = false } = options;\n    let xpath: string;\n    \n    if (exact) {\n      xpath = `//*[normalize-space(text())=\"${text}\"]`;\n    } else {\n      xpath = `//*[contains(normalize-space(text()), \"${text}\")]`;\n    }\n    \n    return this.locator(`xpath=${xpath}`);\n  }\n\n  /**\n   * 根据标签定位\n   */\n  getByLabel(text: string, options: { exact?: boolean } = {}): any {\n    const { exact = false } = options;\n    \n    // 使用 XPath 来查找标签文本相关的输入元素\n    let xpath: string;\n    if (exact) {\n      xpath = `//input[@id = //label[normalize-space(text())=\"${text}\"]/@for] | //label[normalize-space(text())=\"${text}\"]//input | //input[@aria-labelledby = //label[normalize-space(text())=\"${text}\"]/@id]`;\n    } else {\n      xpath = `//input[@id = //label[contains(normalize-space(text()), \"${text}\")]/@for] | //label[contains(normalize-space(text()), \"${text}\")]//input | //input[@aria-labelledby = //label[contains(normalize-space(text()), \"${text}\")]/@id]`;\n    }\n    \n    return this.locator(`xpath=${xpath}`);\n  }\n\n  /**\n   * 根据占位符定位\n   */\n  getByPlaceholder(text: string, options: { exact?: boolean } = {}): any {\n    const { exact = false } = options;\n    const selector = exact \n      ? `[placeholder=\"${text}\"]`\n      : `[placeholder*=\"${text}\"]`;\n    \n    return this.locator(selector);\n  }\n\n  /**\n   * 根据测试 ID 定位\n   */\n  getByTestId(testId: string): any {\n    return this.locator(`[data-testid=\"${testId}\"]`);\n  }\n\n  /**\n   * 根据标题定位\n   */\n  getByTitle(text: string, options: { exact?: boolean } = {}): any {\n    const { exact = false } = options;\n    const selector = exact \n      ? `[title=\"${text}\"]`\n      : `[title*=\"${text}\"]`;\n    \n    return this.locator(selector);\n  }\n\n  // =============== 等待方法 ===============\n\n  /**\n   * 等待元素\n   */\n  async waitForSelector(selector: string, options: { timeout?: number; state?: string } = {}): Promise<Element> {\n    const { timeout = 30000, state = 'visible' } = options;\n    \n    // 如果是 xpath，需要特殊处理\n    if (selector.startsWith('xpath=')) {\n      return this.waitForXPath(selector.substring(6), { timeout });\n    }\n    \n    // 处理 :visible 和 :hidden 伪类选择器\n    let actualSelector = selector;\n    let requiredState = state;\n    \n    if (selector.includes(':visible')) {\n      actualSelector = selector.replace(':visible', '');\n      requiredState = 'visible';\n    } else if (selector.includes(':hidden')) {\n      actualSelector = selector.replace(':hidden', '');\n      requiredState = 'hidden';\n    }\n    \n    const element = await this.waitManager.waitForElement(actualSelector, timeout);\n    \n    if (requiredState === 'visible') {\n      await this.waitManager.waitForCondition(\n        () => {\n          const rect = element.getBoundingClientRect();\n          const style = getComputedStyle(element);\n          return rect.width > 0 && rect.height > 0 && \n                 style.visibility !== 'hidden' && style.display !== 'none';\n        },\n        timeout,\n        `元素 \"${actualSelector}\" 等待可见超时`\n      );\n    } else if (requiredState === 'hidden') {\n      await this.waitManager.waitForCondition(\n        () => {\n          const rect = element.getBoundingClientRect();\n          const style = getComputedStyle(element);\n          return rect.width === 0 || rect.height === 0 || \n                 style.visibility === 'hidden' || style.display === 'none';\n        },\n        timeout,\n        `元素 \"${actualSelector}\" 等待隐藏超时`\n      );\n    }\n    \n    return element;\n  }\n\n  /**\n   * 等待 XPath 元素\n   */\n  async waitForXPath(xpath: string, options: { timeout?: number } = {}): Promise<Element> {\n    const { timeout = 30000 } = options;\n    \n    return this.waitManager.waitForCondition(\n      () => {\n        const result = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);\n        return result.singleNodeValue;\n      },\n      timeout,\n      `XPath 元素等待超时: ${xpath}`\n    );\n  }\n\n  /**\n   * 等待超时\n   */\n  async waitForTimeout(ms: number): Promise<void> {\n    return this.waitManager.waitForTimeout(ms);\n  }\n\n  /**\n   * 等待函数\n   */\n  async waitForFunction<T>(fn: () => T, arg?: any, options: { timeout?: number } = {}): Promise<T> {\n    const { timeout = 30000 } = options;\n    return this.waitManager.waitForCondition(\n      () => fn(arg),\n      timeout,\n      '等待函数条件超时'\n    );\n  }\n\n  /**\n   * 等待 URL\n   */\n  async waitForURL(url: string | RegExp, options: { timeout?: number } = {}): Promise<void> {\n    const { timeout = 30000 } = options;\n    return this.waitManager.waitForURL(url, timeout);\n  }\n\n  /**\n   * 等待加载状态\n   */\n  async waitForLoadState(state: 'load' | 'domcontentloaded' | 'networkidle' = 'load'): Promise<void> {\n    return this.waitManager.waitForLoadState(state);\n  }\n\n  // =============== 脚本执行方法 ===============\n\n  /**\n   * 在页面上下文中执行脚本\n   */\n  async evaluate<T>(fn: (...args: any[]) => T, ...args: any[]): Promise<T> {\n    try {\n      return fn.apply(window, args);\n    } catch (error) {\n      this.logger.error('脚本执行失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 在页面上下文中执行脚本并返回句柄\n   */\n  async evaluateHandle<T>(fn: (...args: any[]) => T, ...args: any[]): Promise<T> {\n    return this.evaluate(fn, ...args);\n  }\n\n  /**\n   * 添加脚本标签\n   */\n  async addScriptTag(options: { url?: string; path?: string; content?: string; type?: string } = {}): Promise<HTMLScriptElement> {\n    const { url, path, content, type = 'text/javascript' } = options;\n    \n    const script = document.createElement('script');\n    script.type = type;\n    \n    if (url) {\n      script.src = url;\n    } else if (content) {\n      script.textContent = content;\n    }\n    \n    document.head.appendChild(script);\n    \n    // 等待脚本加载\n    if (url) {\n      await new Promise((resolve, reject) => {\n        script.onload = resolve;\n        script.onerror = reject;\n      });\n    }\n    \n    this.logger.debug('添加脚本标签');\n    return script;\n  }\n\n  /**\n   * 添加样式标签\n   */\n  async addStyleTag(options: { url?: string; path?: string; content?: string } = {}): Promise<HTMLLinkElement | HTMLStyleElement> {\n    const { url, path, content } = options;\n    \n    if (url) {\n      const link = document.createElement('link');\n      link.rel = 'stylesheet';\n      link.href = url;\n      document.head.appendChild(link);\n      return link;\n    } else if (content) {\n      const style = document.createElement('style');\n      style.textContent = content;\n      document.head.appendChild(style);\n      return style;\n    }\n\n    throw new Error('Either url or content must be provided');\n  }\n\n  // =============== 辅助方法 ===============\n\n  /**\n   * 滚动元素到可视区域\n   */\n  async scrollIntoViewIfNeeded(element: Element): Promise<void> {\n    const rect = element.getBoundingClientRect();\n    const isInViewport = rect.top >= 0 && rect.bottom <= window.innerHeight &&\n                        rect.left >= 0 && rect.right <= window.innerWidth;\n    \n    if (!isInViewport) {\n      element.scrollIntoView({ behavior: 'smooth', block: 'center' });\n      await this.waitForTimeout(100); // 等待滚动完成\n      this.logger.debug('元素滚动到可视区域');\n    }\n  }\n\n  /**\n   * 获取元素边界框\n   */\n  async boundingBox(selector: string): Promise<BoundingBox> {\n    const element = await this.waitForSelector(selector);\n    const rect = element.getBoundingClientRect();\n    \n    return {\n      x: rect.left + window.scrollX,\n      y: rect.top + window.scrollY,\n      width: rect.width,\n      height: rect.height\n    };\n  }\n\n  /**\n   * 设置视口大小（有限支持）\n   */\n  async setViewportSize(size: ViewportSize): Promise<ViewportSize> {\n    // 浏览器环境中无法直接设置视口大小\n    // 这里只是记录日志\n    this.logger.warn('浏览器环境中无法设置视口大小');\n    return { width: window.innerWidth, height: window.innerHeight };\n  }\n\n  /**\n   * 获取视口大小\n   */\n  viewportSize(): ViewportSize {\n    return { width: window.innerWidth, height: window.innerHeight };\n  }\n}\n\n// 扩展 Window 接口\ndeclare global {\n  interface Window {\n    PlaywrightPageAdapter?: typeof PageAdapter;\n    PlaywrightLocatorAdapter?: any;\n    PlaywrightWaitManager?: any;\n    PlaywrightEventSimulator?: any;\n    PlaywrightLogger?: any;\n  }\n}\n\n// 导出给浏览器使用\nif (typeof window !== 'undefined') {\n  window.PlaywrightPageAdapter = PageAdapter;\n}\n\n// Node.js 环境\ndeclare const module: any;\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = PageAdapter;\n}\n\n// ES6 模块导出\nexport default PageAdapter;","import type { ExpectMatcherOptions, Logger } from '../../types/index.js';\n\n/**\n * Expect 适配器 - 实现 Playwright Expect API\n */\nclass ExpectAdapter {\n  private target: any;\n  private isNot: boolean;\n  private timeout: number;\n  private logger: Logger;\n\n  constructor(target: any, options: { timeout?: number } = {}) {\n    this.target = target;\n    this.isNot = false;\n    this.timeout = options.timeout || 5000;\n    this.logger = new (window.PlaywrightLogger || console)() as Logger;\n  }\n\n  /**\n   * 取反\n   */\n  get not(): ExpectAdapter {\n    const newExpect = new ExpectAdapter(this.target, { timeout: this.timeout });\n    newExpect.isNot = !this.isNot;\n    return newExpect;\n  }\n\n  // =============== 可见性断言 ===============\n\n  /**\n   * 断言元素可见\n   */\n  async toBeVisible(options: ExpectMatcherOptions = {}): Promise<void> {\n    const timeout = options.timeout || this.timeout;\n    const expected = !this.isNot;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const isVisible = await this.target.isVisible();\n          return isVisible === expected;\n        },\n        timeout,\n        `期望元素${expected ? '可见' : '不可见'}`\n      );\n      \n      this.logger.debug(`✅ 元素${expected ? '可见' : '不可见'}断言通过`);\n    } catch (error) {\n      const actualVisible = await this.target.isVisible();\n      throw new Error(`期望元素${expected ? '可见' : '不可见'}，但实际${actualVisible ? '可见' : '不可见'}`);\n    }\n  }\n\n  /**\n   * 断言元素隐藏\n   */\n  async toBeHidden(options: ExpectMatcherOptions = {}): Promise<void> {\n    const timeout = options.timeout || this.timeout;\n    const expected = !this.isNot; // Hidden means NOT visible\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const isVisible = await this.target.isVisible();\n          return isVisible !== expected; // Element should NOT be visible when expected to be hidden\n        },\n        timeout,\n        `期望元素${expected ? '隐藏' : '可见'}`\n      );\n      \n      this.logger.debug(`✅ 元素${expected ? '隐藏' : '可见'}断言通过`);\n    } catch (error) {\n      const actualVisible = await this.target.isVisible();\n      throw new Error(`期望元素${expected ? '隐藏' : '可见'}，但实际${actualVisible ? '可见' : '隐藏'}`);\n    }\n  }\n\n  // =============== 状态断言 ===============\n\n  /**\n   * 断言元素启用\n   */\n  async toBeEnabled(options: ExpectMatcherOptions = {}): Promise<void> {\n    const timeout = options.timeout || this.timeout;\n    const expected = !this.isNot;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const isEnabled = await this.target.isEnabled();\n          return isEnabled === expected;\n        },\n        timeout,\n        `期望元素${expected ? '启用' : '禁用'}`\n      );\n      \n      this.logger.debug(`✅ 元素${expected ? '启用' : '禁用'}断言通过`);\n    } catch (error) {\n      const actualEnabled = await this.target.isEnabled();\n      throw new Error(`期望元素${expected ? '启用' : '禁用'}，但实际${actualEnabled ? '启用' : '禁用'}`);\n    }\n  }\n\n  /**\n   * 断言元素禁用\n   */\n  async toBeDisabled(options: ExpectMatcherOptions = {}): Promise<void> {\n    const timeout = options.timeout || this.timeout;\n    const expected = this.isNot;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const isEnabled = await this.target.isEnabled();\n          return isEnabled === expected;\n        },\n        timeout,\n        `期望元素${expected ? '启用' : '禁用'}`\n      );\n      \n      this.logger.debug(`✅ 元素${expected ? '启用' : '禁用'}断言通过`);\n    } catch (error) {\n      const actualEnabled = await this.target.isEnabled();\n      throw new Error(`期望元素${expected ? '启用' : '禁用'}，但实际${actualEnabled ? '启用' : '禁用'}`);\n    }\n  }\n\n  /**\n   * 断言复选框选中\n   */\n  async toBeChecked(options: ExpectMatcherOptions = {}): Promise<void> {\n    const timeout = options.timeout || this.timeout;\n    const expected = !this.isNot;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const isChecked = await this.target.isChecked();\n          return isChecked === expected;\n        },\n        timeout,\n        `期望元素${expected ? '选中' : '未选中'}`\n      );\n      \n      this.logger.debug(`✅ 元素${expected ? '选中' : '未选中'}断言通过`);\n    } catch (error) {\n      const actualChecked = await this.target.isChecked();\n      throw new Error(`期望元素${expected ? '选中' : '未选中'}，但实际${actualChecked ? '选中' : '未选中'}`);\n    }\n  }\n\n  // =============== 内容断言 ===============\n\n  /**\n   * 断言包含文本\n   */\n  async toHaveText(expectedText: string | RegExp | string[], options: ExpectMatcherOptions = {}): Promise<void> {\n    const timeout = options.timeout || this.timeout;\n    const useInnerText = options.useInnerText || false;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const actualText = useInnerText \n            ? await this.target.innerText()\n            : await this.target.textContent();\n          \n          let matches: boolean;\n          if (Array.isArray(expectedText)) {\n            matches = expectedText.every(text => actualText.includes(text));\n          } else if (expectedText instanceof RegExp) {\n            matches = expectedText.test(actualText);\n          } else {\n            matches = actualText.includes(expectedText);\n          }\n          \n          return this.isNot ? !matches : matches;\n        },\n        timeout,\n        `期望文本${this.isNot ? '不' : ''}包含 \"${expectedText}\"`\n      );\n      \n      this.logger.debug(`✅ 文本${this.isNot ? '不' : ''}包含断言通过`);\n    } catch (error) {\n      const actualText = useInnerText \n        ? await this.target.innerText()\n        : await this.target.textContent();\n      throw new Error(`期望文本${this.isNot ? '不' : ''}包含 \"${expectedText}\"，但实际文本为 \"${actualText}\"`);\n    }\n  }\n\n  /**\n   * 断言确切文本\n   */\n  async toHaveExactText(expectedText: string, options: ExpectMatcherOptions = {}): Promise<void> {\n    const timeout = options.timeout || this.timeout;\n    const useInnerText = options.useInnerText || false;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const actualText = useInnerText \n            ? await this.target.innerText()\n            : await this.target.textContent();\n          \n          const matches = actualText.trim() === expectedText.trim();\n          return this.isNot ? !matches : matches;\n        },\n        timeout,\n        `期望文本${this.isNot ? '不' : ''}完全匹配 \"${expectedText}\"`\n      );\n      \n      this.logger.debug(`✅ 确切文本${this.isNot ? '不' : ''}匹配断言通过`);\n    } catch (error) {\n      const actualText = useInnerText \n        ? await this.target.innerText()\n        : await this.target.textContent();\n      throw new Error(`期望文本${this.isNot ? '不' : ''}完全匹配 \"${expectedText}\"，但实际文本为 \"${actualText}\"`);\n    }\n  }\n\n  /**\n   * 断言包含文本（部分）\n   */\n  async toContainText(expectedText: string | RegExp, options: ExpectMatcherOptions = {}): Promise<void> {\n    return this.toHaveText(expectedText, options);\n  }\n\n  // =============== 属性断言 ===============\n\n  /**\n   * 断言有属性\n   */\n  async toHaveAttribute(name: string, value?: string | RegExp, options: ExpectMatcherOptions = {}): Promise<void> {\n    const timeout = options.timeout || this.timeout;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const actualValue = await this.target.getAttribute(name);\n          \n          let matches: boolean;\n          if (value === undefined) {\n            matches = actualValue !== null;\n          } else if (value instanceof RegExp) {\n            matches = value.test(actualValue || '');\n          } else {\n            matches = actualValue === value;\n          }\n          \n          return this.isNot ? !matches : matches;\n        },\n        timeout,\n        `期望${this.isNot ? '不' : ''}有属性 \"${name}\"`\n      );\n      \n      this.logger.debug(`✅ 属性${this.isNot ? '不' : ''}存在断言通过`);\n    } catch (error) {\n      const actualValue = await this.target.getAttribute(name);\n      throw new Error(`期望${this.isNot ? '不' : ''}有属性 \"${name}\"${value !== undefined ? ` = \"${value}\"` : ''}，但实际值为 \"${actualValue}\"`);\n    }\n  }\n\n  /**\n   * 断言有值\n   */\n  async toHaveValue(expectedValue: string | RegExp, options: ExpectMatcherOptions = {}): Promise<void> {\n    const timeout = options.timeout || this.timeout;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const actualValue = await this.target.inputValue();\n          \n          let matches: boolean;\n          if (expectedValue instanceof RegExp) {\n            matches = expectedValue.test(actualValue);\n          } else {\n            matches = actualValue === expectedValue;\n          }\n          \n          return this.isNot ? !matches : matches;\n        },\n        timeout,\n        `期望值${this.isNot ? '不' : ''}为 \"${expectedValue}\"`\n      );\n      \n      this.logger.debug(`✅ 值${this.isNot ? '不' : ''}匹配断言通过`);\n    } catch (error) {\n      const actualValue = await this.target.inputValue();\n      throw new Error(`期望值${this.isNot ? '不' : ''}为 \"${expectedValue}\"，但实际值为 \"${actualValue}\"`);\n    }\n  }\n\n  /**\n   * 断言有类名\n   */\n  async toHaveClass(expectedClass: string | string[] | RegExp, options: ExpectMatcherOptions = {}): Promise<void> {\n    const timeout = options.timeout || this.timeout;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const classAttr = await this.target.getAttribute('class');\n          const classes = classAttr ? classAttr.split(' ') : [];\n          \n          let matches: boolean;\n          if (Array.isArray(expectedClass)) {\n            matches = expectedClass.every(cls => classes.includes(cls));\n          } else if (expectedClass instanceof RegExp) {\n            matches = expectedClass.test(classAttr || '');\n          } else {\n            matches = classes.includes(expectedClass);\n          }\n          \n          return this.isNot ? !matches : matches;\n        },\n        timeout,\n        `期望${this.isNot ? '不' : ''}有类名 \"${expectedClass}\"`\n      );\n      \n      this.logger.debug(`✅ 类名${this.isNot ? '不' : ''}存在断言通过`);\n    } catch (error) {\n      const classAttr = await this.target.getAttribute('class');\n      throw new Error(`期望${this.isNot ? '不' : ''}有类名 \"${expectedClass}\"，但实际类名为 \"${classAttr}\"`);\n    }\n  }\n\n  /**\n   * 断言有 ID\n   */\n  async toHaveId(expectedId: string, options: ExpectMatcherOptions = {}): Promise<void> {\n    return this.toHaveAttribute('id', expectedId, options);\n  }\n\n  // =============== 数量断言 ===============\n\n  /**\n   * 断言数量\n   */\n  async toHaveCount(expectedCount: number, options: ExpectMatcherOptions = {}): Promise<void> {\n    const timeout = options.timeout || this.timeout;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const actualCount = await this.target.count();\n          const matches = actualCount === expectedCount;\n          return this.isNot ? !matches : matches;\n        },\n        timeout,\n        `期望数量${this.isNot ? '不' : ''}为 ${expectedCount}`\n      );\n      \n      this.logger.debug(`✅ 数量${this.isNot ? '不' : ''}匹配断言通过`);\n    } catch (error) {\n      const actualCount = await this.target.count();\n      throw new Error(`期望数量${this.isNot ? '不' : ''}为 ${expectedCount}，但实际数量为 ${actualCount}`);\n    }\n  }\n\n  // =============== URL 断言 ===============\n\n  /**\n   * 断言 URL\n   */\n  async toHaveURL(expectedUrl: string | RegExp, options: ExpectMatcherOptions = {}): Promise<void> {\n    const timeout = options.timeout || this.timeout;\n    \n    try {\n      await this.waitForCondition(\n        () => {\n          const currentUrl = window.location.href;\n          \n          let matches: boolean;\n          if (expectedUrl instanceof RegExp) {\n            matches = expectedUrl.test(currentUrl);\n          } else {\n            matches = currentUrl.includes(expectedUrl);\n          }\n          \n          return this.isNot ? !matches : matches;\n        },\n        timeout,\n        `期望 URL ${this.isNot ? '不' : ''}匹配 \"${expectedUrl}\"`\n      );\n      \n      this.logger.debug(`✅ URL ${this.isNot ? '不' : ''}匹配断言通过`);\n    } catch (error) {\n      const currentUrl = window.location.href;\n      throw new Error(`期望 URL ${this.isNot ? '不' : ''}匹配 \"${expectedUrl}\"，但当前 URL 为 \"${currentUrl}\"`);\n    }\n  }\n\n  /**\n   * 断言标题\n   */\n  async toHaveTitle(expectedTitle: string | RegExp, options: ExpectMatcherOptions = {}): Promise<void> {\n    const timeout = options.timeout || this.timeout;\n    \n    try {\n      await this.waitForCondition(\n        () => {\n          const currentTitle = document.title;\n          \n          let matches: boolean;\n          if (expectedTitle instanceof RegExp) {\n            matches = expectedTitle.test(currentTitle);\n          } else {\n            matches = currentTitle.includes(expectedTitle);\n          }\n          \n          return this.isNot ? !matches : matches;\n        },\n        timeout,\n        `期望标题${this.isNot ? '不' : ''}匹配 \"${expectedTitle}\"`\n      );\n      \n      this.logger.debug(`✅ 标题${this.isNot ? '不' : ''}匹配断言通过`);\n    } catch (error) {\n      const currentTitle = document.title;\n      throw new Error(`期望标题${this.isNot ? '不' : ''}匹配 \"${expectedTitle}\"，但当前标题为 \"${currentTitle}\"`);\n    }\n  }\n\n  // =============== 通用断言 ===============\n\n  /**\n   * 断言包含指定值（用于数组等）\n   */\n  toContain(expectedValue: any): void {\n    try {\n      let contains: boolean;\n      \n      if (Array.isArray(this.target)) {\n        contains = this.target.includes(expectedValue);\n      } else if (typeof this.target === 'string') {\n        contains = this.target.includes(expectedValue);\n      } else {\n        throw new Error('toContain 只支持数组或字符串类型');\n      }\n      \n      const shouldContain = !this.isNot;\n      if (contains !== shouldContain) {\n        throw new Error(`期望${shouldContain ? '' : '不'}包含 \"${expectedValue}\"`);\n      }\n      \n      this.logger.debug(`✅ 包含${shouldContain ? '' : '不'}断言通过`);\n    } catch (error) {\n      throw new Error(`期望${this.isNot ? '不' : ''}包含 \"${expectedValue}\"，但目标值为 ${JSON.stringify(this.target)}`);\n    }\n  }\n\n  // =============== 辅助方法 ===============\n\n  /**\n   * 等待条件满足\n   */\n  private async waitForCondition(\n    conditionFn: () => boolean | Promise<boolean>, \n    timeout: number, \n    description: string\n  ): Promise<void> {\n    const startTime = Date.now();\n    \n    const check = async (): Promise<void> => {\n      try {\n        const result = await conditionFn();\n        if (result) {\n          return;\n        }\n      } catch (error) {\n        // 继续等待\n      }\n\n      if (Date.now() - startTime >= timeout) {\n        throw new Error(`${description}超时 (${timeout}ms)`);\n      }\n\n      await new Promise(resolve => setTimeout(resolve, 100));\n      return check();\n    };\n\n    return check();\n  }\n}\n\n// 创建全局 expect 函数\nfunction createExpect() {\n  return function expect(target: any): ExpectAdapter {\n    return new ExpectAdapter(target);\n  };\n}\n\n// 扩展 Window 接口\ndeclare global {\n  interface Window {\n    PlaywrightExpectAdapter?: typeof ExpectAdapter;\n    PlaywrightExpect?: ReturnType<typeof createExpect>;\n    PlaywrightLogger?: any;\n  }\n}\n\n// 导出给浏览器使用\nif (typeof window !== 'undefined') {\n  window.PlaywrightExpectAdapter = ExpectAdapter;\n  window.PlaywrightExpect = createExpect();\n}\n\n// Node.js 环境\ndeclare const module: any;\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = { ExpectAdapter, createExpect };\n}\n\n// ES6 模块导出\nexport default ExpectAdapter;\nexport { createExpect };","import type { TestResult, Logger } from '../../types/index.js';\n\ninterface TestContext {\n  page: any; // TODO: Type this properly\n}\n\ninterface TestFunction {\n  (context: TestContext): Promise<void>;\n}\n\ninterface TestDefinition {\n  name: string;\n  fn: TestFunction;\n  run(): Promise<TestResult>;\n}\n\n/**\n * Playwright 运行时适配器\n * 模拟 @playwright/test 模块，让 Playwright 脚本能在浏览器中运行\n */\nclass PlaywrightRuntime {\n  private logger: Logger;\n\n  constructor() {\n    this.logger = new (window.PlaywrightLogger || console)() as Logger;\n    this.setupGlobalEnvironment();\n  }\n\n  /**\n   * 设置全局环境\n   */\n  setupGlobalEnvironment(): void {\n    // 模拟 @playwright/test 模块\n    window.PlaywrightTest = {\n      test: this.createTestFunction(),\n      expect: window.PlaywrightExpect || this.createExpectFunction()\n    };\n\n    // 设置模块系统\n    this.setupModuleSystem();\n    \n    this.logger.debug('Playwright 运行时环境初始化完成');\n  }\n\n  /**\n   * 创建 test 函数\n   */\n  createTestFunction(): (name: string, testFn: TestFunction) => TestDefinition {\n    const self = this;\n    \n    // 主 test 函数\n    function test(name: string, testFn: TestFunction): TestDefinition {\n      return {\n        name,\n        fn: testFn,\n        run: async (): Promise<TestResult> => {\n          const page = new window.PlaywrightPageAdapter();\n          const context: TestContext = { page };\n          const startTime = Date.now();\n\n          try {\n            self.logger.info(`🧪 开始测试: ${name}`);\n            \n            await testFn(context);\n            \n            const duration = Date.now() - startTime;\n            self.logger.success(`✅ 测试通过: ${name} (${duration}ms)`);\n            return { success: true, duration, name };\n          } catch (error) {\n            const duration = Date.now() - startTime;\n            self.logger.error(`❌ 测试失败: ${name} (${duration}ms)`, error);\n            return { \n              success: false, \n              duration, \n              name, \n              error: error as Error \n            };\n          }\n        }\n      };\n    }\n\n    // 为 test 函数添加方法\n    (test as any).skip = function(name: string, testFn: TestFunction): TestDefinition {\n      self.logger.info(`⏭️ 跳过测试: ${name}`);\n      return {\n        name,\n        fn: testFn,\n        run: async (): Promise<TestResult> => ({\n          success: true,\n          duration: 0,\n          name: `${name} (跳过)`\n        })\n      };\n    };\n\n    (test as any).only = function(name: string, testFn: TestFunction): TestDefinition {\n      // 在实际实现中，这会标记只运行这个测试\n      self.logger.info(`🎯 仅运行测试: ${name}`);\n      return test(name, testFn);\n    };\n\n    (test as any).fixme = function(name: string, testFn: TestFunction): TestDefinition {\n      self.logger.info(`🔧 修复中的测试: ${name}`);\n      return {\n        name,\n        fn: testFn,\n        run: async (): Promise<TestResult> => ({\n          success: true,\n          duration: 0,\n          name: `${name} (修复中)`\n        })\n      };\n    };\n\n    (test as any).describe = function(suiteName: string, suiteFn: () => void): void {\n      self.logger.info(`📁 测试套件: ${suiteName}`);\n      // 在实际实现中，这里会创建一个测试套件的作用域\n      suiteFn();\n    };\n\n    return test;\n  }\n\n  /**\n   * 创建 expect 函数（如果不存在）\n   */\n  createExpectFunction(): (target: any) => any {\n    return function expect(target: any) {\n      return new window.PlaywrightExpectAdapter(target);\n    };\n  }\n\n  /**\n   * 设置模块系统\n   */\n  setupModuleSystem(): void {\n    // 创建简单的模块加载器\n    if (!window.require) {\n      window.require = (moduleName: string) => {\n        switch (moduleName) {\n          case '@playwright/test':\n            return window.PlaywrightTest;\n          case 'expect':\n            return window.PlaywrightExpected || this.createExpectFunction();\n          default:\n            throw new Error(`模块 \"${moduleName}\" 未找到`);\n        }\n      };\n    }\n\n    // 设置导入/导出\n    if (!window.importFrom) {\n      const logger = this.logger;\n      window.importFrom = (moduleName: string, imports: string[]) => {\n        try {\n          const module = window.require!(moduleName);\n          const result: Record<string, any> = {};\n          \n          imports.forEach(importName => {\n            if (module && module[importName] !== undefined) {\n              result[importName] = module[importName];\n            } else if (module && importName === 'default') {\n              result[importName] = module;\n            } else {\n              logger.warn(`无法从模块 \"${moduleName}\" 找到导出 \"${importName}\"，使用默认值`);\n              // 对于 @playwright/test，提供默认实现\n              if (moduleName === '@playwright/test') {\n                if (importName === 'test') {\n                  result[importName] = window.PlaywrightTest?.test;\n                } else if (importName === 'expect') {\n                  result[importName] = window.PlaywrightTest?.expect;\n                }\n              }\n            }\n          });\n          \n          return result;\n        } catch (error) {\n          logger.error(`模块导入失败: ${moduleName}`, error);\n          throw error;\n        }\n      };\n    }\n\n    this.logger.debug('模块系统设置完成');\n  }\n\n  /**\n   * 预处理脚本内容，转换 ES6 import 语法\n   */\n  private preprocessScript(scriptContent: string): string {\n    // 简单地移除 import 语句，因为我们通过 Function 参数提供了这些函数\n    let processedContent = scriptContent.replace(\n      /import\\s*\\{\\s*[^}]+\\s*\\}\\s*from\\s*['\"]@playwright\\/test['\"];?\\s*\\n?/g,\n      ''\n    );\n\n    // 移除其他形式的 import 语句\n    processedContent = processedContent.replace(\n      /import\\s*\\*\\s*as\\s*\\w+\\s*from\\s*['\"]@playwright\\/test['\"];?\\s*\\n?/g,\n      ''\n    );\n\n    processedContent = processedContent.replace(\n      /import\\s+\\w+\\s+from\\s*['\"]@playwright\\/test['\"];?\\s*\\n?/g,\n      ''\n    );\n\n    return processedContent;\n  }\n\n  /**\n   * 执行脚本代码\n   */\n  async executeScript(scriptContent: string, scriptName: string = 'inline'): Promise<TestResult[]> {\n    const results: TestResult[] = [];\n    const tests: TestDefinition[] = [];\n\n    try {\n      // 保存原始的 test 函数\n      const originalTest = window.PlaywrightTest?.test;\n      \n      // 重写 test 函数来收集测试\n      if (window.PlaywrightTest) {\n        window.PlaywrightTest.test = (name: string, testFn: TestFunction) => {\n          const testDef = originalTest!(name, testFn);\n          tests.push(testDef);\n          return testDef;\n        };\n      }\n\n      // 准备执行环境\n      const context = this.createExecutionContext();\n      \n      // 执行脚本\n      this.logger.info(`📄 执行脚本: ${scriptName}`);\n      \n      // 预处理脚本内容\n      const processedContent = this.preprocessScript(scriptContent);\n      \n      // 使用 Function 构造器执行脚本，避免 eval 的作用域问题\n      const scriptFunction = new Function(\n        'test', 'expect', 'require', 'importFrom',\n        processedContent\n      );\n\n      scriptFunction(\n        window.PlaywrightTest?.test,\n        window.PlaywrightTest?.expect,\n        window.require,\n        window.importFrom\n      );\n\n      // 恢复原始的 test 函数\n      if (window.PlaywrightTest && originalTest) {\n        window.PlaywrightTest.test = originalTest;\n      }\n\n      // 运行收集到的测试\n      for (const test of tests) {\n        const result = await test.run();\n        results.push(result);\n      }\n\n      this.logger.info(`📊 脚本执行完成: ${tests.length} 个测试`);\n      \n    } catch (error) {\n      this.logger.error(`❌ 脚本执行失败: ${scriptName}`, error);\n      results.push({\n        success: false,\n        duration: 0,\n        name: `脚本执行: ${scriptName}`,\n        error: error as Error\n      });\n    }\n\n    return results;\n  }\n\n  /**\n   * 创建执行上下文\n   */\n  private createExecutionContext(): Record<string, any> {\n    return {\n      console,\n      window,\n      document,\n      setTimeout,\n      setInterval,\n      clearTimeout,\n      clearInterval,\n      Promise,\n      fetch: window.fetch,\n      // Playwright 相关\n      test: window.PlaywrightTest?.test,\n      expect: window.PlaywrightTest?.expect,\n      require: window.require,\n      importFrom: window.importFrom\n    };\n  }\n\n  /**\n   * 清理资源\n   */\n  cleanup(): void {\n    // 清理全局变量\n    delete window.PlaywrightTest;\n    delete window.require;\n    delete window.importFrom;\n    \n    this.logger.debug('Playwright 运行时清理完成');\n  }\n}\n\n// 扩展 Window 接口\ndeclare global {\n  interface Window {\n    PlaywrightRuntime?: typeof PlaywrightRuntime;\n    PlaywrightTest?: {\n      test: any;\n      expect: any;\n    };\n    PlaywrightExpected?: any;\n    PlaywrightExpectAdapter?: any;\n    PlaywrightPageAdapter?: any;\n    PlaywrightLogger?: any;\n    require?: (moduleName: string) => any;\n    importFrom?: (moduleName: string, imports: string[]) => Record<string, any>;\n  }\n}\n\n// 导出给浏览器使用\nif (typeof window !== 'undefined') {\n  window.PlaywrightRuntime = PlaywrightRuntime;\n}\n\n// Node.js 环境\ndeclare const module: any;\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = PlaywrightRuntime;\n}\n\n// ES6 模块导出\nexport default PlaywrightRuntime;","interface TestRunnerOptions {\n  timeout?: number;\n  retries?: number;\n  [key: string]: any;\n}\n\ninterface TestResult {\n  success: boolean;\n  skipped?: boolean;\n  [key: string]: any;\n}\n\ninterface ScriptExecutionResult {\n  scriptName: string;\n  duration: number;\n  results: TestResult[];\n  success: boolean;\n  error?: Error;\n}\n\ninterface BatchStats {\n  scripts: {\n    total: number;\n    passed: number;\n    failed: number;\n  };\n  tests: {\n    total: number;\n    passed: number;\n    failed: number;\n    skipped: number;\n  };\n  duration: number;\n}\n\ninterface GlobalHooks {\n  beforeAll?: () => void | Promise<void>;\n  afterAll?: () => void | Promise<void>;\n  beforeEach?: () => void | Promise<void>;\n  afterEach?: () => void | Promise<void>;\n}\n\ndeclare global {\n  interface Window {\n    PlaywrightRuntime?: any;\n    PlaywrightLogger?: any;\n    PlaywrightTest?: {\n      test: {\n        beforeAll: (fn: () => void | Promise<void>) => void;\n        afterAll: (fn: () => void | Promise<void>) => void;\n        beforeEach: (fn: () => void | Promise<void>) => void;\n        afterEach: (fn: () => void | Promise<void>) => void;\n        _beforeAllHooks: any[];\n        _afterAllHooks: any[];\n        _beforeEachHooks: any[];\n        _afterEachHooks: any[];\n      };\n    };\n    PlaywrightTestRunner?: typeof TestRunner;\n  }\n}\n\nexport default class TestRunner {\n  private runtime: any;\n  private logger: any;\n  private options: TestRunnerOptions;\n\n  constructor(options: TestRunnerOptions = {}) {\n    this.runtime = new (window.PlaywrightRuntime || (globalThis as any).PlaywrightRuntime)();\n    this.logger = new (window.PlaywrightLogger || console)();\n    this.options = {\n      timeout: 30000,\n      retries: 0,\n      ...options\n    };\n  }\n\n  /**\n   * 从文件加载并执行脚本\n   */\n  async loadAndRun(scriptPath: string): Promise<ScriptExecutionResult> {\n    try {\n      this.logger.info(`📂 加载脚本: ${scriptPath}`);\n      const response = await fetch(scriptPath);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      \n      const scriptContent = await response.text();\n      return await this.runScript(scriptContent, scriptPath);\n    } catch (error) {\n      this.logger.error(`脚本加载失败: ${scriptPath}`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * 直接执行脚本字符串\n   */\n  async runScript(scriptContent: string, scriptName: string = 'inline-script'): Promise<ScriptExecutionResult> {\n    try {\n      this.logger.info(`🚀 执行脚本: ${scriptName}`);\n      const startTime = Date.now();\n      \n      const results: TestResult[] = await this.runtime.executeScript(scriptContent);\n      \n      const duration = Date.now() - startTime;\n      this.logger.success(`✅ 脚本执行完成: ${scriptName} (${duration}ms)`);\n      \n      return {\n        scriptName,\n        duration,\n        results,\n        success: results.every(r => r.success || r.skipped)\n      };\n    } catch (error) {\n      this.logger.error(`脚本执行失败: ${scriptName}`, error);\n      return {\n        scriptName,\n        duration: 0,\n        results: [],\n        success: false,\n        error: error as Error\n      };\n    }\n  }\n\n  /**\n   * 执行多个脚本文件\n   */\n  async runScripts(scriptPaths: string[]): Promise<ScriptExecutionResult[]> {\n    const allResults: ScriptExecutionResult[] = [];\n    \n    this.logger.info(`📦 批量执行 ${scriptPaths.length} 个脚本`);\n    \n    for (const path of scriptPaths) {\n      try {\n        const result = await this.loadAndRun(path);\n        allResults.push(result);\n      } catch (error) {\n        allResults.push({\n          scriptName: path,\n          duration: 0,\n          results: [],\n          success: false,\n          error: error as Error\n        });\n      }\n    }\n    \n    // 输出批量执行总结\n    this.printBatchSummary(allResults);\n    \n    return allResults;\n  }\n\n  /**\n   * 从目录批量加载脚本\n   */\n  async runScriptsFromPattern(pattern: string): Promise<never> {\n    // 浏览器环境中无法直接读取文件系统\n    // 这里提供一个基础实现，需要服务器支持\n    this.logger.warn('浏览器环境中无法直接扫描文件系统，请使用 runScripts() 方法');\n    throw new Error('浏览器环境不支持文件系统扫描');\n  }\n\n  /**\n   * 设置全局钩子\n   */\n  setGlobalHooks(hooks: GlobalHooks): void {\n    const { beforeAll, afterAll, beforeEach, afterEach } = hooks;\n    const test = window.PlaywrightTest?.test;\n    \n    if (!test) {\n      throw new Error('PlaywrightTest.test 未找到');\n    }\n    \n    if (beforeAll) test.beforeAll(beforeAll);\n    if (afterAll) test.afterAll(afterAll);\n    if (beforeEach) test.beforeEach(beforeEach);\n    if (afterEach) test.afterEach(afterEach);\n    \n    this.logger.debug('全局钩子设置完成');\n  }\n\n  /**\n   * 设置全局配置\n   */\n  configure(config: Partial<TestRunnerOptions>): void {\n    this.options = { ...this.options, ...config };\n    this.logger.debug('测试配置更新:', this.options);\n  }\n\n  /**\n   * 打印批量执行总结\n   */\n  printBatchSummary(results: ScriptExecutionResult[]): void {\n    const totalScripts = results.length;\n    const successfulScripts = results.filter(r => r.success).length;\n    const failedScripts = results.filter(r => !r.success).length;\n    \n    const totalTests = results.reduce((sum, r) => sum + r.results.length, 0);\n    const passedTests = results.reduce((sum, r) => \n      sum + r.results.filter(test => test.success).length, 0\n    );\n    const failedTests = results.reduce((sum, r) => \n      sum + r.results.filter(test => !test.success && !test.skipped).length, 0\n    );\n    const skippedTests = results.reduce((sum, r) => \n      sum + r.results.filter(test => test.skipped).length, 0\n    );\n    \n    const totalDuration = results.reduce((sum, r) => sum + r.duration, 0);\n    \n    this.logger.info(`\n🎯 批量执行总结:\n📄 脚本统计:\n   ✅ 成功: ${successfulScripts}/${totalScripts}\n   ❌ 失败: ${failedScripts}/${totalScripts}\n\n🧪 测试统计:\n   ✅ 通过: ${passedTests}\n   ❌ 失败: ${failedTests}\n   ⏭️ 跳过: ${skippedTests}\n   📊 总计: ${totalTests}\n\n⏱️ 总耗时: ${totalDuration}ms\n    `);\n    \n    if (failedScripts > 0) {\n      this.logger.error('失败的脚本:');\n      results.filter(r => !r.success).forEach(r => {\n        this.logger.error(`  - ${r.scriptName}: ${r.error?.message || '未知错误'}`);\n      });\n    }\n  }\n\n  /**\n   * 获取执行统计\n   */\n  getStats(results: ScriptExecutionResult[] | ScriptExecutionResult): BatchStats | Omit<BatchStats, 'scripts'> {\n    if (Array.isArray(results) && results[0]?.results) {\n      // 批量执行结果\n      return {\n        scripts: {\n          total: results.length,\n          passed: results.filter(r => r.success).length,\n          failed: results.filter(r => !r.success).length\n        },\n        tests: {\n          total: results.reduce((sum, r) => sum + r.results.length, 0),\n          passed: results.reduce((sum, r) => \n            sum + r.results.filter(test => test.success).length, 0\n          ),\n          failed: results.reduce((sum, r) => \n            sum + r.results.filter(test => !test.success && !test.skipped).length, 0\n          ),\n          skipped: results.reduce((sum, r) => \n            sum + r.results.filter(test => test.skipped).length, 0\n          )\n        },\n        duration: results.reduce((sum, r) => sum + r.duration, 0)\n      };\n    } else {\n      // 单个脚本执行结果\n      const singleResult = results as ScriptExecutionResult;\n      return {\n        tests: {\n          total: singleResult.results?.length || 0,\n          passed: singleResult.results?.filter(test => test.success).length || 0,\n          failed: singleResult.results?.filter(test => !test.success && !test.skipped).length || 0,\n          skipped: singleResult.results?.filter(test => test.skipped).length || 0\n        },\n        duration: singleResult.duration || 0\n      };\n    }\n  }\n\n  /**\n   * 清理资源\n   */\n  cleanup(): void {\n    // 清理全局钩子\n    const test = window.PlaywrightTest?.test;\n    if (test) {\n      test._beforeAllHooks = [];\n      test._afterAllHooks = [];\n      test._beforeEachHooks = [];\n      test._afterEachHooks = [];\n    }\n    \n    this.logger.debug('测试运行器清理完成');\n  }\n}\n\n// 导出给浏览器使用\nif (typeof window !== 'undefined') {\n  (window as any).PlaywrightTestRunner = TestRunner;\n}","/**\n * Playwright 执行引擎主入口文件\n * 将所有组件组合并导出统一的 API\n */\n\nimport type { \n  PlaywrightExecutionEngineOptions, \n  ScriptExecutionResult,\n  TestResult\n} from '../types/index.js';\n\n// 导入所有依赖模块\nimport PlaywrightLogger from './utils/logger.js';\nimport PlaywrightWaitManager from './dom/wait-manager.js';\nimport PlaywrightEventSimulator from './dom/event-simulator.js';\nimport PlaywrightLocatorAdapter from './adapters/locator-adapter.js';\nimport PlaywrightPageAdapter from './adapters/page-adapter.js';\nimport PlaywrightExpectAdapter, { createExpect } from './adapters/expect-adapter.js';\nimport PlaywrightRuntime from './runtime/playwright-runtime.js';\nimport PlaywrightTestRunner from './runtime/test-runner.js';\n\n// 确保所有依赖都已加载\nfunction ensureDependencies(): void {\n  const dependencies = {\n    PlaywrightLogger,\n    PlaywrightWaitManager, \n    PlaywrightEventSimulator,\n    PlaywrightLocatorAdapter,\n    PlaywrightPageAdapter,\n    PlaywrightExpectAdapter,\n    createExpect,\n    PlaywrightRuntime,\n    PlaywrightTestRunner\n  };\n  \n  const missing = Object.entries(dependencies)\n    .filter(([name, component]) => !component)\n    .map(([name]) => name);\n  \n  if (missing.length > 0) {\n    console.warn('缺少依赖:', missing);\n  }\n}\n\n/**\n * Playwright 执行引擎主类\n */\nclass PlaywrightExecutionEngine {\n  private options: Required<PlaywrightExecutionEngineOptions>;\n  private logger: PlaywrightLogger;\n  private runtime: any; // TODO: Type this\n  private testRunner: any; // TODO: Type this\n\n  constructor(options: PlaywrightExecutionEngineOptions = {}) {\n    ensureDependencies();\n    \n    this.options = {\n      logLevel: 'info',\n      timeout: 30000,\n      ...options\n    };\n    \n    // 初始化组件\n    this.logger = new PlaywrightLogger(this.options.logLevel);\n    this.runtime = new PlaywrightRuntime();\n    this.testRunner = new PlaywrightTestRunner(this.options);\n    \n    this.logger.info('Playwright 执行引擎初始化完成');\n  }\n\n  /**\n   * 执行脚本字符串\n   */\n  async runScript(scriptContent: string, scriptName: string = 'inline'): Promise<ScriptExecutionResult> {\n    return await this.testRunner.runScript(scriptContent, scriptName);\n  }\n\n  /**\n   * 加载并执行脚本文件\n   */\n  async loadAndRun(scriptPath: string): Promise<ScriptExecutionResult> {\n    return await this.testRunner.loadAndRun(scriptPath);\n  }\n\n  /**\n   * 批量执行脚本文件\n   */\n  async runScripts(scriptPaths: string[]): Promise<ScriptExecutionResult[]> {\n    return await this.testRunner.runScripts(scriptPaths);\n  }\n\n  /**\n   * 创建新的 Page 实例\n   */\n  createPage(): PlaywrightPageAdapter {\n    return new PlaywrightPageAdapter();\n  }\n\n  /**\n   * 获取 Page 实例（createPage 的别名）\n   */\n  getPage(): PlaywrightPageAdapter {\n    return this.createPage();\n  }\n\n  /**\n   * 创建 expect 实例\n   */\n  expect(target: any): PlaywrightExpectAdapter {\n    return createExpect()(target);\n  }\n\n  /**\n   * 设置全局配置\n   */\n  configure(config: Partial<PlaywrightExecutionEngineOptions>): this {\n    this.options = { ...this.options, ...config };\n    this.testRunner.configure(config);\n    return this;\n  }\n\n  /**\n   * 设置全局钩子\n   */\n  setHooks(hooks: any): this { // TODO: Type this\n    this.testRunner.setGlobalHooks(hooks);\n    return this;\n  }\n\n  /**\n   * 获取执行统计\n   */\n  getStats(results: TestResult[]): any { // TODO: Type this\n    return this.testRunner.getStats(results);\n  }\n\n  /**\n   * 清理资源\n   */\n  cleanup(): void {\n    this.testRunner.cleanup();\n  }\n\n  /**\n   * 获取版本信息\n   */\n  static getVersion(): string {\n    return typeof __VERSION__ !== 'undefined' ? __VERSION__ : '1.0.0-beta';\n  }\n\n  /**\n   * 检查浏览器兼容性\n   */\n  static checkCompatibility(): boolean {\n    const features = {\n      'Promises': typeof Promise !== 'undefined',\n      'async/await': (async () => {})().constructor === Promise,\n      'Fetch API': typeof fetch !== 'undefined',\n      'MutationObserver': typeof MutationObserver !== 'undefined',\n      'querySelector': typeof document.querySelector !== 'undefined',\n      'addEventListener': typeof document.addEventListener !== 'undefined'\n    };\n    \n    const unsupported = Object.entries(features)\n      .filter(([feature, supported]) => !supported)\n      .map(([feature]) => feature);\n    \n    if (unsupported.length > 0) {\n      console.warn('浏览器不支持以下功能:', unsupported);\n      return false;\n    }\n    \n    return true;\n  }\n\n  /**\n   * 静态工厂方法\n   */\n  static create(options?: PlaywrightExecutionEngineOptions): PlaywrightExecutionEngine {\n    if (!PlaywrightExecutionEngine.checkCompatibility()) {\n      throw new Error('当前浏览器不支持 Playwright 执行引擎');\n    }\n    \n    return new PlaywrightExecutionEngine(options);\n  }\n\n  /**\n   * 快捷执行方法\n   */\n  static async run(script: string, options: PlaywrightExecutionEngineOptions = {}): Promise<ScriptExecutionResult> {\n    const engine = PlaywrightExecutionEngine.create(options);\n    return await engine.runScript(script);\n  }\n\n  /**\n   * 快捷加载方法\n   */\n  static async load(scriptPath: string, options: PlaywrightExecutionEngineOptions = {}): Promise<ScriptExecutionResult> {\n    const engine = PlaywrightExecutionEngine.create(options);\n    return await engine.loadAndRun(scriptPath);\n  }\n\n  /**\n   * 导出核心组件（供高级用户使用）\n   */\n  static Components = {\n    Logger: PlaywrightLogger,\n    WaitManager: PlaywrightWaitManager,\n    EventSimulator: PlaywrightEventSimulator,\n    PageAdapter: PlaywrightPageAdapter,\n    LocatorAdapter: PlaywrightLocatorAdapter,\n    ExpectAdapter: PlaywrightExpectAdapter,\n    Runtime: PlaywrightRuntime,\n    TestRunner: PlaywrightTestRunner\n  };\n}\n\n// 声明全局变量\ndeclare global {\n  const __VERSION__: string;\n  \n  interface Window {\n    PlaywrightExecutionEngine?: typeof PlaywrightExecutionEngine;\n    PWEngine?: typeof PlaywrightExecutionEngine;\n    runPlaywrightScript?: typeof PlaywrightExecutionEngine.run;\n    loadPlaywrightScript?: typeof PlaywrightExecutionEngine.load;\n  }\n}\n\n// 全局导出（仅在浏览器环境）\nif (typeof window !== 'undefined') {\n  window.PlaywrightExecutionEngine = PlaywrightExecutionEngine;\n  \n  // 兼容性别名\n  window.PWEngine = PlaywrightExecutionEngine;\n  \n  // 快捷全局方法\n  window.runPlaywrightScript = PlaywrightExecutionEngine.run;\n  window.loadPlaywrightScript = PlaywrightExecutionEngine.load;\n  \n  console.log('🎭 Playwright 执行引擎已加载完成');\n  console.log('版本:', PlaywrightExecutionEngine.getVersion());\n  console.log('使用方法: new PlaywrightExecutionEngine() 或 PlaywrightExecutionEngine.create()');\n}\n\n// ES6 模块默认导出\nexport default PlaywrightExecutionEngine;\n\n// 命名导出\nexport {\n  PlaywrightLogger,\n  PlaywrightWaitManager,\n  PlaywrightEventSimulator,\n  PlaywrightLocatorAdapter,\n  PlaywrightPageAdapter,\n  PlaywrightExpectAdapter,\n  createExpect,\n  PlaywrightRuntime,\n  PlaywrightTestRunner\n};"],"names":["Logger","constructor","level","this","levels","debug","info","warn","error","message","args","console","success","log","window","PlaywrightLogger","WaitManager","defaultTimeout","logger","querySelector","selector","startsWith","xpath","substring","document","evaluate","XPathResult","FIRST_ORDERED_NODE_TYPE","singleNodeValue","waitForElement","_0","__async","arguments","timeout","Promise","resolve","reject","startTime","Date","now","existing","timeoutId","observer","cleanup","disconnect","setTimeout","Error","MutationObserver","element","elapsed","observe","body","childList","subtree","attributes","waitForCondition","conditionFn","errorMessage","check","result","waitForFunction","fn","waitForURL","urlPattern","currentUrl","location","href","includes","RegExp","test","waitForLoadState","state","checkState","readyState","addEventListener","once","waitForTimeout","ms","PlaywrightWaitManager","module","exports","EventSimulator","simulateClick","options","button","clickCount","delay","focus","forEach","eventType","index","event","MouseEvent","view","bubbles","cancelable","detail","dispatchEvent","simulateDoubleClick","dblClickEvent","simulateHover","simulateKeyPress","key","ctrlKey","shiftKey","altKey","metaKey","keydownEvent","KeyboardEvent","code","getKeyCode","tagName","handleNavigationKey","keypressEvent","keyupEvent","start","selectionStart","end","selectionEnd","value","setSelectionRange","length","newPos","Math","max","min","slice","Event","simulateTyping","_1","text","i","char","currentValue","newValue","newCursorPos","simulateFormChange","type","checked","Enter","Escape","Tab","Backspace","Delete","Home","End","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","scrollIntoView","behavior","block","PlaywrightEventSimulator","LocatorAdapter","page","filters","waitManager","eventSimulator","filter","newLocator","first","nth","last","position","n","locator","combinedSelector","combineSelectorWithParent","childSelector","childXpath","cssSelectorToXPath","cssSelector","endsWith","attrMatch","match","attrExistsMatch","getByText","hasText","exact","click","getElement","scrollIntoViewIfNeeded","dblclick","fill","press","pressSequentially","hover","uncheck","selectOption","values","Array","isArray","from","option","selected","isVisible","rect","getBoundingClientRect","style","getComputedStyle","width","height","visibility","display","offsetParent","isHidden","isEnabled","disabled","hasAttribute","isDisabled","isChecked","textContent","innerText","innerHTML","getAttribute","name","inputValue","waitFor","waitForVisible","waitForHidden","waitForAttached","waitForDetached","count","queryElements","ORDERED_NODE_SNAPSHOT_TYPE","elements","snapshotLength","snapshotItem","push","querySelectorAll","applyFilters","all","map","buildUniqueSelector","_element","contains","filteredElements","filtered","applyFilter","hasNotText","id","path","current","toLowerCase","className","classes","split","cls","trim","join","siblings","_a","parentNode","children","child","indexOf","unshift","parentElement","PlaywrightLocatorAdapter","PageAdapter","goto","url","waitUntil","status","goBack","history","back","goForward","forward","reload","title","content","documentElement","outerHTML","waitForSelector","LocatorAdapterClass","getByRole","role","baseSelector","implicitRoles","link","textbox","combobox","checkbox","radio","heading","xpathParts","tag","attrPart","attr","replace","attrName","attrValue","cleanAttrName","cleanAttrValue","part","getByLabel","getByPlaceholder","getByTestId","testId","getByTitle","waitForXPath","actualSelector","requiredState","arg","apply","evaluateHandle","addScriptTag","script","createElement","src","head","appendChild","onload","onerror","addStyleTag","rel","top","bottom","innerHeight","left","right","innerWidth","boundingBox","x","scrollX","y","scrollY","setViewportSize","size","viewportSize","PlaywrightPageAdapter","ExpectAdapter","target","isNot","not","newExpect","toBeVisible","expected","actualVisible","toBeHidden","toBeEnabled","actualEnabled","toBeDisabled","toBeChecked","actualChecked","toHaveText","expectedText","useInnerText","actualText","matches","every","toHaveExactText","toContainText","toHaveAttribute","actualValue","toHaveValue","expectedValue","toHaveClass","expectedClass","classAttr","toHaveId","expectedId","toHaveCount","expectedCount","actualCount","toHaveURL","expectedUrl","toHaveTitle","expectedTitle","currentTitle","toContain","shouldContain","JSON","stringify","description","createExpect","PlaywrightExpectAdapter","PlaywrightExpect","PlaywrightRuntime","setupGlobalEnvironment","PlaywrightTest","createTestFunction","expect","createExpectFunction","setupModuleSystem","self","testFn","run","context","duration","skip","only","fixme","describe","suiteName","suiteFn","require","moduleName","PlaywrightExpected","importFrom","imports","importName","_b","preprocessScript","scriptContent","processedContent","executeScript","scriptName","results","tests","originalTest","testDef","createExecutionContext","Function","scriptFunction","_c","setInterval","clearTimeout","clearInterval","fetch","TestRunner","runtime","globalThis","__spreadValues","retries","loadAndRun","scriptPath","response","ok","statusText","runScript","r","skipped","runScripts","scriptPaths","allResults","printBatchSummary","runScriptsFromPattern","pattern","setGlobalHooks","hooks","beforeAll","afterAll","beforeEach","afterEach","configure","config","totalScripts","successfulScripts","failedScripts","totalTests","reduce","sum","passedTests","failedTests","skippedTests","totalDuration","getStats","scripts","total","passed","failed","singleResult","_d","_e","_beforeAllHooks","_afterAllHooks","_beforeEachHooks","_afterEachHooks","PlaywrightTestRunner","_PlaywrightExecutionEngine","dependencies","missing","Object","entries","component","ensureDependencies","logLevel","testRunner","createPage","getPage","setHooks","getVersion","checkCompatibility","features","Promises","unsupported","feature","supported","create","engine","load","Components","Runtime","PlaywrightExecutionEngine","PWEngine","runPlaywrightScript","loadPlaywrightScript"],"mappings":"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"}