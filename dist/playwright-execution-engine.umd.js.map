{"version":3,"file":"playwright-execution-engine.umd.js","sources":["../src/utils/logger.js","../src/dom/wait-manager.js","../src/dom/event-simulator.js","../src/adapters/locator-adapter.js","../src/adapters/page-adapter.js","../src/adapters/expect-adapter.js","../src/runtime/playwright-runtime.js","../src/runtime/test-runner.js","../src/index.js"],"sourcesContent":["/**\n * 简单的日志系统\n */\nclass Logger {\n  constructor(level = 'info') {\n    this.level = level;\n    this.levels = {\n      debug: 0,\n      info: 1,\n      warn: 2,\n      error: 3\n    };\n  }\n\n  debug(message, ...args) {\n    if (this.levels[this.level] <= this.levels.debug) {\n      console.debug(`[DEBUG] ${message}`, ...args);\n    }\n  }\n\n  info(message, ...args) {\n    if (this.levels[this.level] <= this.levels.info) {\n      console.info(`[INFO] ${message}`, ...args);\n    }\n  }\n\n  warn(message, ...args) {\n    if (this.levels[this.level] <= this.levels.warn) {\n      console.warn(`[WARN] ${message}`, ...args);\n    }\n  }\n\n  error(message, ...args) {\n    if (this.levels[this.level] <= this.levels.error) {\n      console.error(`[ERROR] ${message}`, ...args);\n    }\n  }\n\n  success(message, ...args) {\n    if (this.levels[this.level] <= this.levels.info) {\n      console.log(`%c[SUCCESS] ${message}`, 'color: green', ...args);\n    }\n  }\n}\n\n// 导出给浏览器使用\nif (typeof window !== 'undefined') {\n  window.PlaywrightLogger = Logger;\n}\n\n// Node.js 环境\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = Logger;\n}\n\n// ES6 模块导出\nexport default Logger;","/**\n * 等待管理器 - 处理各种等待机制\n */\nclass WaitManager {\n  constructor() {\n    this.defaultTimeout = 30000;\n    this.logger = new (window.PlaywrightLogger || console)();\n  }\n\n  /**\n   * 等待元素出现\n   */\n  async waitForElement(selector, timeout = this.defaultTimeout) {\n    return new Promise((resolve, reject) => {\n      const startTime = Date.now();\n      \n      // 立即检查\n      const existing = document.querySelector(selector);\n      if (existing) {\n        this.logger.debug(`元素立即找到: ${selector}`);\n        return resolve(existing);\n      }\n\n      let timeoutId;\n      let observer;\n\n      const cleanup = () => {\n        if (timeoutId) clearTimeout(timeoutId);\n        if (observer) observer.disconnect();\n      };\n\n      // 设置超时\n      timeoutId = setTimeout(() => {\n        cleanup();\n        reject(new Error(`等待元素超时: ${selector} (${timeout}ms)`));\n      }, timeout);\n\n      // 监听 DOM 变化\n      observer = new MutationObserver(() => {\n        const element = document.querySelector(selector);\n        if (element) {\n          cleanup();\n          const elapsed = Date.now() - startTime;\n          this.logger.debug(`元素找到: ${selector} (${elapsed}ms)`);\n          resolve(element);\n        }\n      });\n\n      observer.observe(document.body, {\n        childList: true,\n        subtree: true,\n        attributes: true\n      });\n    });\n  }\n\n  /**\n   * 等待条件满足\n   */\n  async waitForCondition(conditionFn, timeout = this.defaultTimeout, errorMessage = '等待条件超时') {\n    return new Promise((resolve, reject) => {\n      const startTime = Date.now();\n      \n      const check = async () => {\n        try {\n          const result = await conditionFn();\n          if (result) {\n            const elapsed = Date.now() - startTime;\n            this.logger.debug(`条件满足 (${elapsed}ms)`);\n            resolve(result);\n            return;\n          }\n        } catch (error) {\n          // 继续等待，忽略错误\n          this.logger.debug('条件检查出错，继续等待:', error.message);\n        }\n\n        if (Date.now() - startTime >= timeout) {\n          reject(new Error(`${errorMessage} (${timeout}ms)`));\n          return;\n        }\n\n        setTimeout(check, 100);\n      };\n\n      check();\n    });\n  }\n\n  /**\n   * 等待函数返回真值\n   */\n  async waitForFunction(fn, timeout = this.defaultTimeout) {\n    return this.waitForCondition(fn, timeout, '等待函数条件超时');\n  }\n\n  /**\n   * 等待 URL 变化\n   */\n  async waitForURL(urlPattern, timeout = this.defaultTimeout) {\n    return this.waitForCondition(\n      () => {\n        const currentUrl = window.location.href;\n        if (typeof urlPattern === 'string') {\n          return currentUrl.includes(urlPattern);\n        }\n        if (urlPattern instanceof RegExp) {\n          return urlPattern.test(currentUrl);\n        }\n        return false;\n      },\n      timeout,\n      `等待URL变化超时: ${urlPattern}`\n    );\n  }\n\n  /**\n   * 等待页面加载状态\n   */\n  async waitForLoadState(state = 'load') {\n    return new Promise((resolve) => {\n      const checkState = () => {\n        if (state === 'load' && document.readyState === 'complete') {\n          this.logger.debug('页面完全加载');\n          resolve();\n        } else if (state === 'domcontentloaded' && document.readyState !== 'loading') {\n          this.logger.debug('DOM 内容加载完成');\n          resolve();\n        } else if (state === 'networkidle') {\n          // 简单实现：等待 500ms 无网络请求\n          setTimeout(() => {\n            this.logger.debug('网络空闲');\n            resolve();\n          }, 500);\n        }\n      };\n\n      if (document.readyState === 'complete' && state === 'load') {\n        resolve();\n      } else if (document.readyState !== 'loading' && state === 'domcontentloaded') {\n        resolve();\n      } else {\n        document.addEventListener('readystatechange', checkState, { once: true });\n      }\n    });\n  }\n\n  /**\n   * 简单延时\n   */\n  async waitForTimeout(ms) {\n    this.logger.debug(`等待 ${ms}ms`);\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n}\n\n// 导出给浏览器使用\nif (typeof window !== 'undefined') {\n  window.PlaywrightWaitManager = WaitManager;\n}\n\n// Node.js 环境\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = WaitManager;\n}\n\n// ES6 模块导出\nexport default WaitManager;","/**\n * 事件模拟器 - 模拟各种用户交互事件\n */\nclass EventSimulator {\n  constructor() {\n    this.logger = new (window.PlaywrightLogger || console)();\n  }\n\n  /**\n   * 模拟点击事件\n   */\n  simulateClick(element, options = {}) {\n    const { button = 0, clickCount = 1, delay = 0 } = options;\n    \n    // 确保元素获得焦点\n    element.focus();\n\n    // 触发完整的鼠标事件序列\n    const mouseEvents = ['mousedown', 'mouseup', 'click'];\n    \n    mouseEvents.forEach((eventType, index) => {\n      setTimeout(() => {\n        const event = new MouseEvent(eventType, {\n          view: window,\n          bubbles: true,\n          cancelable: true,\n          button: button,\n          detail: clickCount\n        });\n        \n        element.dispatchEvent(event);\n        this.logger.debug(`触发 ${eventType} 事件`);\n      }, delay * index);\n    });\n  }\n\n  /**\n   * 模拟双击事件\n   */\n  simulateDoubleClick(element) {\n    this.simulateClick(element, { clickCount: 1 });\n    \n    setTimeout(() => {\n      const dblClickEvent = new MouseEvent('dblclick', {\n        view: window,\n        bubbles: true,\n        cancelable: true,\n        detail: 2\n      });\n      element.dispatchEvent(dblClickEvent);\n      this.logger.debug('触发 dblclick 事件');\n    }, 100);\n  }\n\n  /**\n   * 模拟悬停事件\n   */\n  simulateHover(element) {\n    const events = ['mouseover', 'mouseenter'];\n    \n    events.forEach(eventType => {\n      const event = new MouseEvent(eventType, {\n        view: window,\n        bubbles: true,\n        cancelable: true\n      });\n      element.dispatchEvent(event);\n      this.logger.debug(`触发 ${eventType} 事件`);\n    });\n  }\n\n  /**\n   * 模拟键盘事件\n   */\n  simulateKeyPress(element, key, options = {}) {\n    const { ctrlKey = false, shiftKey = false, altKey = false, metaKey = false } = options;\n    \n    element.focus();\n    \n    const keyboardEvents = ['keydown', 'keypress', 'keyup'];\n    \n    keyboardEvents.forEach(eventType => {\n      const event = new KeyboardEvent(eventType, {\n        key: key,\n        code: this.getKeyCode(key),\n        bubbles: true,\n        cancelable: true,\n        ctrlKey,\n        shiftKey,\n        altKey,\n        metaKey\n      });\n      \n      element.dispatchEvent(event);\n      this.logger.debug(`触发 ${eventType} 事件: ${key}`);\n    });\n  }\n\n  /**\n   * 模拟输入序列\n   */\n  async simulateTyping(element, text, options = {}) {\n    const { delay = 50 } = options;\n    \n    element.focus();\n    \n    for (let i = 0; i < text.length; i++) {\n      const char = text[i];\n      \n      // 更新输入值\n      const currentValue = element.value || '';\n      element.value = currentValue + char;\n      \n      // 触发输入事件\n      element.dispatchEvent(new Event('input', { bubbles: true }));\n      this.simulateKeyPress(element, char);\n      \n      if (delay > 0) {\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n    \n    // 触发 change 事件\n    element.dispatchEvent(new Event('change', { bubbles: true }));\n    this.logger.debug(`输入文本: \"${text}\"`);\n  }\n\n  /**\n   * 模拟表单控件变化\n   */\n  simulateFormChange(element, value) {\n    if (element.type === 'checkbox' || element.type === 'radio') {\n      element.checked = value;\n    } else if (element.tagName === 'SELECT') {\n      element.value = value;\n    } else {\n      element.value = value;\n    }\n    \n    // 触发相关事件\n    element.dispatchEvent(new Event('input', { bubbles: true }));\n    element.dispatchEvent(new Event('change', { bubbles: true }));\n    \n    this.logger.debug(`表单控件变化: ${element.tagName} = ${value}`);\n  }\n\n  /**\n   * 获取键码\n   */\n  getKeyCode(key) {\n    const keyCodes = {\n      'Enter': 'Enter',\n      'Escape': 'Escape',\n      'Tab': 'Tab',\n      'Backspace': 'Backspace',\n      'Delete': 'Delete',\n      'ArrowUp': 'ArrowUp',\n      'ArrowDown': 'ArrowDown',\n      'ArrowLeft': 'ArrowLeft',\n      'ArrowRight': 'ArrowRight',\n      ' ': 'Space'\n    };\n    \n    return keyCodes[key] || key;\n  }\n\n  /**\n   * 滚动元素到可视区域\n   */\n  async scrollIntoView(element, options = {}) {\n    const { behavior = 'smooth', block = 'center' } = options;\n    \n    element.scrollIntoView({ behavior, block });\n    \n    // 等待滚动完成\n    await new Promise(resolve => setTimeout(resolve, 100));\n    \n    this.logger.debug('元素滚动到可视区域');\n  }\n}\n\n// 导出给浏览器使用\nif (typeof window !== 'undefined') {\n  window.PlaywrightEventSimulator = EventSimulator;\n}\n\n// Node.js 环境\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = EventSimulator;\n}\n\n// ES6 模块导出\nexport default EventSimulator;","/**\n * Locator 适配器 - 实现 Playwright Locator API\n */\nclass LocatorAdapter {\n  constructor(selector, page, options = {}) {\n    this.selector = selector;\n    this.page = page;\n    this.options = options;\n    this.filters = [];\n    this.logger = new (window.PlaywrightLogger || console)();\n    this.waitManager = page.waitManager;\n    this.eventSimulator = page.eventSimulator;\n  }\n\n  // =============== 链式过滤器方法 ===============\n\n  /**\n   * 过滤 locator\n   */\n  filter(options) {\n    const newLocator = new LocatorAdapter(this.selector, this.page);\n    newLocator.filters = [...this.filters, options];\n    return newLocator;\n  }\n\n  /**\n   * 获取第一个元素\n   */\n  first() {\n    return this.nth(0);\n  }\n\n  /**\n   * 获取最后一个元素\n   */\n  last() {\n    return this.filter({ position: 'last' });\n  }\n\n  /**\n   * 获取第 n 个元素\n   */\n  nth(n) {\n    return this.filter({ position: n });\n  }\n\n  /**\n   * 根据文本过滤\n   */\n  getByText(text, options = {}) {\n    return this.filter({ hasText: text, exact: options.exact });\n  }\n\n  // =============== 核心操作方法 ===============\n\n  /**\n   * 点击元素\n   */\n  async click(options = {}) {\n    const element = await this.getElement();\n    await this.page.scrollIntoViewIfNeeded(element);\n    \n    this.eventSimulator.simulateClick(element, options);\n    this.logger.debug(`点击元素: ${this.selector}`);\n  }\n\n  /**\n   * 双击元素\n   */\n  async dblclick(options = {}) {\n    const element = await this.getElement();\n    await this.page.scrollIntoViewIfNeeded(element);\n    \n    this.eventSimulator.simulateDoubleClick(element);\n    this.logger.debug(`双击元素: ${this.selector}`);\n  }\n\n  /**\n   * 填充表单\n   */\n  async fill(value, options = {}) {\n    const element = await this.getElement();\n    await this.page.scrollIntoViewIfNeeded(element);\n    \n    // 清空并填充\n    element.value = '';\n    element.value = value;\n    \n    // 触发相关事件\n    element.dispatchEvent(new Event('input', { bubbles: true }));\n    element.dispatchEvent(new Event('change', { bubbles: true }));\n    \n    this.logger.debug(`填充元素: ${this.selector} = \"${value}\"`);\n  }\n\n  /**\n   * 按键操作\n   */\n  async press(key, options = {}) {\n    const element = await this.getElement();\n    element.focus();\n    \n    this.eventSimulator.simulateKeyPress(element, key, options);\n    this.logger.debug(`按键: ${this.selector} -> ${key}`);\n  }\n\n  /**\n   * 逐字符输入（模拟打字）\n   */\n  async pressSequentially(text, options = {}) {\n    const element = await this.getElement();\n    await this.eventSimulator.simulateTyping(element, text, options);\n    this.logger.debug(`逐字符输入: ${this.selector} -> \"${text}\"`);\n  }\n\n  /**\n   * 悬停\n   */\n  async hover() {\n    const element = await this.getElement();\n    await this.page.scrollIntoViewIfNeeded(element);\n    \n    this.eventSimulator.simulateHover(element);\n    this.logger.debug(`悬停元素: ${this.selector}`);\n  }\n\n  /**\n   * 选择复选框\n   */\n  async check() {\n    const element = await this.getElement();\n    if (element.type === 'checkbox' || element.type === 'radio') {\n      element.checked = true;\n      element.dispatchEvent(new Event('change', { bubbles: true }));\n      this.logger.debug(`选择复选框: ${this.selector}`);\n    }\n  }\n\n  /**\n   * 取消选择复选框\n   */\n  async uncheck() {\n    const element = await this.getElement();\n    if (element.type === 'checkbox') {\n      element.checked = false;\n      element.dispatchEvent(new Event('change', { bubbles: true }));\n      this.logger.debug(`取消选择复选框: ${this.selector}`);\n    }\n  }\n\n  /**\n   * 选择下拉选项\n   */\n  async selectOption(values, options = {}) {\n    const element = await this.getElement();\n    if (element.tagName === 'SELECT') {\n      if (Array.isArray(values)) {\n        // 多选\n        Array.from(element.options).forEach(option => {\n          option.selected = values.includes(option.value) || values.includes(option.text);\n        });\n      } else {\n        element.value = values;\n      }\n      element.dispatchEvent(new Event('change', { bubbles: true }));\n      this.logger.debug(`选择下拉选项: ${this.selector} = ${values}`);\n    }\n  }\n\n  // =============== 状态检查方法 ===============\n\n  /**\n   * 检查元素是否可见\n   */\n  async isVisible() {\n    try {\n      const element = await this.getElement();\n      const rect = element.getBoundingClientRect();\n      const style = getComputedStyle(element);\n      \n      return rect.width > 0 && \n             rect.height > 0 && \n             style.visibility !== 'hidden' && \n             style.display !== 'none' &&\n             element.offsetParent !== null;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * 检查元素是否隐藏\n   */\n  async isHidden() {\n    return !(await this.isVisible());\n  }\n\n  /**\n   * 检查元素是否启用\n   */\n  async isEnabled() {\n    try {\n      const element = await this.getElement();\n      return !element.disabled && !element.hasAttribute('disabled');\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * 检查元素是否禁用\n   */\n  async isDisabled() {\n    return !(await this.isEnabled());\n  }\n\n  /**\n   * 检查复选框是否选中\n   */\n  async isChecked() {\n    try {\n      const element = await this.getElement();\n      return element.checked || false;\n    } catch {\n      return false;\n    }\n  }\n\n  // =============== 内容获取方法 ===============\n\n  /**\n   * 获取文本内容\n   */\n  async textContent() {\n    const element = await this.getElement();\n    return element.textContent || '';\n  }\n\n  /**\n   * 获取内部文本\n   */\n  async innerText() {\n    const element = await this.getElement();\n    return element.innerText || '';\n  }\n\n  /**\n   * 获取 HTML 内容\n   */\n  async innerHTML() {\n    const element = await this.getElement();\n    return element.innerHTML || '';\n  }\n\n  /**\n   * 获取属性值\n   */\n  async getAttribute(name) {\n    const element = await this.getElement();\n    return element.getAttribute(name);\n  }\n\n  /**\n   * 获取输入值\n   */\n  async inputValue() {\n    const element = await this.getElement();\n    return element.value || '';\n  }\n\n  // =============== 等待方法 ===============\n\n  /**\n   * 等待元素状态\n   */\n  async waitFor(options = {}) {\n    const { state = 'visible', timeout = 30000 } = options;\n    \n    switch (state) {\n      case 'visible':\n        return this.waitForVisible(timeout);\n      case 'hidden':\n        return this.waitForHidden(timeout);\n      case 'attached':\n        return this.waitForAttached(timeout);\n      case 'detached':\n        return this.waitForDetached(timeout);\n      default:\n        throw new Error(`未知的等待状态: ${state}`);\n    }\n  }\n\n  async waitForVisible(timeout) {\n    return this.waitManager.waitForCondition(\n      () => this.isVisible(),\n      timeout,\n      `元素 \"${this.selector}\" 等待可见超时`\n    );\n  }\n\n  async waitForHidden(timeout) {\n    return this.waitManager.waitForCondition(\n      () => this.isHidden(),\n      timeout,\n      `元素 \"${this.selector}\" 等待隐藏超时`\n    );\n  }\n\n  async waitForAttached(timeout) {\n    return this.waitManager.waitForCondition(\n      () => this.count() > 0,\n      timeout,\n      `元素 \"${this.selector}\" 等待附加到DOM超时`\n    );\n  }\n\n  async waitForDetached(timeout) {\n    return this.waitManager.waitForCondition(\n      () => this.count() === 0,\n      timeout,\n      `元素 \"${this.selector}\" 等待从DOM分离超时`\n    );\n  }\n\n  // =============== 内部方法 ===============\n\n  /**\n   * 获取元素数量\n   */\n  async count() {\n    const elements = document.querySelectorAll(this.selector);\n    return this.applyFilters(Array.from(elements)).length;\n  }\n\n  /**\n   * 获取所有匹配的元素\n   */\n  async all() {\n    const elements = document.querySelectorAll(this.selector);\n    const filtered = this.applyFilters(Array.from(elements));\n    \n    return filtered.map(element => {\n      const locator = new LocatorAdapter(this.buildUniqueSelector(element), this.page);\n      locator._element = element; // 缓存元素\n      return locator;\n    });\n  }\n\n  /**\n   * 获取单个元素\n   */\n  async getElement() {\n    // 如果有缓存的元素，直接返回\n    if (this._element && document.contains(this._element)) {\n      return this._element;\n    }\n\n    const elements = document.querySelectorAll(this.selector);\n    \n    if (elements.length === 0) {\n      throw new Error(`找不到元素: ${this.selector}`);\n    }\n\n    const filteredElements = this.applyFilters(Array.from(elements));\n\n    if (filteredElements.length === 0) {\n      throw new Error(`过滤后找不到元素: ${this.selector}`);\n    }\n\n    return filteredElements[0];\n  }\n\n  /**\n   * 应用过滤器\n   */\n  applyFilters(elements) {\n    let filtered = elements;\n    \n    for (const filter of this.filters) {\n      filtered = this.applyFilter(filtered, filter);\n    }\n\n    return filtered;\n  }\n\n  /**\n   * 应用单个过滤器\n   */\n  applyFilter(elements, filter) {\n    if (typeof filter.position === 'number') {\n      return elements[filter.position] ? [elements[filter.position]] : [];\n    }\n    \n    if (filter.position === 'last') {\n      return elements.length > 0 ? [elements[elements.length - 1]] : [];\n    }\n\n    if (filter.hasText) {\n      return elements.filter(el => {\n        const text = el.textContent || el.innerText || '';\n        return filter.exact ? text === filter.hasText : text.includes(filter.hasText);\n      });\n    }\n\n    if (filter.hasNotText) {\n      return elements.filter(el => {\n        const text = el.textContent || el.innerText || '';\n        return !text.includes(filter.hasNotText);\n      });\n    }\n\n    return elements;\n  }\n\n  /**\n   * 构建唯一选择器\n   */\n  buildUniqueSelector(element) {\n    if (element.id) {\n      return `#${element.id}`;\n    }\n    \n    // 构建路径选择器\n    const path = [];\n    let current = element;\n    \n    while (current && current !== document.body) {\n      let selector = current.tagName.toLowerCase();\n      \n      if (current.className) {\n        const classes = current.className.split(' ').filter(c => c.trim());\n        if (classes.length > 0) {\n          selector += '.' + classes.join('.');\n        }\n      }\n      \n      // 添加位置信息以确保唯一性\n      const siblings = Array.from(current.parentNode?.children || [])\n        .filter(sibling => sibling.tagName === current.tagName);\n      \n      if (siblings.length > 1) {\n        const index = siblings.indexOf(current);\n        selector += `:nth-of-type(${index + 1})`;\n      }\n      \n      path.unshift(selector);\n      current = current.parentElement;\n    }\n    \n    return path.join(' > ');\n  }\n}\n\n// 导出给浏览器使用\nif (typeof window !== 'undefined') {\n  window.PlaywrightLocatorAdapter = LocatorAdapter;\n}\n\n// Node.js 环境\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = LocatorAdapter;\n}\n\n// ES6 模块导出\nexport default LocatorAdapter;","/**\n * Page 适配器 - 实现 Playwright Page API\n */\nclass PageAdapter {\n  constructor() {\n    this.logger = new (window.PlaywrightLogger || console)();\n    this.waitManager = new (window.PlaywrightWaitManager || WaitManager)();\n    this.eventSimulator = new (window.PlaywrightEventSimulator || EventSimulator)();\n  }\n\n  // =============== 导航方法 ===============\n\n  /**\n   * 导航到指定 URL\n   */\n  async goto(url, options = {}) {\n    const { waitUntil = 'load', timeout = 30000 } = options;\n    \n    this.logger.info(`导航到: ${url}`);\n    \n    if (window.location.href !== url) {\n      window.location.href = url;\n      await this.waitForLoadState(waitUntil, timeout);\n    }\n    \n    return { url: window.location.href, status: 200 };\n  }\n\n  /**\n   * 后退\n   */\n  async goBack(options = {}) {\n    const { waitUntil = 'load' } = options;\n    window.history.back();\n    await this.waitForLoadState(waitUntil);\n  }\n\n  /**\n   * 前进\n   */\n  async goForward(options = {}) {\n    const { waitUntil = 'load' } = options;\n    window.history.forward();\n    await this.waitForLoadState(waitUntil);\n  }\n\n  /**\n   * 刷新页面\n   */\n  async reload(options = {}) {\n    const { waitUntil = 'load' } = options;\n    window.location.reload();\n    await this.waitForLoadState(waitUntil);\n  }\n\n  // =============== 页面信息获取 ===============\n\n  /**\n   * 获取当前 URL\n   */\n  url() {\n    return window.location.href;\n  }\n\n  /**\n   * 获取页面标题\n   */\n  async title() {\n    return document.title;\n  }\n\n  /**\n   * 获取页面内容\n   */\n  async content() {\n    return document.documentElement.outerHTML;\n  }\n\n  // =============== 元素交互方法 ===============\n\n  /**\n   * 点击元素\n   */\n  async click(selector, options = {}) {\n    const element = await this.waitForSelector(selector);\n    await this.scrollIntoViewIfNeeded(element);\n    \n    this.eventSimulator.simulateClick(element, options);\n    this.logger.debug(`点击: ${selector}`);\n  }\n\n  /**\n   * 双击元素\n   */\n  async dblclick(selector, options = {}) {\n    const element = await this.waitForSelector(selector);\n    await this.scrollIntoViewIfNeeded(element);\n    \n    this.eventSimulator.simulateDoubleClick(element);\n    this.logger.debug(`双击: ${selector}`);\n  }\n\n  /**\n   * 填充表单\n   */\n  async fill(selector, value, options = {}) {\n    const element = await this.waitForSelector(selector);\n    await this.scrollIntoViewIfNeeded(element);\n    \n    // 清空并填充\n    element.value = '';\n    element.value = value;\n    \n    // 触发相关事件\n    element.dispatchEvent(new Event('input', { bubbles: true }));\n    element.dispatchEvent(new Event('change', { bubbles: true }));\n    \n    this.logger.debug(`填充: ${selector} = \"${value}\"`);\n  }\n\n  /**\n   * 按键操作\n   */\n  async press(selector, key, options = {}) {\n    const element = await this.waitForSelector(selector);\n    element.focus();\n    \n    this.eventSimulator.simulateKeyPress(element, key, options);\n    this.logger.debug(`按键: ${selector} -> ${key}`);\n  }\n\n  /**\n   * 输入文本（模拟打字）\n   */\n  async type(selector, text, options = {}) {\n    const element = await this.waitForSelector(selector);\n    await this.eventSimulator.simulateTyping(element, text, options);\n    this.logger.debug(`输入: ${selector} -> \"${text}\"`);\n  }\n\n  /**\n   * 悬停\n   */\n  async hover(selector) {\n    const element = await this.waitForSelector(selector);\n    await this.scrollIntoViewIfNeeded(element);\n    \n    this.eventSimulator.simulateHover(element);\n    this.logger.debug(`悬停: ${selector}`);\n  }\n\n  /**\n   * 选择复选框\n   */\n  async check(selector) {\n    const element = await this.waitForSelector(selector);\n    if (element.type === 'checkbox' || element.type === 'radio') {\n      element.checked = true;\n      element.dispatchEvent(new Event('change', { bubbles: true }));\n      this.logger.debug(`选择: ${selector}`);\n    }\n  }\n\n  /**\n   * 取消选择复选框\n   */\n  async uncheck(selector) {\n    const element = await this.waitForSelector(selector);\n    if (element.type === 'checkbox') {\n      element.checked = false;\n      element.dispatchEvent(new Event('change', { bubbles: true }));\n      this.logger.debug(`取消选择: ${selector}`);\n    }\n  }\n\n  /**\n   * 选择下拉选项\n   */\n  async selectOption(selector, values, options = {}) {\n    const element = await this.waitForSelector(selector);\n    if (element.tagName === 'SELECT') {\n      if (Array.isArray(values)) {\n        // 多选\n        Array.from(element.options).forEach(option => {\n          option.selected = values.includes(option.value) || values.includes(option.text);\n        });\n      } else {\n        element.value = values;\n      }\n      element.dispatchEvent(new Event('change', { bubbles: true }));\n      this.logger.debug(`选择选项: ${selector} = ${values}`);\n    }\n  }\n\n  // =============== 现代定位器方法 ===============\n\n  /**\n   * 创建 Locator\n   */\n  locator(selector, options = {}) {\n    return new (window.PlaywrightLocatorAdapter || LocatorAdapter)(selector, this, options);\n  }\n\n  /**\n   * 根据角色定位\n   */\n  getByRole(role, options = {}) {\n    const { name, exact = false, level } = options;\n    let selector = `[role=\"${role}\"]`;\n    \n    if (name) {\n      if (exact) {\n        selector += `[aria-label=\"${name}\"], [role=\"${role}\"][aria-labelledby] *:contains(\"${name}\")`;\n      } else {\n        selector += `[aria-label*=\"${name}\"], [role=\"${role}\"][aria-labelledby] *:contains(\"${name}\")`;\n      }\n    }\n    \n    if (level && role === 'heading') {\n      selector = `h${level}[role=\"heading\"], h${level}`;\n    }\n    \n    return this.locator(selector);\n  }\n\n  /**\n   * 根据文本定位\n   */\n  getByText(text, options = {}) {\n    const { exact = false } = options;\n    let xpath;\n    \n    if (exact) {\n      xpath = `//*[normalize-space(text())=\"${text}\"]`;\n    } else {\n      xpath = `//*[contains(normalize-space(text()), \"${text}\")]`;\n    }\n    \n    return this.locator(`xpath=${xpath}`);\n  }\n\n  /**\n   * 根据标签定位\n   */\n  getByLabel(text, options = {}) {\n    const { exact = false } = options;\n    \n    // 查找 label 关联的 input\n    const labelSelector = exact \n      ? `label:contains(\"${text}\")` \n      : `label:contains(\"${text}\")`;\n    \n    // 通过 for 属性或包含关系查找\n    const selector = `${labelSelector} input, input[id]:has(+ label:contains(\"${text}\")), input[aria-labelledby]:has(~ *:contains(\"${text}\"))`;\n    \n    return this.locator(selector);\n  }\n\n  /**\n   * 根据占位符定位\n   */\n  getByPlaceholder(text, options = {}) {\n    const { exact = false } = options;\n    const selector = exact \n      ? `[placeholder=\"${text}\"]`\n      : `[placeholder*=\"${text}\"]`;\n    \n    return this.locator(selector);\n  }\n\n  /**\n   * 根据测试 ID 定位\n   */\n  getByTestId(testId) {\n    return this.locator(`[data-testid=\"${testId}\"]`);\n  }\n\n  /**\n   * 根据标题定位\n   */\n  getByTitle(text, options = {}) {\n    const { exact = false } = options;\n    const selector = exact \n      ? `[title=\"${text}\"]`\n      : `[title*=\"${text}\"]`;\n    \n    return this.locator(selector);\n  }\n\n  // =============== 等待方法 ===============\n\n  /**\n   * 等待元素\n   */\n  async waitForSelector(selector, options = {}) {\n    const { timeout = 30000, state = 'visible' } = options;\n    \n    // 如果是 xpath，需要特殊处理\n    if (selector.startsWith('xpath=')) {\n      return this.waitForXPath(selector.substring(6), { timeout, state });\n    }\n    \n    const element = await this.waitManager.waitForElement(selector, timeout);\n    \n    if (state === 'visible') {\n      await this.waitManager.waitForCondition(\n        () => {\n          const rect = element.getBoundingClientRect();\n          const style = getComputedStyle(element);\n          return rect.width > 0 && rect.height > 0 && \n                 style.visibility !== 'hidden' && style.display !== 'none';\n        },\n        timeout,\n        `元素 \"${selector}\" 等待可见超时`\n      );\n    }\n    \n    return element;\n  }\n\n  /**\n   * 等待 XPath 元素\n   */\n  async waitForXPath(xpath, options = {}) {\n    const { timeout = 30000 } = options;\n    \n    return this.waitManager.waitForCondition(\n      () => {\n        const result = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);\n        return result.singleNodeValue;\n      },\n      timeout,\n      `XPath 元素等待超时: ${xpath}`\n    );\n  }\n\n  /**\n   * 等待超时\n   */\n  async waitForTimeout(ms) {\n    return this.waitManager.waitForTimeout(ms);\n  }\n\n  /**\n   * 等待函数\n   */\n  async waitForFunction(fn, arg, options = {}) {\n    const { timeout = 30000 } = options;\n    return this.waitManager.waitForCondition(\n      () => fn(arg),\n      timeout,\n      '等待函数条件超时'\n    );\n  }\n\n  /**\n   * 等待 URL\n   */\n  async waitForURL(url, options = {}) {\n    const { timeout = 30000 } = options;\n    return this.waitManager.waitForURL(url, timeout);\n  }\n\n  /**\n   * 等待加载状态\n   */\n  async waitForLoadState(state = 'load', timeout = 30000) {\n    return this.waitManager.waitForLoadState(state);\n  }\n\n  // =============== 脚本执行方法 ===============\n\n  /**\n   * 在页面上下文中执行脚本\n   */\n  async evaluate(fn, ...args) {\n    try {\n      return fn.apply(window, args);\n    } catch (error) {\n      this.logger.error('脚本执行失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 在页面上下文中执行脚本并返回句柄\n   */\n  async evaluateHandle(fn, ...args) {\n    return this.evaluate(fn, ...args);\n  }\n\n  /**\n   * 添加脚本标签\n   */\n  async addScriptTag(options = {}) {\n    const { url, path, content, type = 'text/javascript' } = options;\n    \n    const script = document.createElement('script');\n    script.type = type;\n    \n    if (url) {\n      script.src = url;\n    } else if (content) {\n      script.textContent = content;\n    }\n    \n    document.head.appendChild(script);\n    \n    // 等待脚本加载\n    if (url) {\n      await new Promise((resolve, reject) => {\n        script.onload = resolve;\n        script.onerror = reject;\n      });\n    }\n    \n    this.logger.debug('添加脚本标签');\n    return script;\n  }\n\n  /**\n   * 添加样式标签\n   */\n  async addStyleTag(options = {}) {\n    const { url, path, content } = options;\n    \n    if (url) {\n      const link = document.createElement('link');\n      link.rel = 'stylesheet';\n      link.href = url;\n      document.head.appendChild(link);\n      return link;\n    } else if (content) {\n      const style = document.createElement('style');\n      style.textContent = content;\n      document.head.appendChild(style);\n      return style;\n    }\n  }\n\n  // =============== 辅助方法 ===============\n\n  /**\n   * 滚动元素到可视区域\n   */\n  async scrollIntoViewIfNeeded(element) {\n    const rect = element.getBoundingClientRect();\n    const isInViewport = rect.top >= 0 && rect.bottom <= window.innerHeight &&\n                        rect.left >= 0 && rect.right <= window.innerWidth;\n    \n    if (!isInViewport) {\n      element.scrollIntoView({ behavior: 'smooth', block: 'center' });\n      await this.waitForTimeout(100); // 等待滚动完成\n      this.logger.debug('元素滚动到可视区域');\n    }\n  }\n\n  /**\n   * 获取元素边界框\n   */\n  async boundingBox(selector) {\n    const element = await this.waitForSelector(selector);\n    const rect = element.getBoundingClientRect();\n    \n    return {\n      x: rect.left + window.scrollX,\n      y: rect.top + window.scrollY,\n      width: rect.width,\n      height: rect.height\n    };\n  }\n\n  /**\n   * 设置视口大小（有限支持）\n   */\n  async setViewportSize(size) {\n    // 浏览器环境中无法直接设置视口大小\n    // 这里只是记录日志\n    this.logger.warn('浏览器环境中无法设置视口大小');\n    return { width: window.innerWidth, height: window.innerHeight };\n  }\n\n  /**\n   * 获取视口大小\n   */\n  viewportSize() {\n    return { width: window.innerWidth, height: window.innerHeight };\n  }\n}\n\n// 导出给浏览器使用\nif (typeof window !== 'undefined') {\n  window.PlaywrightPageAdapter = PageAdapter;\n}\n\n// Node.js 环境\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = PageAdapter;\n}\n\n// ES6 模块导出\nexport default PageAdapter;","/**\n * Expect 适配器 - 实现 Playwright Expect API\n */\nclass ExpectAdapter {\n  constructor(target, options = {}) {\n    this.target = target;\n    this.isNot = false;\n    this.timeout = options.timeout || 5000;\n    this.logger = new (window.PlaywrightLogger || console)();\n  }\n\n  /**\n   * 取反\n   */\n  get not() {\n    const newExpect = new ExpectAdapter(this.target, { timeout: this.timeout });\n    newExpect.isNot = !this.isNot;\n    return newExpect;\n  }\n\n  // =============== 可见性断言 ===============\n\n  /**\n   * 断言元素可见\n   */\n  async toBeVisible(options = {}) {\n    const timeout = options.timeout || this.timeout;\n    const expected = !this.isNot;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const isVisible = await this.target.isVisible();\n          return isVisible === expected;\n        },\n        timeout,\n        `期望元素${expected ? '可见' : '不可见'}`\n      );\n      \n      this.logger.debug(`✅ 元素${expected ? '可见' : '不可见'}断言通过`);\n    } catch (error) {\n      const actualVisible = await this.target.isVisible();\n      throw new Error(`期望元素${expected ? '可见' : '不可见'}，但实际${actualVisible ? '可见' : '不可见'}`);\n    }\n  }\n\n  /**\n   * 断言元素隐藏\n   */\n  async toBeHidden(options = {}) {\n    const timeout = options.timeout || this.timeout;\n    const expected = this.isNot;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const isVisible = await this.target.isVisible();\n          return isVisible === expected;\n        },\n        timeout,\n        `期望元素${expected ? '可见' : '隐藏'}`\n      );\n      \n      this.logger.debug(`✅ 元素${expected ? '可见' : '隐藏'}断言通过`);\n    } catch (error) {\n      const actualVisible = await this.target.isVisible();\n      throw new Error(`期望元素${expected ? '可见' : '隐藏'}，但实际${actualVisible ? '可见' : '隐藏'}`);\n    }\n  }\n\n  // =============== 状态断言 ===============\n\n  /**\n   * 断言元素启用\n   */\n  async toBeEnabled(options = {}) {\n    const timeout = options.timeout || this.timeout;\n    const expected = !this.isNot;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const isEnabled = await this.target.isEnabled();\n          return isEnabled === expected;\n        },\n        timeout,\n        `期望元素${expected ? '启用' : '禁用'}`\n      );\n      \n      this.logger.debug(`✅ 元素${expected ? '启用' : '禁用'}断言通过`);\n    } catch (error) {\n      const actualEnabled = await this.target.isEnabled();\n      throw new Error(`期望元素${expected ? '启用' : '禁用'}，但实际${actualEnabled ? '启用' : '禁用'}`);\n    }\n  }\n\n  /**\n   * 断言元素禁用\n   */\n  async toBeDisabled(options = {}) {\n    const timeout = options.timeout || this.timeout;\n    const expected = this.isNot;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const isEnabled = await this.target.isEnabled();\n          return isEnabled === expected;\n        },\n        timeout,\n        `期望元素${expected ? '启用' : '禁用'}`\n      );\n      \n      this.logger.debug(`✅ 元素${expected ? '启用' : '禁用'}断言通过`);\n    } catch (error) {\n      const actualEnabled = await this.target.isEnabled();\n      throw new Error(`期望元素${expected ? '启用' : '禁用'}，但实际${actualEnabled ? '启用' : '禁用'}`);\n    }\n  }\n\n  /**\n   * 断言复选框选中\n   */\n  async toBeChecked(options = {}) {\n    const timeout = options.timeout || this.timeout;\n    const expected = !this.isNot;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const isChecked = await this.target.isChecked();\n          return isChecked === expected;\n        },\n        timeout,\n        `期望元素${expected ? '选中' : '未选中'}`\n      );\n      \n      this.logger.debug(`✅ 元素${expected ? '选中' : '未选中'}断言通过`);\n    } catch (error) {\n      const actualChecked = await this.target.isChecked();\n      throw new Error(`期望元素${expected ? '选中' : '未选中'}，但实际${actualChecked ? '选中' : '未选中'}`);\n    }\n  }\n\n  // =============== 内容断言 ===============\n\n  /**\n   * 断言包含文本\n   */\n  async toHaveText(expectedText, options = {}) {\n    const timeout = options.timeout || this.timeout;\n    const useInnerText = options.useInnerText || false;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const actualText = useInnerText \n            ? await this.target.innerText()\n            : await this.target.textContent();\n          \n          let matches;\n          if (Array.isArray(expectedText)) {\n            matches = expectedText.every(text => actualText.includes(text));\n          } else if (expectedText instanceof RegExp) {\n            matches = expectedText.test(actualText);\n          } else {\n            matches = actualText.includes(expectedText);\n          }\n          \n          return this.isNot ? !matches : matches;\n        },\n        timeout,\n        `期望文本${this.isNot ? '不' : ''}包含 \"${expectedText}\"`\n      );\n      \n      this.logger.debug(`✅ 文本${this.isNot ? '不' : ''}包含断言通过`);\n    } catch (error) {\n      const actualText = useInnerText \n        ? await this.target.innerText()\n        : await this.target.textContent();\n      throw new Error(`期望文本${this.isNot ? '不' : ''}包含 \"${expectedText}\"，但实际文本为 \"${actualText}\"`);\n    }\n  }\n\n  /**\n   * 断言确切文本\n   */\n  async toHaveExactText(expectedText, options = {}) {\n    const timeout = options.timeout || this.timeout;\n    const useInnerText = options.useInnerText || false;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const actualText = useInnerText \n            ? await this.target.innerText()\n            : await this.target.textContent();\n          \n          const matches = actualText.trim() === expectedText.trim();\n          return this.isNot ? !matches : matches;\n        },\n        timeout,\n        `期望文本${this.isNot ? '不' : ''}完全匹配 \"${expectedText}\"`\n      );\n      \n      this.logger.debug(`✅ 确切文本${this.isNot ? '不' : ''}匹配断言通过`);\n    } catch (error) {\n      const actualText = useInnerText \n        ? await this.target.innerText()\n        : await this.target.textContent();\n      throw new Error(`期望文本${this.isNot ? '不' : ''}完全匹配 \"${expectedText}\"，但实际文本为 \"${actualText}\"`);\n    }\n  }\n\n  /**\n   * 断言包含文本（部分）\n   */\n  async toContainText(expectedText, options = {}) {\n    return this.toHaveText(expectedText, options);\n  }\n\n  // =============== 属性断言 ===============\n\n  /**\n   * 断言有属性\n   */\n  async toHaveAttribute(name, value, options = {}) {\n    const timeout = options.timeout || this.timeout;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const actualValue = await this.target.getAttribute(name);\n          \n          let matches;\n          if (value === undefined) {\n            matches = actualValue !== null;\n          } else if (value instanceof RegExp) {\n            matches = value.test(actualValue || '');\n          } else {\n            matches = actualValue === value;\n          }\n          \n          return this.isNot ? !matches : matches;\n        },\n        timeout,\n        `期望${this.isNot ? '不' : ''}有属性 \"${name}\"`\n      );\n      \n      this.logger.debug(`✅ 属性${this.isNot ? '不' : ''}存在断言通过`);\n    } catch (error) {\n      const actualValue = await this.target.getAttribute(name);\n      throw new Error(`期望${this.isNot ? '不' : ''}有属性 \"${name}\"${value !== undefined ? ` = \"${value}\"` : ''}，但实际值为 \"${actualValue}\"`);\n    }\n  }\n\n  /**\n   * 断言有值\n   */\n  async toHaveValue(expectedValue, options = {}) {\n    const timeout = options.timeout || this.timeout;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const actualValue = await this.target.inputValue();\n          \n          let matches;\n          if (expectedValue instanceof RegExp) {\n            matches = expectedValue.test(actualValue);\n          } else {\n            matches = actualValue === expectedValue;\n          }\n          \n          return this.isNot ? !matches : matches;\n        },\n        timeout,\n        `期望值${this.isNot ? '不' : ''}为 \"${expectedValue}\"`\n      );\n      \n      this.logger.debug(`✅ 值${this.isNot ? '不' : ''}匹配断言通过`);\n    } catch (error) {\n      const actualValue = await this.target.inputValue();\n      throw new Error(`期望值${this.isNot ? '不' : ''}为 \"${expectedValue}\"，但实际值为 \"${actualValue}\"`);\n    }\n  }\n\n  /**\n   * 断言有类名\n   */\n  async toHaveClass(expectedClass, options = {}) {\n    const timeout = options.timeout || this.timeout;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const classAttr = await this.target.getAttribute('class');\n          const classes = classAttr ? classAttr.split(' ') : [];\n          \n          let matches;\n          if (Array.isArray(expectedClass)) {\n            matches = expectedClass.every(cls => classes.includes(cls));\n          } else if (expectedClass instanceof RegExp) {\n            matches = expectedClass.test(classAttr || '');\n          } else {\n            matches = classes.includes(expectedClass);\n          }\n          \n          return this.isNot ? !matches : matches;\n        },\n        timeout,\n        `期望${this.isNot ? '不' : ''}有类名 \"${expectedClass}\"`\n      );\n      \n      this.logger.debug(`✅ 类名${this.isNot ? '不' : ''}存在断言通过`);\n    } catch (error) {\n      const classAttr = await this.target.getAttribute('class');\n      throw new Error(`期望${this.isNot ? '不' : ''}有类名 \"${expectedClass}\"，但实际类名为 \"${classAttr}\"`);\n    }\n  }\n\n  /**\n   * 断言有 ID\n   */\n  async toHaveId(expectedId, options = {}) {\n    return this.toHaveAttribute('id', expectedId, options);\n  }\n\n  // =============== 数量断言 ===============\n\n  /**\n   * 断言数量\n   */\n  async toHaveCount(expectedCount, options = {}) {\n    const timeout = options.timeout || this.timeout;\n    \n    try {\n      await this.waitForCondition(\n        async () => {\n          const actualCount = await this.target.count();\n          const matches = actualCount === expectedCount;\n          return this.isNot ? !matches : matches;\n        },\n        timeout,\n        `期望数量${this.isNot ? '不' : ''}为 ${expectedCount}`\n      );\n      \n      this.logger.debug(`✅ 数量${this.isNot ? '不' : ''}匹配断言通过`);\n    } catch (error) {\n      const actualCount = await this.target.count();\n      throw new Error(`期望数量${this.isNot ? '不' : ''}为 ${expectedCount}，但实际数量为 ${actualCount}`);\n    }\n  }\n\n  // =============== URL 断言 ===============\n\n  /**\n   * 断言 URL\n   */\n  async toHaveURL(expectedUrl, options = {}) {\n    const timeout = options.timeout || this.timeout;\n    \n    try {\n      await this.waitForCondition(\n        () => {\n          const currentUrl = window.location.href;\n          \n          let matches;\n          if (expectedUrl instanceof RegExp) {\n            matches = expectedUrl.test(currentUrl);\n          } else {\n            matches = currentUrl.includes(expectedUrl);\n          }\n          \n          return this.isNot ? !matches : matches;\n        },\n        timeout,\n        `期望 URL ${this.isNot ? '不' : ''}匹配 \"${expectedUrl}\"`\n      );\n      \n      this.logger.debug(`✅ URL ${this.isNot ? '不' : ''}匹配断言通过`);\n    } catch (error) {\n      const currentUrl = window.location.href;\n      throw new Error(`期望 URL ${this.isNot ? '不' : ''}匹配 \"${expectedUrl}\"，但当前 URL 为 \"${currentUrl}\"`);\n    }\n  }\n\n  /**\n   * 断言标题\n   */\n  async toHaveTitle(expectedTitle, options = {}) {\n    const timeout = options.timeout || this.timeout;\n    \n    try {\n      await this.waitForCondition(\n        () => {\n          const currentTitle = document.title;\n          \n          let matches;\n          if (expectedTitle instanceof RegExp) {\n            matches = expectedTitle.test(currentTitle);\n          } else {\n            matches = currentTitle.includes(expectedTitle);\n          }\n          \n          return this.isNot ? !matches : matches;\n        },\n        timeout,\n        `期望标题${this.isNot ? '不' : ''}匹配 \"${expectedTitle}\"`\n      );\n      \n      this.logger.debug(`✅ 标题${this.isNot ? '不' : ''}匹配断言通过`);\n    } catch (error) {\n      const currentTitle = document.title;\n      throw new Error(`期望标题${this.isNot ? '不' : ''}匹配 \"${expectedTitle}\"，但当前标题为 \"${currentTitle}\"`);\n    }\n  }\n\n  // =============== 辅助方法 ===============\n\n  /**\n   * 等待条件满足\n   */\n  async waitForCondition(conditionFn, timeout, description) {\n    const startTime = Date.now();\n    \n    const check = async () => {\n      try {\n        const result = await conditionFn();\n        if (result) {\n          return result;\n        }\n      } catch (error) {\n        // 继续等待\n      }\n\n      if (Date.now() - startTime >= timeout) {\n        throw new Error(`${description}超时 (${timeout}ms)`);\n      }\n\n      await new Promise(resolve => setTimeout(resolve, 100));\n      return check();\n    };\n\n    return check();\n  }\n}\n\n// 创建全局 expect 函数\nfunction createExpect() {\n  return function expect(target) {\n    return new ExpectAdapter(target);\n  };\n}\n\n// 导出给浏览器使用\nif (typeof window !== 'undefined') {\n  window.PlaywrightExpectAdapter = ExpectAdapter;\n  window.PlaywrightExpect = createExpect();\n}\n\n// Node.js 环境\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = { ExpectAdapter, createExpect };\n}\n\n// ES6 模块导出\nexport default ExpectAdapter;\nexport { createExpect };","/**\n * Playwright 运行时适配器\n * 模拟 @playwright/test 模块，让 Playwright 脚本能在浏览器中运行\n */\nclass PlaywrightRuntime {\n  constructor() {\n    this.logger = new (window.PlaywrightLogger || console)();\n    this.setupGlobalEnvironment();\n  }\n\n  /**\n   * 设置全局环境\n   */\n  setupGlobalEnvironment() {\n    // 模拟 @playwright/test 模块\n    window.PlaywrightTest = {\n      test: this.createTestFunction(),\n      expect: window.PlaywrightExpect || this.createExpectFunction()\n    };\n\n    // 设置模块系统\n    this.setupModuleSystem();\n    \n    this.logger.debug('Playwright 运行时环境初始化完成');\n  }\n\n  /**\n   * 创建 test 函数\n   */\n  createTestFunction() {\n    const self = this;\n    \n    // 主 test 函数\n    function test(name, testFn) {\n      return {\n        name,\n        fn: testFn,\n        run: async () => {\n          const page = new (window.PlaywrightPageAdapter || PageAdapter)();\n          const context = { page };\n          \n          try {\n            self.logger.info(`🧪 开始测试: ${name}`);\n            const startTime = Date.now();\n            \n            await testFn(context);\n            \n            const duration = Date.now() - startTime;\n            self.logger.success(`✅ 测试通过: ${name} (${duration}ms)`);\n            return { success: true, duration, name };\n          } catch (error) {\n            const duration = Date.now() - startTime;\n            self.logger.error(`❌ 测试失败: ${name} (${duration}ms)`, error);\n            return { success: false, error, duration, name };\n          }\n        }\n      };\n    }\n\n    // 添加 test 的静态方法\n    test.skip = (name, testFn) => {\n      self.logger.warn(`⏭️ 跳过测试: ${name}`);\n      return {\n        name,\n        fn: testFn,\n        skipped: true,\n        run: async () => ({ success: true, skipped: true, name })\n      };\n    };\n\n    test.only = (name, testFn) => {\n      const testCase = test(name, testFn);\n      testCase.only = true;\n      return testCase;\n    };\n\n    test.describe = (name, suiteFn) => {\n      self.logger.info(`📁 测试套件: ${name}`);\n      return suiteFn();\n    };\n\n    test.beforeEach = (hookFn) => {\n      // 简单实现，存储钩子函数\n      test._beforeEachHooks = test._beforeEachHooks || [];\n      test._beforeEachHooks.push(hookFn);\n    };\n\n    test.afterEach = (hookFn) => {\n      test._afterEachHooks = test._afterEachHooks || [];\n      test._afterEachHooks.push(hookFn);\n    };\n\n    test.beforeAll = (hookFn) => {\n      test._beforeAllHooks = test._beforeAllHooks || [];\n      test._beforeAllHooks.push(hookFn);\n    };\n\n    test.afterAll = (hookFn) => {\n      test._afterAllHooks = test._afterAllHooks || [];\n      test._afterAllHooks.push(hookFn);\n    };\n\n    return test;\n  }\n\n  /**\n   * 创建 expect 函数\n   */\n  createExpectFunction() {\n    return function expect(target) {\n      return new (window.PlaywrightExpectAdapter || ExpectAdapter)(target);\n    };\n  }\n\n  /**\n   * 设置模块系统\n   */\n  setupModuleSystem() {\n    // 拦截 ES6 import\n    if (typeof window.importShim === 'undefined') {\n      window.importShim = {\n        '@playwright/test': window.PlaywrightTest\n      };\n    }\n  }\n\n  /**\n   * 直接执行 Playwright 脚本\n   */\n  async executeScript(scriptContent) {\n    try {\n      // 转换 import 语句\n      const transformedScript = this.transformImports(scriptContent);\n      \n      // 在沙箱环境中执行\n      const testCases = await this.runInSandbox(transformedScript);\n      \n      // 执行所有测试\n      const results = await this.runTests(testCases);\n      \n      return results;\n    } catch (error) {\n      this.logger.error('脚本执行失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 转换 import 语句\n   */\n  transformImports(scriptContent) {\n    // 简单的字符串替换，将 import 转换为我们的运行时\n    let transformed = scriptContent;\n    \n    // 匹配各种 import 形式\n    const importPatterns = [\n      // import { test, expect } from '@playwright/test';\n      /import\\s*{\\s*([^}]+)\\s*}\\s*from\\s*['\"]@playwright\\/test['\"];?/g,\n      // import { expect, test } from '@playwright/test';\n      /import\\s*{\\s*([^}]+)\\s*}\\s*from\\s*['\"]@playwright\\/test['\"];?/g,\n      // import * as pw from '@playwright/test';\n      /import\\s*\\*\\s*as\\s+(\\w+)\\s*from\\s*['\"]@playwright\\/test['\"];?/g\n    ];\n    \n    // 替换标准导入\n    transformed = transformed.replace(importPatterns[0], (match, imports) => {\n      const importItems = imports.split(',').map(item => item.trim());\n      const declarations = importItems.map(item => {\n        const cleanItem = item.replace(/\\s+as\\s+\\w+/, ''); // 移除 as 别名\n        return `${item} = window.PlaywrightTest.${cleanItem}`;\n      }).join(', ');\n      \n      return `const { ${declarations} } = window.PlaywrightTest;`;\n    });\n    \n    // 替换命名空间导入\n    transformed = transformed.replace(importPatterns[2], (match, namespace) => {\n      return `const ${namespace} = window.PlaywrightTest;`;\n    });\n    \n    // 简单替换（兜底）\n    transformed = transformed\n      .replace(/import\\s*{\\s*test,?\\s*expect\\s*}\\s*from\\s*['\"]@playwright\\/test['\"];?/g, \n               'const { test, expect } = window.PlaywrightTest;')\n      .replace(/import\\s*{\\s*expect,?\\s*test\\s*}\\s*from\\s*['\"]@playwright\\/test['\"];?/g, \n               'const { test, expect } = window.PlaywrightTest;');\n    \n    this.logger.debug('Import 语句转换完成');\n    return transformed;\n  }\n\n  /**\n   * 在沙箱环境中执行脚本\n   */\n  async runInSandbox(scriptContent) {\n    const testCases = [];\n    \n    // 重写 test 函数来收集测试用例\n    const originalTest = window.PlaywrightTest.test;\n    const self = this;\n    \n    window.PlaywrightTest.test = function(name, fn) {\n      const testCase = originalTest(name, fn);\n      testCases.push(testCase);\n      self.logger.debug(`收集测试用例: ${name}`);\n      return testCase;\n    };\n    \n    // 保持原有的静态方法\n    Object.keys(originalTest).forEach(key => {\n      if (typeof originalTest[key] === 'function') {\n        window.PlaywrightTest.test[key] = originalTest[key];\n      }\n    });\n\n    try {\n      // 执行脚本\n      const scriptFunction = new Function(scriptContent);\n      scriptFunction();\n      \n      this.logger.info(`收集到 ${testCases.length} 个测试用例`);\n    } catch (error) {\n      this.logger.error('脚本执行出错:', error);\n      throw error;\n    } finally {\n      // 恢复原始 test 函数\n      window.PlaywrightTest.test = originalTest;\n    }\n\n    return testCases;\n  }\n\n  /**\n   * 运行测试\n   */\n  async runTests(testCases) {\n    const results = [];\n    const onlyTests = testCases.filter(test => test.only);\n    const testsToRun = onlyTests.length > 0 ? onlyTests : testCases.filter(test => !test.skipped);\n    \n    this.logger.info(`开始执行 ${testsToRun.length} 个测试`);\n    \n    // 执行 beforeAll 钩子\n    await this.runHooks('_beforeAllHooks');\n    \n    for (const testCase of testsToRun) {\n      try {\n        // 执行 beforeEach 钩子\n        await this.runHooks('_beforeEachHooks', testCase);\n        \n        // 执行测试\n        const result = await testCase.run();\n        results.push(result);\n        \n        // 执行 afterEach 钩子\n        await this.runHooks('_afterEachHooks', testCase);\n        \n      } catch (error) {\n        this.logger.error(`测试执行异常: ${testCase.name}`, error);\n        results.push({ \n          success: false, \n          error, \n          name: testCase.name,\n          duration: 0 \n        });\n      }\n    }\n    \n    // 执行 afterAll 钩子\n    await this.runHooks('_afterAllHooks');\n    \n    // 输出测试总结\n    this.printTestSummary(results);\n    \n    return results;\n  }\n\n  /**\n   * 运行钩子函数\n   */\n  async runHooks(hookType, testCase = null) {\n    const test = window.PlaywrightTest.test;\n    const hooks = test[hookType] || [];\n    \n    for (const hook of hooks) {\n      try {\n        if (testCase) {\n          const page = new (window.PlaywrightPageAdapter || PageAdapter)();\n          await hook({ page });\n        } else {\n          await hook();\n        }\n      } catch (error) {\n        this.logger.error(`钩子函数执行失败 (${hookType}):`, error);\n      }\n    }\n  }\n\n  /**\n   * 打印测试总结\n   */\n  printTestSummary(results) {\n    const passed = results.filter(r => r.success).length;\n    const failed = results.filter(r => !r.success).length;\n    const skipped = results.filter(r => r.skipped).length;\n    const totalDuration = results.reduce((sum, r) => sum + (r.duration || 0), 0);\n    \n    this.logger.info(`\n📊 测试总结:\n   ✅ 通过: ${passed}\n   ❌ 失败: ${failed}\n   ⏭️ 跳过: ${skipped}\n   ⏱️ 总耗时: ${totalDuration}ms\n    `);\n    \n    if (failed > 0) {\n      this.logger.error('失败的测试:');\n      results.filter(r => !r.success).forEach(r => {\n        this.logger.error(`  - ${r.name}: ${r.error?.message}`);\n      });\n    }\n  }\n}\n\n// 导出给浏览器使用\nif (typeof window !== 'undefined') {\n  window.PlaywrightRuntime = PlaywrightRuntime;\n}\n\n// Node.js 环境\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = PlaywrightRuntime;\n}\n\n// ES6 模块导出\nexport default PlaywrightRuntime;","/**\n * 测试运行器\n * 提供加载和运行 Playwright 脚本的接口\n */\nclass TestRunner {\n  constructor(options = {}) {\n    this.runtime = new (window.PlaywrightRuntime || PlaywrightRuntime)();\n    this.logger = new (window.PlaywrightLogger || console)();\n    this.options = {\n      timeout: 30000,\n      retries: 0,\n      ...options\n    };\n  }\n\n  /**\n   * 从文件加载并执行脚本\n   */\n  async loadAndRun(scriptPath) {\n    try {\n      this.logger.info(`📂 加载脚本: ${scriptPath}`);\n      const response = await fetch(scriptPath);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      \n      const scriptContent = await response.text();\n      return await this.runScript(scriptContent, scriptPath);\n    } catch (error) {\n      this.logger.error(`脚本加载失败: ${scriptPath}`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * 直接执行脚本字符串\n   */\n  async runScript(scriptContent, scriptName = 'inline-script') {\n    try {\n      this.logger.info(`🚀 执行脚本: ${scriptName}`);\n      const startTime = Date.now();\n      \n      const results = await this.runtime.executeScript(scriptContent);\n      \n      const duration = Date.now() - startTime;\n      this.logger.success(`✅ 脚本执行完成: ${scriptName} (${duration}ms)`);\n      \n      return {\n        scriptName,\n        duration,\n        results,\n        success: results.every(r => r.success || r.skipped)\n      };\n    } catch (error) {\n      this.logger.error(`脚本执行失败: ${scriptName}`, error);\n      return {\n        scriptName,\n        duration: 0,\n        results: [],\n        success: false,\n        error\n      };\n    }\n  }\n\n  /**\n   * 执行多个脚本文件\n   */\n  async runScripts(scriptPaths) {\n    const allResults = [];\n    \n    this.logger.info(`📦 批量执行 ${scriptPaths.length} 个脚本`);\n    \n    for (const path of scriptPaths) {\n      try {\n        const result = await this.loadAndRun(path);\n        allResults.push(result);\n      } catch (error) {\n        allResults.push({\n          scriptName: path,\n          duration: 0,\n          results: [],\n          success: false,\n          error\n        });\n      }\n    }\n    \n    // 输出批量执行总结\n    this.printBatchSummary(allResults);\n    \n    return allResults;\n  }\n\n  /**\n   * 从目录批量加载脚本\n   */\n  async runScriptsFromPattern(pattern) {\n    // 浏览器环境中无法直接读取文件系统\n    // 这里提供一个基础实现，需要服务器支持\n    this.logger.warn('浏览器环境中无法直接扫描文件系统，请使用 runScripts() 方法');\n    throw new Error('浏览器环境不支持文件系统扫描');\n  }\n\n  /**\n   * 设置全局钩子\n   */\n  setGlobalHooks(hooks) {\n    const { beforeAll, afterAll, beforeEach, afterEach } = hooks;\n    const test = window.PlaywrightTest.test;\n    \n    if (beforeAll) test.beforeAll(beforeAll);\n    if (afterAll) test.afterAll(afterAll);\n    if (beforeEach) test.beforeEach(beforeEach);\n    if (afterEach) test.afterEach(afterEach);\n    \n    this.logger.debug('全局钩子设置完成');\n  }\n\n  /**\n   * 设置全局配置\n   */\n  configure(config) {\n    this.options = { ...this.options, ...config };\n    this.logger.debug('测试配置更新:', this.options);\n  }\n\n  /**\n   * 打印批量执行总结\n   */\n  printBatchSummary(results) {\n    const totalScripts = results.length;\n    const successfulScripts = results.filter(r => r.success).length;\n    const failedScripts = results.filter(r => !r.success).length;\n    \n    const totalTests = results.reduce((sum, r) => sum + r.results.length, 0);\n    const passedTests = results.reduce((sum, r) => \n      sum + r.results.filter(test => test.success).length, 0\n    );\n    const failedTests = results.reduce((sum, r) => \n      sum + r.results.filter(test => !test.success && !test.skipped).length, 0\n    );\n    const skippedTests = results.reduce((sum, r) => \n      sum + r.results.filter(test => test.skipped).length, 0\n    );\n    \n    const totalDuration = results.reduce((sum, r) => sum + r.duration, 0);\n    \n    this.logger.info(`\n🎯 批量执行总结:\n📄 脚本统计:\n   ✅ 成功: ${successfulScripts}/${totalScripts}\n   ❌ 失败: ${failedScripts}/${totalScripts}\n\n🧪 测试统计:\n   ✅ 通过: ${passedTests}\n   ❌ 失败: ${failedTests}\n   ⏭️ 跳过: ${skippedTests}\n   📊 总计: ${totalTests}\n\n⏱️ 总耗时: ${totalDuration}ms\n    `);\n    \n    if (failedScripts > 0) {\n      this.logger.error('失败的脚本:');\n      results.filter(r => !r.success).forEach(r => {\n        this.logger.error(`  - ${r.scriptName}: ${r.error?.message || '未知错误'}`);\n      });\n    }\n  }\n\n  /**\n   * 获取执行统计\n   */\n  getStats(results) {\n    if (Array.isArray(results) && results[0]?.results) {\n      // 批量执行结果\n      return {\n        scripts: {\n          total: results.length,\n          passed: results.filter(r => r.success).length,\n          failed: results.filter(r => !r.success).length\n        },\n        tests: {\n          total: results.reduce((sum, r) => sum + r.results.length, 0),\n          passed: results.reduce((sum, r) => \n            sum + r.results.filter(test => test.success).length, 0\n          ),\n          failed: results.reduce((sum, r) => \n            sum + r.results.filter(test => !test.success && !test.skipped).length, 0\n          ),\n          skipped: results.reduce((sum, r) => \n            sum + r.results.filter(test => test.skipped).length, 0\n          )\n        },\n        duration: results.reduce((sum, r) => sum + r.duration, 0)\n      };\n    } else {\n      // 单个脚本执行结果\n      return {\n        tests: {\n          total: results.results?.length || 0,\n          passed: results.results?.filter(test => test.success).length || 0,\n          failed: results.results?.filter(test => !test.success && !test.skipped).length || 0,\n          skipped: results.results?.filter(test => test.skipped).length || 0\n        },\n        duration: results.duration || 0\n      };\n    }\n  }\n\n  /**\n   * 清理资源\n   */\n  cleanup() {\n    // 清理全局钩子\n    const test = window.PlaywrightTest.test;\n    test._beforeAllHooks = [];\n    test._afterAllHooks = [];\n    test._beforeEachHooks = [];\n    test._afterEachHooks = [];\n    \n    this.logger.debug('测试运行器清理完成');\n  }\n}\n\n// 导出给浏览器使用\nif (typeof window !== 'undefined') {\n  window.PlaywrightTestRunner = TestRunner;\n}\n\n// Node.js 环境\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = TestRunner;\n}\n\n// ES6 模块导出\nexport default TestRunner;","/**\n * Playwright 执行引擎主入口文件\n * 将所有组件组合并导出统一的 API\n */\n\n// 导入所有依赖模块\nimport PlaywrightLogger from './utils/logger.js';\nimport PlaywrightWaitManager from './dom/wait-manager.js';\nimport PlaywrightEventSimulator from './dom/event-simulator.js';\nimport PlaywrightLocatorAdapter from './adapters/locator-adapter.js';\nimport PlaywrightPageAdapter from './adapters/page-adapter.js';\nimport PlaywrightExpectAdapter, { createExpect } from './adapters/expect-adapter.js';\nimport PlaywrightRuntime from './runtime/playwright-runtime.js';\nimport PlaywrightTestRunner from './runtime/test-runner.js';\n\n// 确保所有依赖都已加载\nfunction ensureDependencies() {\n  const dependencies = {\n    PlaywrightLogger,\n    PlaywrightWaitManager, \n    PlaywrightEventSimulator,\n    PlaywrightLocatorAdapter,\n    PlaywrightPageAdapter,\n    PlaywrightExpectAdapter,\n    createExpect,\n    PlaywrightRuntime,\n    PlaywrightTestRunner\n  };\n  \n  const missing = Object.entries(dependencies)\n    .filter(([name, component]) => !component)\n    .map(([name]) => name);\n  \n  if (missing.length > 0) {\n    console.warn('缺少依赖:', missing);\n  }\n}\n\n/**\n * Playwright 执行引擎主类\n */\nclass PlaywrightExecutionEngine {\n  constructor(options = {}) {\n    ensureDependencies();\n    \n    this.options = {\n      logLevel: 'info',\n      timeout: 30000,\n      ...options\n    };\n    \n    // 初始化组件\n    this.logger = new PlaywrightLogger(this.options.logLevel);\n    this.runtime = new PlaywrightRuntime();\n    this.testRunner = new PlaywrightTestRunner(this.options);\n    \n    this.logger.info('Playwright 执行引擎初始化完成');\n  }\n\n  /**\n   * 执行脚本字符串\n   */\n  async runScript(scriptContent, scriptName = 'inline') {\n    return await this.testRunner.runScript(scriptContent, scriptName);\n  }\n\n  /**\n   * 加载并执行脚本文件\n   */\n  async loadAndRun(scriptPath) {\n    return await this.testRunner.loadAndRun(scriptPath);\n  }\n\n  /**\n   * 批量执行脚本文件\n   */\n  async runScripts(scriptPaths) {\n    return await this.testRunner.runScripts(scriptPaths);\n  }\n\n  /**\n   * 创建新的 Page 实例\n   */\n  createPage() {\n    return new PlaywrightPageAdapter();\n  }\n\n  /**\n   * 创建 expect 实例\n   */\n  expect(target) {\n    return createExpect()(target);\n  }\n\n  /**\n   * 设置全局配置\n   */\n  configure(config) {\n    this.options = { ...this.options, ...config };\n    this.testRunner.configure(config);\n    return this;\n  }\n\n  /**\n   * 设置全局钩子\n   */\n  setHooks(hooks) {\n    this.testRunner.setGlobalHooks(hooks);\n    return this;\n  }\n\n  /**\n   * 获取执行统计\n   */\n  getStats(results) {\n    return this.testRunner.getStats(results);\n  }\n\n  /**\n   * 清理资源\n   */\n  cleanup() {\n    this.testRunner.cleanup();\n  }\n\n  /**\n   * 获取版本信息\n   */\n  static getVersion() {\n    return typeof __VERSION__ !== 'undefined' ? __VERSION__ : '1.0.0-beta';\n  }\n\n  /**\n   * 检查浏览器兼容性\n   */\n  static checkCompatibility() {\n    const features = {\n      'Promises': typeof Promise !== 'undefined',\n      'async/await': (async () => {})().constructor === Promise,\n      'Fetch API': typeof fetch !== 'undefined',\n      'MutationObserver': typeof MutationObserver !== 'undefined',\n      'querySelector': typeof document.querySelector !== 'undefined',\n      'addEventListener': typeof document.addEventListener !== 'undefined'\n    };\n    \n    const unsupported = Object.entries(features)\n      .filter(([feature, supported]) => !supported)\n      .map(([feature]) => feature);\n    \n    if (unsupported.length > 0) {\n      console.warn('浏览器不支持以下功能:', unsupported);\n      return false;\n    }\n    \n    return true;\n  }\n}\n\n// 静态工厂方法\nPlaywrightExecutionEngine.create = function(options) {\n  if (!PlaywrightExecutionEngine.checkCompatibility()) {\n    throw new Error('当前浏览器不支持 Playwright 执行引擎');\n  }\n  \n  return new PlaywrightExecutionEngine(options);\n};\n\n// 快捷方法\nPlaywrightExecutionEngine.run = async function(script, options = {}) {\n  const engine = PlaywrightExecutionEngine.create(options);\n  return await engine.runScript(script);\n};\n\nPlaywrightExecutionEngine.load = async function(scriptPath, options = {}) {\n  const engine = PlaywrightExecutionEngine.create(options);\n  return await engine.loadAndRun(scriptPath);\n};\n\n// 导出核心组件（供高级用户使用）\nPlaywrightExecutionEngine.Components = {\n  Logger: PlaywrightLogger,\n  WaitManager: PlaywrightWaitManager,\n  EventSimulator: PlaywrightEventSimulator,\n  PageAdapter: PlaywrightPageAdapter,\n  LocatorAdapter: PlaywrightLocatorAdapter,\n  ExpectAdapter: PlaywrightExpectAdapter,\n  Runtime: PlaywrightRuntime,\n  TestRunner: PlaywrightTestRunner\n};\n\n// 全局导出（仅在浏览器环境）\nif (typeof window !== 'undefined') {\n  window.PlaywrightExecutionEngine = PlaywrightExecutionEngine;\n  \n  // 兼容性别名\n  window.PWEngine = PlaywrightExecutionEngine;\n  \n  // 快捷全局方法\n  window.runPlaywrightScript = PlaywrightExecutionEngine.run;\n  window.loadPlaywrightScript = PlaywrightExecutionEngine.load;\n  \n  console.log('🎭 Playwright 执行引擎已加载完成');\n  console.log('版本:', PlaywrightExecutionEngine.getVersion());\n  console.log('使用方法: new PlaywrightExecutionEngine() 或 PlaywrightExecutionEngine.create()');\n}\n\n// ES6 模块默认导出\nexport default PlaywrightExecutionEngine;\n\n// 命名导出\nexport {\n  PlaywrightLogger,\n  PlaywrightWaitManager,\n  PlaywrightEventSimulator,\n  PlaywrightLocatorAdapter,\n  PlaywrightPageAdapter,\n  PlaywrightExpectAdapter,\n  createExpect,\n  PlaywrightRuntime,\n  PlaywrightTestRunner\n};"],"names":["Logger","constructor","level","this","levels","debug","info","warn","error","message","args","console","success","log","window","PlaywrightLogger","module","exports","WaitManager$1","defaultTimeout","logger","waitForElement","_0","__async","arguments","selector","timeout","Promise","resolve","reject","startTime","Date","now","existing","document","querySelector","timeoutId","observer","cleanup","disconnect","setTimeout","Error","MutationObserver","element","elapsed","observe","body","childList","subtree","attributes","waitForCondition","conditionFn","errorMessage","check","result","waitForFunction","fn","waitForURL","urlPattern","currentUrl","location","href","includes","RegExp","test","waitForLoadState","state","checkState","readyState","addEventListener","once","waitForTimeout","ms","PlaywrightWaitManager","WaitManager","EventSimulator$1","simulateClick","options","button","clickCount","delay","focus","forEach","eventType","index","event","MouseEvent","view","bubbles","cancelable","detail","dispatchEvent","simulateDoubleClick","dblClickEvent","simulateHover","simulateKeyPress","key","ctrlKey","shiftKey","altKey","metaKey","KeyboardEvent","code","getKeyCode","simulateTyping","_1","text","i","length","char","currentValue","value","Event","simulateFormChange","type","checked","tagName","Enter","Escape","Tab","Backspace","Delete","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","scrollIntoView","behavior","block","PlaywrightEventSimulator","EventSimulator","LocatorAdapter$1","LocatorAdapter","page","filters","waitManager","eventSimulator","filter","newLocator","first","nth","last","position","n","getByText","hasText","exact","click","getElement","scrollIntoViewIfNeeded","dblclick","fill","press","pressSequentially","hover","uncheck","selectOption","values","Array","isArray","from","option","selected","isVisible","rect","getBoundingClientRect","style","getComputedStyle","width","height","visibility","display","offsetParent","e","isHidden","isEnabled","disabled","hasAttribute","isDisabled","isChecked","textContent","innerText","innerHTML","getAttribute","name","inputValue","waitFor","waitForVisible","waitForHidden","waitForAttached","waitForDetached","count","elements","querySelectorAll","applyFilters","all","map","locator","buildUniqueSelector","_element","contains","filteredElements","filtered","applyFilter","el","hasNotText","id","path","current","toLowerCase","className","classes","split","c","trim","join","siblings","_a","parentNode","children","sibling","indexOf","unshift","parentElement","PlaywrightLocatorAdapter","PageAdapter$1","goto","url","waitUntil","status","goBack","history","back","goForward","forward","reload","title","content","documentElement","outerHTML","waitForSelector","getByRole","role","xpath","getByLabel","getByPlaceholder","getByTestId","testId","getByTitle","startsWith","waitForXPath","substring","evaluate","XPathResult","FIRST_ORDERED_NODE_TYPE","singleNodeValue","arg","apply","evaluateHandle","addScriptTag","script","createElement","src","head","appendChild","onload","onerror","addStyleTag","link","rel","top","bottom","innerHeight","left","right","innerWidth","boundingBox","x","scrollX","y","scrollY","setViewportSize","size","viewportSize","PlaywrightPageAdapter","PageAdapter","ExpectAdapter$1","ExpectAdapter","target","isNot","not","newExpect","toBeVisible","expected","actualVisible","toBeHidden","toBeEnabled","actualEnabled","toBeDisabled","toBeChecked","actualChecked","toHaveText","expectedText","useInnerText","actualText","matches","every","toHaveExactText","toContainText","toHaveAttribute","actualValue","toHaveValue","expectedValue","toHaveClass","expectedClass","classAttr","cls","toHaveId","expectedId","toHaveCount","expectedCount","actualCount","toHaveURL","expectedUrl","toHaveTitle","expectedTitle","currentTitle","description","createExpect","PlaywrightExpectAdapter","PlaywrightExpect","PlaywrightRuntime$1","setupGlobalEnvironment","PlaywrightTest","createTestFunction","expect","createExpectFunction","setupModuleSystem","self","testFn","run","context","duration","skip","skipped","only","testCase","describe","suiteFn","beforeEach","hookFn","_beforeEachHooks","push","afterEach","_afterEachHooks","beforeAll","_beforeAllHooks","afterAll","_afterAllHooks","importShim","executeScript","scriptContent","transformedScript","transformImports","testCases","runInSandbox","runTests","transformed","importPatterns","replace","match","imports","item","cleanItem","namespace","originalTest","Object","keys","Function","scriptFunction","results","onlyTests","testsToRun","runHooks","printTestSummary","hookType","hooks","hook","passed","r","failed","totalDuration","reduce","sum","PlaywrightRuntime","TestRunner","runtime","__spreadValues","retries","loadAndRun","scriptPath","response","fetch","ok","statusText","runScript","scriptName","runScripts","scriptPaths","allResults","printBatchSummary","runScriptsFromPattern","pattern","setGlobalHooks","configure","config","totalScripts","successfulScripts","failedScripts","totalTests","passedTests","failedTests","skippedTests","getStats","scripts","total","tests","_b","_c","_d","_e","PlaywrightTestRunner","PlaywrightExecutionEngine","dependencies","missing","entries","component","ensureDependencies","logLevel","testRunner","createPage","setHooks","getVersion","checkCompatibility","features","Promises","unsupported","feature","supported","create","engine","load","Components","Runtime","PWEngine","runPlaywrightScript","loadPlaywrightScript"],"mappings":"sxBAGA,MAAMA,EACJ,WAAAC,CAAYC,EAAQ,QAClBC,KAAKD,MAAQA,EACbC,KAAKC,OAAS,CACZC,MAAO,EACPC,KAAM,EACNC,KAAM,EACNC,MAAO,EAEX,CAEA,KAAAH,CAAMI,KAAYC,GACZP,KAAKC,OAAOD,KAAKD,QAAUC,KAAKC,OAAOC,OACzCM,QAAQN,MAAM,WAAWI,OAAcC,EAE3C,CAEA,IAAAJ,CAAKG,KAAYC,GACXP,KAAKC,OAAOD,KAAKD,QAAUC,KAAKC,OAAOE,MACzCK,QAAQL,KAAK,UAAUG,OAAcC,EAEzC,CAEA,IAAAH,CAAKE,KAAYC,GACXP,KAAKC,OAAOD,KAAKD,QAAUC,KAAKC,OAAOG,MACzCI,QAAQJ,KAAK,UAAUE,OAAcC,EAEzC,CAEA,KAAAF,CAAMC,KAAYC,GACZP,KAAKC,OAAOD,KAAKD,QAAUC,KAAKC,OAAOI,OACzCG,QAAQH,MAAM,WAAWC,OAAcC,EAE3C,CAEA,OAAAE,CAAQH,KAAYC,GACdP,KAAKC,OAAOD,KAAKD,QAAUC,KAAKC,OAAOE,MACzCK,QAAQE,IAAI,eAAeJ,IAAW,kBAAmBC,EAE7D,EAIoB,oBAAXI,SACTA,OAAOC,iBAAmBf,GAIN,oBAAXgB,QAA0BA,OAAOC,UAC1CD,OAAOC,QAAUjB,GCjDnB,IAAAkB,EAAA,MACE,WAAAjB,GACEE,KAAKgB,eAAiB,IACtBhB,KAAKiB,OAAS,IAAKN,OAAOC,kBAAoBJ,QAChD,CAKM,cAAAU,CAAeC,GAAyC,OAAAC,EAAApB,KAAAqB,UAAA,UAAzCC,EAAUC,EAAUvB,KAAKgB,gBAC5C,OAAO,IAAIQ,QAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAYC,KAAKC,MAGjBC,EAAWC,SAASC,cAAcV,GACxC,GAAIQ,EAEF,OADA9B,KAAKiB,OAAOf,MAAM,WAAWoB,KACtBG,EAAQK,GAGjB,IAAIG,EACAC,EAEJ,MAAMC,EAAU,KACVF,gBAAwBA,GACxBC,KAAmBE,cAIzBH,EAAYI,WAAW,KACrBF,IACAT,EAAO,IAAIY,MAAM,WAAWhB,MAAaC,UACxCA,GAGHW,EAAW,IAAIK,iBAAiB,KAC9B,MAAMC,EAAUT,SAASC,cAAcV,GACvC,GAAIkB,EAAS,CACXL,IACA,MAAMM,EAAUb,KAAKC,MAAQF,EAC7B3B,KAAKiB,OAAOf,MAAM,SAASoB,MAAamB,QACxChB,EAAQe,EACV,IAGFN,EAASQ,QAAQX,SAASY,KAAM,CAC9BC,WAAW,EACXC,SAAS,EACTC,YAAY,KAGlB,EAAA,CAKM,gBAAAC,CAAiB5B,GAAqE,OAAAC,EAAApB,KAAAqB,UAAA,UAArE2B,EAAazB,EAAUvB,KAAKgB,eAAgBiC,EAAe,UAChF,OAAO,IAAIzB,QAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAYC,KAAKC,MAEjBqB,EAAQ,IAAY9B,EAAApB,KAAA,KAAA,YACxB,IACE,MAAMmD,QAAeH,IACrB,GAAIG,EAAQ,CACV,MAAMV,EAAUb,KAAKC,MAAQF,EAG7B,OAFA3B,KAAKiB,OAAOf,MAAM,SAASuC,aAC3BhB,EAAQ0B,EAEV,CACF,OAAS9C,GAEPL,KAAKiB,OAAOf,MAAM,eAAgBG,EAAMC,QAC1C,CAEIsB,KAAKC,MAAQF,GAAaJ,EAC5BG,EAAO,IAAIY,MAAM,GAAGW,MAAiB1B,SAIvCc,WAAWa,EAAO,IACpB,GAEAA,KAEJ,EAAA,CAKM,eAAAE,CAAgBjC,GAAmC,OAAAC,EAAApB,KAAAqB,UAAA,UAAnCgC,EAAI9B,EAAUvB,KAAKgB,gBACvC,OAAOhB,KAAK+C,iBAAiBM,EAAI9B,EAAS,WAC5C,EAAA,CAKM,UAAA+B,CAAWnC,GAA2C,OAAAC,EAAApB,KAAAqB,UAAA,UAA3CkC,EAAYhC,EAAUvB,KAAKgB,gBAC1C,OAAOhB,KAAK+C,iBACV,KACE,MAAMS,EAAa7C,OAAO8C,SAASC,KACnC,MAA0B,iBAAfH,EACFC,EAAWG,SAASJ,GAEzBA,aAAsBK,QACjBL,EAAWM,KAAKL,IAI3BjC,EACA,cAAcgC,IAElB,EAAA,CAKM,gBAAAO,CAAiBC,EAAQ,QAAQ,OAAA3C,EAAApB,KAAA,KAAA,YACrC,OAAO,IAAIwB,QAASC,IAClB,MAAMuC,EAAa,KACH,SAAVD,GAA4C,aAAxBhC,SAASkC,YAC/BjE,KAAKiB,OAAOf,MAAM,UAClBuB,KACmB,qBAAVsC,GAAwD,YAAxBhC,SAASkC,YAClDjE,KAAKiB,OAAOf,MAAM,cAClBuB,KACmB,gBAAVsC,GAET1B,WAAW,KACTrC,KAAKiB,OAAOf,MAAM,QAClBuB,KACC,MAIqB,aAAxBM,SAASkC,YAAuC,SAAVF,GAEP,YAAxBhC,SAASkC,YAAsC,qBAAVF,EAD9CtC,IAIAM,SAASmC,iBAAiB,mBAAoBF,EAAY,CAAEG,MAAM,KAGxE,EAAA,CAKM,cAAAC,CAAeC,GAAI,OAAAjD,EAAApB,KAAA,KAAA,YAEvB,OADAA,KAAKiB,OAAOf,MAAM,MAAMmE,OACjB,IAAI7C,QAAQC,GAAWY,WAAWZ,EAAS4C,GACpD,EAAA,GAIoB,oBAAX1D,SACTA,OAAO2D,sBAAwBC,GAIX,oBAAX1D,QAA0BA,OAAOC,UAC1CD,OAAOC,QAAUyD,GChKnB,IAAAC,EAAA,MACE,WAAA1E,GACEE,KAAKiB,OAAS,IAAKN,OAAOC,kBAAoBJ,QAChD,CAKA,aAAAiE,CAAcjC,EAASkC,EAAU,IAC/B,MAAMC,OAAEA,EAAS,EAAAC,WAAGA,EAAa,EAAAC,MAAGA,EAAQ,GAAMH,EAGlDlC,EAAQsC,QAGY,CAAC,YAAa,UAAW,SAEjCC,QAAQ,CAACC,EAAWC,KAC9B5C,WAAW,KACT,MAAM6C,EAAQ,IAAIC,WAAWH,EAAW,CACtCI,KAAMzE,OACN0E,SAAS,EACTC,YAAY,EACZX,SACAY,OAAQX,IAGVpC,EAAQgD,cAAcN,GACtBlF,KAAKiB,OAAOf,MAAM,MAAM8E,SACvBH,EAAQI,IAEf,CAKA,mBAAAQ,CAAoBjD,GAClBxC,KAAKyE,cAAcjC,EAAS,CAAEoC,WAAY,IAE1CvC,WAAW,KACT,MAAMqD,EAAgB,IAAIP,WAAW,WAAY,CAC/CC,KAAMzE,OACN0E,SAAS,EACTC,YAAY,EACZC,OAAQ,IAEV/C,EAAQgD,cAAcE,GACtB1F,KAAKiB,OAAOf,MAAM,mBACjB,IACL,CAKA,aAAAyF,CAAcnD,GACG,CAAC,YAAa,cAEtBuC,QAAQC,IACb,MAAME,EAAQ,IAAIC,WAAWH,EAAW,CACtCI,KAAMzE,OACN0E,SAAS,EACTC,YAAY,IAEd9C,EAAQgD,cAAcN,GACtBlF,KAAKiB,OAAOf,MAAM,MAAM8E,SAE5B,CAKA,gBAAAY,CAAiBpD,EAASqD,EAAKnB,EAAU,CAAA,GACvC,MAAMoB,QAAEA,GAAU,EAAAC,SAAOA,GAAW,SAAOC,GAAS,EAAAC,QAAOA,GAAU,GAAUvB,EAE/ElC,EAAQsC,QAEe,CAAC,UAAW,WAAY,SAEhCC,QAAQC,IACrB,MAAME,EAAQ,IAAIgB,cAAclB,EAAW,CACzCa,MACAM,KAAMnG,KAAKoG,WAAWP,GACtBR,SAAS,EACTC,YAAY,EACZQ,UACAC,WACAC,SACAC,YAGFzD,EAAQgD,cAAcN,GACtBlF,KAAKiB,OAAOf,MAAM,MAAM8E,SAAiBa,MAE7C,CAKM,cAAAQ,CAAelF,EAASmF,GAAoB,OAAAlF,EAAApB,KAAAqB,UAAA,UAA7BmB,EAAS+D,EAAM7B,EAAU,CAAA,GAC5C,MAAMG,MAAEA,EAAQ,IAAOH,EAEvBlC,EAAQsC,QAER,IAAA,IAAS0B,EAAI,EAAGA,EAAID,EAAKE,OAAQD,IAAK,CACpC,MAAME,EAAOH,EAAKC,GAGZG,EAAenE,EAAQoE,OAAS,GACtCpE,EAAQoE,MAAQD,EAAeD,EAG/BlE,EAAQgD,cAAc,IAAIqB,MAAM,QAAS,CAAExB,SAAS,KACpDrF,KAAK4F,iBAAiBpD,EAASkE,GAE3B7B,EAAQ,UACJ,IAAIrD,QAAQC,GAAWY,WAAWZ,EAASoD,IAErD,CAGArC,EAAQgD,cAAc,IAAIqB,MAAM,SAAU,CAAExB,SAAS,KACrDrF,KAAKiB,OAAOf,MAAM,UAAUqG,KAC9B,EAAA,CAKA,kBAAAO,CAAmBtE,EAASoE,GACL,aAAjBpE,EAAQuE,MAAwC,UAAjBvE,EAAQuE,KACzCvE,EAAQwE,QAAUJ,GACTpE,EAAQyE,QACjBzE,EAAQoE,MAAQA,GAMlBpE,EAAQgD,cAAc,IAAIqB,MAAM,QAAS,CAAExB,SAAS,KACpD7C,EAAQgD,cAAc,IAAIqB,MAAM,SAAU,CAAExB,SAAS,KAErDrF,KAAKiB,OAAOf,MAAM,WAAWsC,EAAQyE,aAAaL,IACpD,CAKA,UAAAR,CAAWP,GAcT,MAbiB,CACfqB,MAAS,QACTC,OAAU,SACVC,IAAO,MACPC,UAAa,YACbC,OAAU,SACVC,QAAW,UACXC,UAAa,YACbC,UAAa,YACbC,WAAc,aACd,IAAK,SAGS7B,IAAQA,CAC1B,CAKM,cAAA8B,CAAexG,GAAuB,OAAAC,EAAApB,KAAAqB,UAAA,UAAvBmB,EAASkC,EAAU,IACtC,MAAMkD,SAAEA,EAAW,SAAAC,MAAUA,EAAQ,UAAanD,EAElDlC,EAAQmF,eAAe,CAAEC,WAAUC,gBAG7B,IAAIrG,QAAQC,GAAWY,WAAWZ,EAAS,MAEjDzB,KAAKiB,OAAOf,MAAM,YACpB,EAAA,GAIoB,oBAAXS,SACTA,OAAOmH,yBAA2BC,GAId,oBAAXlH,QAA0BA,OAAOC,UAC1CD,OAAOC,QAAUiH,GCzLnB,IAAAC,EAAA,MAAMC,EACJ,WAAAnI,CAAYwB,EAAU4G,EAAMxD,EAAU,CAAA,GACpC1E,KAAKsB,SAAWA,EAChBtB,KAAKkI,KAAOA,EACZlI,KAAK0E,QAAUA,EACf1E,KAAKmI,QAAU,GACfnI,KAAKiB,OAAS,IAAKN,OAAOC,kBAAoBJ,SAC9CR,KAAKoI,YAAcF,EAAKE,YACxBpI,KAAKqI,eAAiBH,EAAKG,cAC7B,CAOA,MAAAC,CAAO5D,GACL,MAAM6D,EAAa,IAAIN,EAAejI,KAAKsB,SAAUtB,KAAKkI,MAE1D,OADAK,EAAWJ,QAAU,IAAInI,KAAKmI,QAASzD,GAChC6D,CACT,CAKA,KAAAC,GACE,OAAOxI,KAAKyI,IAAI,EAClB,CAKA,IAAAC,GACE,OAAO1I,KAAKsI,OAAO,CAAEK,SAAU,QACjC,CAKA,GAAAF,CAAIG,GACF,OAAO5I,KAAKsI,OAAO,CAAEK,SAAUC,GACjC,CAKA,SAAAC,CAAUtC,EAAM7B,EAAU,IACxB,OAAO1E,KAAKsI,OAAO,CAAEQ,QAASvC,EAAMwC,MAAOrE,EAAQqE,OACrD,CAOM,KAAAC,GAAoB,OAAA5H,EAAApB,KAAAqB,UAAA,UAAdqD,EAAU,IACpB,MAAMlC,QAAgBxC,KAAKiJ,mBACrBjJ,KAAKkI,KAAKgB,uBAAuB1G,GAEvCxC,KAAKqI,eAAe5D,cAAcjC,EAASkC,GAC3C1E,KAAKiB,OAAOf,MAAM,SAASF,KAAKsB,WAClC,EAAA,CAKM,QAAA6H,GAAuB,OAAA/H,EAAApB,KAAAqB,UAAA,UAAdqD,EAAU,IACvB,MAAMlC,QAAgBxC,KAAKiJ,mBACrBjJ,KAAKkI,KAAKgB,uBAAuB1G,GAEvCxC,KAAKqI,eAAe5C,oBAAoBjD,GACxCxC,KAAKiB,OAAOf,MAAM,SAASF,KAAKsB,WAClC,EAAA,CAKM,IAAA8H,CAAKjI,GAAqB,OAAAC,EAAApB,KAAAqB,UAAA,UAArBuF,EAAOlC,EAAU,IAC1B,MAAMlC,QAAgBxC,KAAKiJ,mBACrBjJ,KAAKkI,KAAKgB,uBAAuB1G,GAGvCA,EAAQoE,MAAQ,GAChBpE,EAAQoE,MAAQA,EAGhBpE,EAAQgD,cAAc,IAAIqB,MAAM,QAAS,CAAExB,SAAS,KACpD7C,EAAQgD,cAAc,IAAIqB,MAAM,SAAU,CAAExB,SAAS,KAErDrF,KAAKiB,OAAOf,MAAM,SAASF,KAAKsB,eAAesF,KACjD,EAAA,CAKM,KAAAyC,CAAMlI,GAAmB,OAAAC,EAAApB,KAAAqB,UAAA,UAAnBwE,EAAKnB,EAAU,IACzB,MAAMlC,QAAgBxC,KAAKiJ,aAC3BzG,EAAQsC,QAER9E,KAAKqI,eAAezC,iBAAiBpD,EAASqD,EAAKnB,GACnD1E,KAAKiB,OAAOf,MAAM,OAAOF,KAAKsB,eAAeuE,IAC/C,EAAA,CAKM,iBAAAyD,CAAkBnI,GAAoB,OAAAC,EAAApB,KAAAqB,UAAA,UAApBkF,EAAM7B,EAAU,IACtC,MAAMlC,QAAgBxC,KAAKiJ,mBACrBjJ,KAAKqI,eAAehC,eAAe7D,EAAS+D,EAAM7B,GACxD1E,KAAKiB,OAAOf,MAAM,UAAUF,KAAKsB,gBAAgBiF,KACnD,EAAA,CAKM,KAAAgD,GAAQ,OAAAnI,EAAApB,KAAA,KAAA,YACZ,MAAMwC,QAAgBxC,KAAKiJ,mBACrBjJ,KAAKkI,KAAKgB,uBAAuB1G,GAEvCxC,KAAKqI,eAAe1C,cAAcnD,GAClCxC,KAAKiB,OAAOf,MAAM,SAASF,KAAKsB,WAClC,EAAA,CAKM,KAAA4B,GAAQ,OAAA9B,EAAApB,KAAA,KAAA,YACZ,MAAMwC,QAAgBxC,KAAKiJ,aACN,aAAjBzG,EAAQuE,MAAwC,UAAjBvE,EAAQuE,OACzCvE,EAAQwE,SAAU,EAClBxE,EAAQgD,cAAc,IAAIqB,MAAM,SAAU,CAAExB,SAAS,KACrDrF,KAAKiB,OAAOf,MAAM,UAAUF,KAAKsB,YAErC,EAAA,CAKM,OAAAkI,GAAU,OAAApI,EAAApB,KAAA,KAAA,YACd,MAAMwC,QAAgBxC,KAAKiJ,aACN,aAAjBzG,EAAQuE,OACVvE,EAAQwE,SAAU,EAClBxE,EAAQgD,cAAc,IAAIqB,MAAM,SAAU,CAAExB,SAAS,KACrDrF,KAAKiB,OAAOf,MAAM,YAAYF,KAAKsB,YAEvC,EAAA,CAKM,YAAAmI,CAAatI,GAAsB,OAAAC,EAAApB,KAAAqB,UAAA,UAAtBqI,EAAQhF,EAAU,IACnC,MAAMlC,QAAgBxC,KAAKiJ,aACH,WAApBzG,EAAQyE,UACN0C,MAAMC,QAAQF,GAEhBC,MAAME,KAAKrH,EAAQkC,SAASK,QAAQ+E,IAClCA,EAAOC,SAAWL,EAAO/F,SAASmG,EAAOlD,QAAU8C,EAAO/F,SAASmG,EAAOvD,QAG5E/D,EAAQoE,MAAQ8C,EAElBlH,EAAQgD,cAAc,IAAIqB,MAAM,SAAU,CAAExB,SAAS,KACrDrF,KAAKiB,OAAOf,MAAM,WAAWF,KAAKsB,cAAcoI,KAEpD,EAAA,CAOM,SAAAM,GAAY,OAAA5I,EAAApB,KAAA,KAAA,YAChB,IACE,MAAMwC,QAAgBxC,KAAKiJ,aACrBgB,EAAOzH,EAAQ0H,wBACfC,EAAQC,iBAAiB5H,GAE/B,OAAOyH,EAAKI,MAAQ,GACbJ,EAAKK,OAAS,GACO,WAArBH,EAAMI,YACY,SAAlBJ,EAAMK,SACmB,OAAzBhI,EAAQiI,YACjB,CAAA,MAAQC,GACN,OAAO,CACT,CACF,EAAA,CAKM,QAAAC,GAAW,OAAAvJ,EAAApB,KAAA,KAAA,YACf,cAAeA,KAAKgK,YACtB,EAAA,CAKM,SAAAY,GAAY,OAAAxJ,EAAApB,KAAA,KAAA,YAChB,IACE,MAAMwC,QAAgBxC,KAAKiJ,aAC3B,OAAQzG,EAAQqI,WAAarI,EAAQsI,aAAa,WACpD,CAAA,MAAQJ,GACN,OAAO,CACT,CACF,EAAA,CAKM,UAAAK,GAAa,OAAA3J,EAAApB,KAAA,KAAA,YACjB,cAAeA,KAAK4K,YACtB,EAAA,CAKM,SAAAI,GAAY,OAAA5J,EAAApB,KAAA,KAAA,YAChB,IAEE,aADsBA,KAAKiJ,cACZjC,UAAW,CAC5B,CAAA,MAAQ0D,GACN,OAAO,CACT,CACF,EAAA,CAOM,WAAAO,GAAc,OAAA7J,EAAApB,KAAA,KAAA,YAElB,aADsBA,KAAKiJ,cACZgC,aAAe,EAChC,EAAA,CAKM,SAAAC,GAAY,OAAA9J,EAAApB,KAAA,KAAA,YAEhB,aADsBA,KAAKiJ,cACZiC,WAAa,EAC9B,EAAA,CAKM,SAAAC,GAAY,OAAA/J,EAAApB,KAAA,KAAA,YAEhB,aADsBA,KAAKiJ,cACZkC,WAAa,EAC9B,EAAA,CAKM,YAAAC,CAAaC,GAAM,OAAAjK,EAAApB,KAAA,KAAA,YAEvB,aADsBA,KAAKiJ,cACZmC,aAAaC,EAC9B,EAAA,CAKM,UAAAC,GAAa,OAAAlK,EAAApB,KAAA,KAAA,YAEjB,aADsBA,KAAKiJ,cACZrC,OAAS,EAC1B,EAAA,CAOM,OAAA2E,GAAsB,OAAAnK,EAAApB,KAAAqB,UAAA,UAAdqD,EAAU,IACtB,MAAMX,MAAEA,EAAQ,UAAAxC,QAAWA,EAAU,KAAUmD,EAE/C,OAAQX,GACN,IAAK,UACH,OAAO/D,KAAKwL,eAAejK,GAC7B,IAAK,SACH,OAAOvB,KAAKyL,cAAclK,GAC5B,IAAK,WACH,OAAOvB,KAAK0L,gBAAgBnK,GAC9B,IAAK,WACH,OAAOvB,KAAK2L,gBAAgBpK,GAC9B,QACE,MAAM,IAAIe,MAAM,YAAYyB,KAElC,EAAA,CAEM,cAAAyH,CAAejK,GAAS,OAAAH,EAAApB,KAAA,KAAA,YAC5B,OAAOA,KAAKoI,YAAYrF,iBACtB,IAAM/C,KAAKgK,YACXzI,EACA,OAAOvB,KAAKsB,mBAEhB,EAAA,CAEM,aAAAmK,CAAclK,GAAS,OAAAH,EAAApB,KAAA,KAAA,YAC3B,OAAOA,KAAKoI,YAAYrF,iBACtB,IAAM/C,KAAK2K,WACXpJ,EACA,OAAOvB,KAAKsB,mBAEhB,EAAA,CAEM,eAAAoK,CAAgBnK,GAAS,OAAAH,EAAApB,KAAA,KAAA,YAC7B,OAAOA,KAAKoI,YAAYrF,iBACtB,IAAM/C,KAAK4L,QAAU,EACrBrK,EACA,OAAOvB,KAAKsB,uBAEhB,EAAA,CAEM,eAAAqK,CAAgBpK,GAAS,OAAAH,EAAApB,KAAA,KAAA,YAC7B,OAAOA,KAAKoI,YAAYrF,iBACtB,IAAuB,IAAjB/C,KAAK4L,QACXrK,EACA,OAAOvB,KAAKsB,uBAEhB,EAAA,CAOM,KAAAsK,GAAQ,OAAAxK,EAAApB,KAAA,KAAA,YACZ,MAAM6L,EAAW9J,SAAS+J,iBAAiB9L,KAAKsB,UAChD,OAAOtB,KAAK+L,aAAapC,MAAME,KAAKgC,IAAWpF,MACjD,EAAA,CAKM,GAAAuF,GAAM,OAAA5K,EAAApB,KAAA,KAAA,YACV,MAAM6L,EAAW9J,SAAS+J,iBAAiB9L,KAAKsB,UAGhD,OAFiBtB,KAAK+L,aAAapC,MAAME,KAAKgC,IAE9BI,IAAIzJ,IAClB,MAAM0J,EAAU,IAAIjE,EAAejI,KAAKmM,oBAAoB3J,GAAUxC,KAAKkI,MAE3E,OADAgE,EAAQE,SAAW5J,EACZ0J,GAEX,EAAA,CAKM,UAAAjD,GAAa,OAAA7H,EAAApB,KAAA,KAAA,YAEjB,GAAIA,KAAKoM,UAAYrK,SAASsK,SAASrM,KAAKoM,UAC1C,OAAOpM,KAAKoM,SAGd,MAAMP,EAAW9J,SAAS+J,iBAAiB9L,KAAKsB,UAEhD,GAAwB,IAApBuK,EAASpF,OACX,MAAM,IAAInE,MAAM,UAAUtC,KAAKsB,YAGjC,MAAMgL,EAAmBtM,KAAK+L,aAAapC,MAAME,KAAKgC,IAEtD,GAAgC,IAA5BS,EAAiB7F,OACnB,MAAM,IAAInE,MAAM,aAAatC,KAAKsB,YAGpC,OAAOgL,EAAiB,EAC1B,EAAA,CAKA,YAAAP,CAAaF,GACX,IAAIU,EAAWV,EAEf,IAAA,MAAWvD,KAAUtI,KAAKmI,QACxBoE,EAAWvM,KAAKwM,YAAYD,EAAUjE,GAGxC,OAAOiE,CACT,CAKA,WAAAC,CAAYX,EAAUvD,GACpB,MAA+B,iBAApBA,EAAOK,SACTkD,EAASvD,EAAOK,UAAY,CAACkD,EAASvD,EAAOK,WAAa,GAG3C,SAApBL,EAAOK,SACFkD,EAASpF,OAAS,EAAI,CAACoF,EAASA,EAASpF,OAAS,IAAM,GAG7D6B,EAAOQ,QACF+C,EAASvD,OAAOmE,IACrB,MAAMlG,EAAOkG,EAAGxB,aAAewB,EAAGvB,WAAa,GAC/C,OAAO5C,EAAOS,MAAQxC,IAAS+B,EAAOQ,QAAUvC,EAAK5C,SAAS2E,EAAOQ,WAIrER,EAAOoE,WACFb,EAASvD,OAAOmE,KACRA,EAAGxB,aAAewB,EAAGvB,WAAa,IAClCvH,SAAS2E,EAAOoE,aAI1Bb,CACT,CAKA,mBAAAM,CAAoB3J,SAClB,GAAIA,EAAQmK,GACV,MAAO,IAAInK,EAAQmK,KAIrB,MAAMC,EAAO,GACb,IAAIC,EAAUrK,EAEd,KAAOqK,GAAWA,IAAY9K,SAASY,MAAM,CAC3C,IAAIrB,EAAWuL,EAAQ5F,QAAQ6F,cAE/B,GAAID,EAAQE,UAAW,CACrB,MAAMC,EAAUH,EAAQE,UAAUE,MAAM,KAAK3E,OAAO4E,GAAKA,EAAEC,QACvDH,EAAQvG,OAAS,IACnBnF,GAAY,IAAM0L,EAAQI,KAAK,KAEnC,CAGA,MAAMC,EAAW1D,MAAME,MAAK,OAAAyD,EAAAT,EAAQU,iBAAR,EAAAD,EAAoBE,WAAY,IACzDlF,OAAOmF,GAAWA,EAAQxG,UAAY4F,EAAQ5F,SAEjD,GAAIoG,EAAS5G,OAAS,EAAG,CAEvBnF,GAAY,gBADE+L,EAASK,QAAQb,GACK,IACtC,CAEAD,EAAKe,QAAQrM,GACbuL,EAAUA,EAAQe,aACpB,CAEA,OAAOhB,EAAKQ,KAAK,MACnB,GAIoB,oBAAXzM,SACTA,OAAOkN,yBAA2B5F,GAId,oBAAXpH,QAA0BA,OAAOC,UAC1CD,OAAOC,QAAUmH,GCzcnB,IAAA6F,EAAA,MACE,WAAAhO,GACEE,KAAKiB,OAAS,IAAKN,OAAOC,kBAAoBJ,SAC9CR,KAAKoI,YAAc,IAAKzH,OAAO2D,uBAAyBC,aACxDvE,KAAKqI,eAAiB,IAAK1H,OAAOmH,0BAA4BC,eAChE,CAOM,IAAAgG,CAAK5M,GAAmB,OAAAC,EAAApB,KAAAqB,UAAA,UAAnB2M,EAAKtJ,EAAU,IACxB,MAAMuJ,UAAEA,EAAY,OAAA1M,QAAQA,EAAU,KAAUmD,EAShD,OAPA1E,KAAKiB,OAAOd,KAAK,QAAQ6N,KAErBrN,OAAO8C,SAASC,OAASsK,IAC3BrN,OAAO8C,SAASC,KAAOsK,QACjBhO,KAAK8D,iBAAiBmK,EAAW1M,IAGlC,CAAEyM,IAAKrN,OAAO8C,SAASC,KAAMwK,OAAQ,IAC9C,EAAA,CAKM,MAAAC,GAAqB,OAAA/M,EAAApB,KAAAqB,UAAA,UAAdqD,EAAU,IACrB,MAAMuJ,UAAEA,EAAY,QAAWvJ,EAC/B/D,OAAOyN,QAAQC,aACTrO,KAAK8D,iBAAiBmK,EAC9B,EAAA,CAKM,SAAAK,GAAwB,OAAAlN,EAAApB,KAAAqB,UAAA,UAAdqD,EAAU,IACxB,MAAMuJ,UAAEA,EAAY,QAAWvJ,EAC/B/D,OAAOyN,QAAQG,gBACTvO,KAAK8D,iBAAiBmK,EAC9B,EAAA,CAKM,MAAAO,GAAqB,OAAApN,EAAApB,KAAAqB,UAAA,UAAdqD,EAAU,IACrB,MAAMuJ,UAAEA,EAAY,QAAWvJ,EAC/B/D,OAAO8C,SAAS+K,eACVxO,KAAK8D,iBAAiBmK,EAC9B,EAAA,CAOA,GAAAD,GACE,OAAOrN,OAAO8C,SAASC,IACzB,CAKM,KAAA+K,GAAQ,OAAArN,EAAApB,KAAA,KAAA,YACZ,OAAO+B,SAAS0M,KAClB,EAAA,CAKM,OAAAC,GAAU,OAAAtN,EAAApB,KAAA,KAAA,YACd,OAAO+B,SAAS4M,gBAAgBC,SAClC,EAAA,CAOM,KAAA5F,CAAM7H,GAAwB,OAAAC,EAAApB,KAAAqB,UAAA,UAAxBC,EAAUoD,EAAU,IAC9B,MAAMlC,QAAgBxC,KAAK6O,gBAAgBvN,SACrCtB,KAAKkJ,uBAAuB1G,GAElCxC,KAAKqI,eAAe5D,cAAcjC,EAASkC,GAC3C1E,KAAKiB,OAAOf,MAAM,OAAOoB,IAC3B,EAAA,CAKM,QAAA6H,CAAShI,GAAwB,OAAAC,EAAApB,KAAAqB,UAAA,UAAxBC,EAAUoD,EAAU,IACjC,MAAMlC,QAAgBxC,KAAK6O,gBAAgBvN,SACrCtB,KAAKkJ,uBAAuB1G,GAElCxC,KAAKqI,eAAe5C,oBAAoBjD,GACxCxC,KAAKiB,OAAOf,MAAM,OAAOoB,IAC3B,EAAA,CAKM,IAAA8H,CAAKjI,EAAUmF,GAAqB,OAAAlF,EAAApB,KAAAqB,UAAA,UAA/BC,EAAUsF,EAAOlC,EAAU,CAAA,GACpC,MAAMlC,QAAgBxC,KAAK6O,gBAAgBvN,SACrCtB,KAAKkJ,uBAAuB1G,GAGlCA,EAAQoE,MAAQ,GAChBpE,EAAQoE,MAAQA,EAGhBpE,EAAQgD,cAAc,IAAIqB,MAAM,QAAS,CAAExB,SAAS,KACpD7C,EAAQgD,cAAc,IAAIqB,MAAM,SAAU,CAAExB,SAAS,KAErDrF,KAAKiB,OAAOf,MAAM,OAAOoB,QAAesF,KAC1C,EAAA,CAKM,KAAAyC,CAAMlI,EAAUmF,GAAmB,OAAAlF,EAAApB,KAAAqB,UAAA,UAA7BC,EAAUuE,EAAKnB,EAAU,CAAA,GACnC,MAAMlC,QAAgBxC,KAAK6O,gBAAgBvN,GAC3CkB,EAAQsC,QAER9E,KAAKqI,eAAezC,iBAAiBpD,EAASqD,EAAKnB,GACnD1E,KAAKiB,OAAOf,MAAM,OAAOoB,QAAeuE,IAC1C,EAAA,CAKM,IAAAkB,CAAK5F,EAAUmF,GAAoB,OAAAlF,EAAApB,KAAAqB,UAAA,UAA9BC,EAAUiF,EAAM7B,EAAU,CAAA,GACnC,MAAMlC,QAAgBxC,KAAK6O,gBAAgBvN,SACrCtB,KAAKqI,eAAehC,eAAe7D,EAAS+D,EAAM7B,GACxD1E,KAAKiB,OAAOf,MAAM,OAAOoB,SAAgBiF,KAC3C,EAAA,CAKM,KAAAgD,CAAMjI,GAAU,OAAAF,EAAApB,KAAA,KAAA,YACpB,MAAMwC,QAAgBxC,KAAK6O,gBAAgBvN,SACrCtB,KAAKkJ,uBAAuB1G,GAElCxC,KAAKqI,eAAe1C,cAAcnD,GAClCxC,KAAKiB,OAAOf,MAAM,OAAOoB,IAC3B,EAAA,CAKM,KAAA4B,CAAM5B,GAAU,OAAAF,EAAApB,KAAA,KAAA,YACpB,MAAMwC,QAAgBxC,KAAK6O,gBAAgBvN,GACtB,aAAjBkB,EAAQuE,MAAwC,UAAjBvE,EAAQuE,OACzCvE,EAAQwE,SAAU,EAClBxE,EAAQgD,cAAc,IAAIqB,MAAM,SAAU,CAAExB,SAAS,KACrDrF,KAAKiB,OAAOf,MAAM,OAAOoB,KAE7B,EAAA,CAKM,OAAAkI,CAAQlI,GAAU,OAAAF,EAAApB,KAAA,KAAA,YACtB,MAAMwC,QAAgBxC,KAAK6O,gBAAgBvN,GACtB,aAAjBkB,EAAQuE,OACVvE,EAAQwE,SAAU,EAClBxE,EAAQgD,cAAc,IAAIqB,MAAM,SAAU,CAAExB,SAAS,KACrDrF,KAAKiB,OAAOf,MAAM,SAASoB,KAE/B,EAAA,CAKM,YAAAmI,CAAatI,EAAUmF,GAAsB,OAAAlF,EAAApB,KAAAqB,UAAA,UAAhCC,EAAUoI,EAAQhF,EAAU,CAAA,GAC7C,MAAMlC,QAAgBxC,KAAK6O,gBAAgBvN,GACnB,WAApBkB,EAAQyE,UACN0C,MAAMC,QAAQF,GAEhBC,MAAME,KAAKrH,EAAQkC,SAASK,QAAQ+E,IAClCA,EAAOC,SAAWL,EAAO/F,SAASmG,EAAOlD,QAAU8C,EAAO/F,SAASmG,EAAOvD,QAG5E/D,EAAQoE,MAAQ8C,EAElBlH,EAAQgD,cAAc,IAAIqB,MAAM,SAAU,CAAExB,SAAS,KACrDrF,KAAKiB,OAAOf,MAAM,SAASoB,OAAcoI,KAE7C,EAAA,CAOA,OAAAwC,CAAQ5K,EAAUoD,EAAU,IAC1B,OAAO,IAAK/D,OAAOkN,0BAA4B5F,gBAAgB3G,EAAUtB,KAAM0E,EACjF,CAKA,SAAAoK,CAAUC,EAAMrK,EAAU,IACxB,MAAM2G,KAAEA,EAAAtC,MAAMA,GAAQ,EAAAhJ,MAAOA,GAAU2E,EACvC,IAAIpD,EAAW,UAAUyN,MAczB,OAZI1D,IAEA/J,GADEyH,EACU,gBAAgBsC,eAAkB0D,oCAAuC1D,MAEzE,iBAAiBA,eAAkB0D,oCAAuC1D,OAItFtL,GAAkB,YAATgP,IACXzN,EAAW,IAAIvB,uBAA2BA,KAGrCC,KAAKkM,QAAQ5K,EACtB,CAKA,SAAAuH,CAAUtC,EAAM7B,EAAU,IACxB,MAAMqE,MAAEA,GAAQ,GAAUrE,EAC1B,IAAIsK,EAQJ,OALEA,EADEjG,EACM,gCAAgCxC,MAEhC,0CAA0CA,OAG7CvG,KAAKkM,QAAQ,SAAS8C,IAC/B,CAKA,UAAAC,CAAW1I,EAAM7B,EAAU,IACzB,MAAMqE,MAAEA,GAAQ,GAAUrE,EAQpBpD,EAAW,GAJb,mBAAmBiF,gDAIqDA,kDAAqDA,OAEjI,OAAOvG,KAAKkM,QAAQ5K,EACtB,CAKA,gBAAA4N,CAAiB3I,EAAM7B,EAAU,IAC/B,MAAMqE,MAAEA,GAAQ,GAAUrE,EACpBpD,EAAWyH,EACb,iBAAiBxC,MACjB,kBAAkBA,MAEtB,OAAOvG,KAAKkM,QAAQ5K,EACtB,CAKA,WAAA6N,CAAYC,GACV,OAAOpP,KAAKkM,QAAQ,iBAAiBkD,MACvC,CAKA,UAAAC,CAAW9I,EAAM7B,EAAU,IACzB,MAAMqE,MAAEA,GAAQ,GAAUrE,EACpBpD,EAAWyH,EACb,WAAWxC,MACX,YAAYA,MAEhB,OAAOvG,KAAKkM,QAAQ5K,EACtB,CAOM,eAAAuN,CAAgB1N,GAAwB,OAAAC,EAAApB,KAAAqB,UAAA,UAAxBC,EAAUoD,EAAU,IACxC,MAAMnD,QAAEA,EAAU,IAAAwC,MAAOA,EAAQ,WAAcW,EAG/C,GAAIpD,EAASgO,WAAW,UACtB,OAAOtP,KAAKuP,aAAajO,EAASkO,UAAU,GAAI,CAAEjO,UAASwC,UAG7D,MAAMvB,QAAgBxC,KAAKoI,YAAYlH,eAAeI,EAAUC,GAehE,MAbc,YAAVwC,UACI/D,KAAKoI,YAAYrF,iBACrB,KACE,MAAMkH,EAAOzH,EAAQ0H,wBACfC,EAAQC,iBAAiB5H,GAC/B,OAAOyH,EAAKI,MAAQ,GAAKJ,EAAKK,OAAS,GACX,WAArBH,EAAMI,YAA6C,SAAlBJ,EAAMK,SAEhDjJ,EACA,OAAOD,cAIJkB,CACT,EAAA,CAKM,YAAA+M,CAAapO,GAAqB,OAAAC,EAAApB,KAAAqB,UAAA,UAArB2N,EAAOtK,EAAU,IAClC,MAAMnD,QAAEA,EAAU,KAAUmD,EAE5B,OAAO1E,KAAKoI,YAAYrF,iBACtB,IACiBhB,SAAS0N,SAAST,EAAOjN,SAAU,KAAM2N,YAAYC,wBAAyB,MAC/EC,gBAEhBrO,EACA,iBAAiByN,IAErB,EAAA,CAKM,cAAA5K,CAAeC,GAAI,OAAAjD,EAAApB,KAAA,KAAA,YACvB,OAAOA,KAAKoI,YAAYhE,eAAeC,EACzC,EAAA,CAKM,eAAAjB,CAAgBjC,EAAImF,GAAmB,OAAAlF,EAAApB,KAAAqB,UAAA,UAAvBgC,EAAIwM,EAAKnL,EAAU,CAAA,GACvC,MAAMnD,QAAEA,EAAU,KAAUmD,EAC5B,OAAO1E,KAAKoI,YAAYrF,iBACtB,IAAMM,EAAGwM,GACTtO,EACA,WAEJ,EAAA,CAKM,UAAA+B,CAAWnC,GAAmB,OAAAC,EAAApB,KAAAqB,UAAA,UAAnB2M,EAAKtJ,EAAU,IAC9B,MAAMnD,QAAEA,EAAU,KAAUmD,EAC5B,OAAO1E,KAAKoI,YAAY9E,WAAW0K,EAAKzM,EAC1C,EAAA,CAKM,gBAAAuC,CAAiBC,EAAQ,OAAQxC,EAAU,KAAO,OAAAH,EAAApB,KAAA,KAAA,YACtD,OAAOA,KAAKoI,YAAYtE,iBAAiBC,EAC3C,EAAA,CAOM,QAAA0L,CAASpM,KAAO9C,GAAM,OAAAa,EAAApB,KAAA,KAAA,YAC1B,IACE,OAAOqD,EAAGyM,MAAMnP,OAAQJ,EAC1B,OAASF,GAEP,MADAL,KAAKiB,OAAOZ,MAAM,UAAWA,GACvBA,CACR,CACF,EAAA,CAKM,cAAA0P,CAAe1M,KAAO9C,GAAM,OAAAa,EAAApB,KAAA,KAAA,YAChC,OAAOA,KAAKyP,SAASpM,KAAO9C,EAC9B,EAAA,CAKM,YAAAyP,GAA2B,OAAA5O,EAAApB,KAAAqB,UAAA,UAAdqD,EAAU,IAC3B,MAAMsJ,IAAEA,EAAApB,KAAKA,EAAA8B,QAAMA,EAAA3H,KAASA,EAAO,mBAAsBrC,EAEnDuL,EAASlO,SAASmO,cAAc,UAoBtC,OAnBAD,EAAOlJ,KAAOA,EAEViH,EACFiC,EAAOE,IAAMnC,EACJU,IACTuB,EAAOhF,YAAcyD,GAGvB3M,SAASqO,KAAKC,YAAYJ,GAGtBjC,UACI,IAAIxM,QAAQ,CAACC,EAASC,KAC1BuO,EAAOK,OAAS7O,EAChBwO,EAAOM,QAAU7O,KAIrB1B,KAAKiB,OAAOf,MAAM,UACX+P,CACT,EAAA,CAKM,WAAAO,GAA0B,OAAApP,EAAApB,KAAAqB,UAAA,UAAdqD,EAAU,IAC1B,MAAMsJ,IAAEA,EAAApB,KAAKA,EAAA8B,QAAMA,GAAYhK,EAE/B,GAAIsJ,EAAK,CACP,MAAMyC,EAAO1O,SAASmO,cAAc,QAIpC,OAHAO,EAAKC,IAAM,aACXD,EAAK/M,KAAOsK,EACZjM,SAASqO,KAAKC,YAAYI,GACnBA,CACT,IAAW/B,EAAS,CAClB,MAAMvE,EAAQpI,SAASmO,cAAc,SAGrC,OAFA/F,EAAMc,YAAcyD,EACpB3M,SAASqO,KAAKC,YAAYlG,GACnBA,CACT,CACF,EAAA,CAOM,sBAAAjB,CAAuB1G,GAAS,OAAApB,EAAApB,KAAA,KAAA,YACpC,MAAMiK,EAAOzH,EAAQ0H,wBACAD,EAAK0G,KAAO,GAAK1G,EAAK2G,QAAUjQ,OAAOkQ,aACxC5G,EAAK6G,MAAQ,GAAK7G,EAAK8G,OAASpQ,OAAOqQ,aAGzDxO,EAAQmF,eAAe,CAAEC,SAAU,SAAUC,MAAO,iBAC9C7H,KAAKoE,eAAe,KAC1BpE,KAAKiB,OAAOf,MAAM,aAEtB,EAAA,CAKM,WAAA+Q,CAAY3P,GAAU,OAAAF,EAAApB,KAAA,KAAA,YAC1B,MACMiK,SADgBjK,KAAK6O,gBAAgBvN,IACtB4I,wBAErB,MAAO,CACLgH,EAAGjH,EAAK6G,KAAOnQ,OAAOwQ,QACtBC,EAAGnH,EAAK0G,IAAMhQ,OAAO0Q,QACrBhH,MAAOJ,EAAKI,MACZC,OAAQL,EAAKK,OAEjB,EAAA,CAKM,eAAAgH,CAAgBC,GAAM,OAAAnQ,EAAApB,KAAA,KAAA,YAI1B,OADAA,KAAKiB,OAAOb,KAAK,kBACV,CAAEiK,MAAO1J,OAAOqQ,WAAY1G,OAAQ3J,OAAOkQ,YACpD,EAAA,CAKA,YAAAW,GACE,MAAO,CAAEnH,MAAO1J,OAAOqQ,WAAY1G,OAAQ3J,OAAOkQ,YACpD,GAIoB,oBAAXlQ,SACTA,OAAO8Q,sBAAwBC,GAIX,oBAAX7Q,QAA0BA,OAAOC,UAC1CD,OAAOC,QAAU4Q,GC9enB,IAAAC,EAAA,MAAMC,EACJ,WAAA9R,CAAY+R,EAAQnN,EAAU,IAC5B1E,KAAK6R,OAASA,EACd7R,KAAK8R,OAAQ,EACb9R,KAAKuB,QAAUmD,EAAQnD,SAAW,IAClCvB,KAAKiB,OAAS,IAAKN,OAAOC,kBAAoBJ,QAChD,CAKA,OAAIuR,GACF,MAAMC,EAAY,IAAIJ,EAAc5R,KAAK6R,OAAQ,CAAEtQ,QAASvB,KAAKuB,UAEjE,OADAyQ,EAAUF,OAAS9R,KAAK8R,MACjBE,CACT,CAOM,WAAAC,GAA0B,OAAA7Q,EAAApB,KAAAqB,UAAA,UAAdqD,EAAU,IAC1B,MAAMnD,EAAUmD,EAAQnD,SAAWvB,KAAKuB,QAClC2Q,GAAYlS,KAAK8R,MAEvB,UACQ9R,KAAK+C,iBACT,IAAY3B,EAAApB,KAAA,KAAA,YAEV,aADwBA,KAAK6R,OAAO7H,eACfkI,CACvB,GACA3Q,EACA,QAAO2Q,EAAW,KAAO,QAG3BlS,KAAKiB,OAAOf,MAAM,OAAOgS,EAAW,KAAO,YAC7C,OAAS7R,GACP,MAAM8R,QAAsBnS,KAAK6R,OAAO7H,YACxC,MAAM,IAAI1H,MAAM,OAAO4P,EAAW,KAAO,YAAYC,EAAgB,KAAO,QAC9E,CACF,EAAA,CAKM,UAAAC,GAAyB,OAAAhR,EAAApB,KAAAqB,UAAA,UAAdqD,EAAU,IACzB,MAAMnD,EAAUmD,EAAQnD,SAAWvB,KAAKuB,QAClC2Q,EAAWlS,KAAK8R,MAEtB,UACQ9R,KAAK+C,iBACT,IAAY3B,EAAApB,KAAA,KAAA,YAEV,aADwBA,KAAK6R,OAAO7H,eACfkI,CACvB,GACA3Q,EACA,QAAO2Q,EAAW,KAAO,OAG3BlS,KAAKiB,OAAOf,MAAM,OAAOgS,EAAW,KAAO,WAC7C,OAAS7R,GACP,MAAM8R,QAAsBnS,KAAK6R,OAAO7H,YACxC,MAAM,IAAI1H,MAAM,OAAO4P,EAAW,KAAO,WAAWC,EAAgB,KAAO,OAC7E,CACF,EAAA,CAOM,WAAAE,GAA0B,OAAAjR,EAAApB,KAAAqB,UAAA,UAAdqD,EAAU,IAC1B,MAAMnD,EAAUmD,EAAQnD,SAAWvB,KAAKuB,QAClC2Q,GAAYlS,KAAK8R,MAEvB,UACQ9R,KAAK+C,iBACT,IAAY3B,EAAApB,KAAA,KAAA,YAEV,aADwBA,KAAK6R,OAAOjH,eACfsH,CACvB,GACA3Q,EACA,QAAO2Q,EAAW,KAAO,OAG3BlS,KAAKiB,OAAOf,MAAM,OAAOgS,EAAW,KAAO,WAC7C,OAAS7R,GACP,MAAMiS,QAAsBtS,KAAK6R,OAAOjH,YACxC,MAAM,IAAItI,MAAM,OAAO4P,EAAW,KAAO,WAAWI,EAAgB,KAAO,OAC7E,CACF,EAAA,CAKM,YAAAC,GAA2B,OAAAnR,EAAApB,KAAAqB,UAAA,UAAdqD,EAAU,IAC3B,MAAMnD,EAAUmD,EAAQnD,SAAWvB,KAAKuB,QAClC2Q,EAAWlS,KAAK8R,MAEtB,UACQ9R,KAAK+C,iBACT,IAAY3B,EAAApB,KAAA,KAAA,YAEV,aADwBA,KAAK6R,OAAOjH,eACfsH,CACvB,GACA3Q,EACA,QAAO2Q,EAAW,KAAO,OAG3BlS,KAAKiB,OAAOf,MAAM,OAAOgS,EAAW,KAAO,WAC7C,OAAS7R,GACP,MAAMiS,QAAsBtS,KAAK6R,OAAOjH,YACxC,MAAM,IAAItI,MAAM,OAAO4P,EAAW,KAAO,WAAWI,EAAgB,KAAO,OAC7E,CACF,EAAA,CAKM,WAAAE,GAA0B,OAAApR,EAAApB,KAAAqB,UAAA,UAAdqD,EAAU,IAC1B,MAAMnD,EAAUmD,EAAQnD,SAAWvB,KAAKuB,QAClC2Q,GAAYlS,KAAK8R,MAEvB,UACQ9R,KAAK+C,iBACT,IAAY3B,EAAApB,KAAA,KAAA,YAEV,aADwBA,KAAK6R,OAAO7G,eACfkH,CACvB,GACA3Q,EACA,QAAO2Q,EAAW,KAAO,QAG3BlS,KAAKiB,OAAOf,MAAM,OAAOgS,EAAW,KAAO,YAC7C,OAAS7R,GACP,MAAMoS,QAAsBzS,KAAK6R,OAAO7G,YACxC,MAAM,IAAI1I,MAAM,OAAO4P,EAAW,KAAO,YAAYO,EAAgB,KAAO,QAC9E,CACF,EAAA,CAOM,UAAAC,CAAWvR,GAA4B,OAAAC,EAAApB,KAAAqB,UAAA,UAA5BsR,EAAcjO,EAAU,IACvC,MAAMnD,EAAUmD,EAAQnD,SAAWvB,KAAKuB,QAClCqR,EAAelO,EAAQkO,eAAgB,EAE7C,UACQ5S,KAAK+C,iBACT,IAAY3B,EAAApB,KAAA,KAAA,YACV,MAAM6S,EAAaD,QACT5S,KAAK6R,OAAO3G,kBACZlL,KAAK6R,OAAO5G,cAEtB,IAAI6H,EASJ,OAPEA,EADEnJ,MAAMC,QAAQ+I,GACNA,EAAaI,MAAMxM,GAAQsM,EAAWlP,SAAS4C,IAChDoM,aAAwB/O,OACvB+O,EAAa9O,KAAKgP,GAElBA,EAAWlP,SAASgP,GAGzB3S,KAAK8R,OAASgB,EAAUA,CACjC,GACAvR,EACA,OAAOvB,KAAK8R,MAAQ,IAAM,SAASa,MAGrC3S,KAAKiB,OAAOf,MAAM,OAAOF,KAAK8R,MAAQ,IAAM,WAC9C,OAASzR,GACP,MAAMwS,EAAaD,QACT5S,KAAK6R,OAAO3G,kBACZlL,KAAK6R,OAAO5G,cACtB,MAAM,IAAI3I,MAAM,OAAOtC,KAAK8R,MAAQ,IAAM,SAASa,cAAyBE,KAC9E,CACF,EAAA,CAKM,eAAAG,CAAgB7R,GAA4B,OAAAC,EAAApB,KAAAqB,UAAA,UAA5BsR,EAAcjO,EAAU,IAC5C,MAAMnD,EAAUmD,EAAQnD,SAAWvB,KAAKuB,QAClCqR,EAAelO,EAAQkO,eAAgB,EAE7C,UACQ5S,KAAK+C,iBACT,IAAY3B,EAAApB,KAAA,KAAA,YACV,MAIM8S,GAJaF,QACT5S,KAAK6R,OAAO3G,kBACZlL,KAAK6R,OAAO5G,eAEKkC,SAAWwF,EAAaxF,OACnD,OAAOnN,KAAK8R,OAASgB,EAAUA,CACjC,GACAvR,EACA,OAAOvB,KAAK8R,MAAQ,IAAM,WAAWa,MAGvC3S,KAAKiB,OAAOf,MAAM,SAASF,KAAK8R,MAAQ,IAAM,WAChD,OAASzR,GACP,MAAMwS,EAAaD,QACT5S,KAAK6R,OAAO3G,kBACZlL,KAAK6R,OAAO5G,cACtB,MAAM,IAAI3I,MAAM,OAAOtC,KAAK8R,MAAQ,IAAM,WAAWa,cAAyBE,KAChF,CACF,EAAA,CAKM,aAAAI,CAAc9R,GAA4B,OAAAC,EAAApB,KAAAqB,UAAA,UAA5BsR,EAAcjO,EAAU,IAC1C,OAAO1E,KAAK0S,WAAWC,EAAcjO,EACvC,EAAA,CAOM,eAAAwO,CAAgB/R,EAAMmF,GAAqB,OAAAlF,EAAApB,KAAAqB,UAAA,UAA3BgK,EAAMzE,EAAOlC,EAAU,CAAA,GAC3C,MAAMnD,EAAUmD,EAAQnD,SAAWvB,KAAKuB,QAExC,UACQvB,KAAK+C,iBACT,IAAY3B,EAAApB,KAAA,KAAA,YACV,MAAMmT,QAAoBnT,KAAK6R,OAAOzG,aAAaC,GAEnD,IAAIyH,EASJ,OAPEA,OADY,IAAVlM,EACwB,OAAhBuM,EACDvM,aAAiBhD,OAChBgD,EAAM/C,KAAKsP,GAAe,IAE1BA,IAAgBvM,EAGrB5G,KAAK8R,OAASgB,EAAUA,CACjC,GACAvR,EACA,KAAKvB,KAAK8R,MAAQ,IAAM,UAAUzG,MAGpCrL,KAAKiB,OAAOf,MAAM,OAAOF,KAAK8R,MAAQ,IAAM,WAC9C,OAASzR,GACP,MAAM8S,QAAoBnT,KAAK6R,OAAOzG,aAAaC,GACnD,MAAM,IAAI/I,MAAM,KAAKtC,KAAK8R,MAAQ,IAAM,UAAUzG,UAAkB,IAAVzE,EAAsB,OAAOA,KAAW,aAAauM,KACjH,CACF,EAAA,CAKM,WAAAC,CAAYjS,GAA6B,OAAAC,EAAApB,KAAAqB,UAAA,UAA7BgS,EAAe3O,EAAU,IACzC,MAAMnD,EAAUmD,EAAQnD,SAAWvB,KAAKuB,QAExC,UACQvB,KAAK+C,iBACT,IAAY3B,EAAApB,KAAA,KAAA,YACV,MAAMmT,QAAoBnT,KAAK6R,OAAOvG,aAEtC,IAAIwH,EAOJ,OALEA,EADEO,aAAyBzP,OACjByP,EAAcxP,KAAKsP,GAEnBA,IAAgBE,EAGrBrT,KAAK8R,OAASgB,EAAUA,CACjC,GACAvR,EACA,MAAMvB,KAAK8R,MAAQ,IAAM,QAAQuB,MAGnCrT,KAAKiB,OAAOf,MAAM,MAAMF,KAAK8R,MAAQ,IAAM,WAC7C,OAASzR,GACP,MAAM8S,QAAoBnT,KAAK6R,OAAOvG,aACtC,MAAM,IAAIhJ,MAAM,MAAMtC,KAAK8R,MAAQ,IAAM,QAAQuB,aAAyBF,KAC5E,CACF,EAAA,CAKM,WAAAG,CAAYnS,GAA6B,OAAAC,EAAApB,KAAAqB,UAAA,UAA7BkS,EAAe7O,EAAU,IACzC,MAAMnD,EAAUmD,EAAQnD,SAAWvB,KAAKuB,QAExC,UACQvB,KAAK+C,iBACT,IAAY3B,EAAApB,KAAA,KAAA,YACV,MAAMwT,QAAkBxT,KAAK6R,OAAOzG,aAAa,SAC3C4B,EAAUwG,EAAYA,EAAUvG,MAAM,KAAO,GAEnD,IAAI6F,EASJ,OAPEA,EADEnJ,MAAMC,QAAQ2J,GACNA,EAAcR,MAAMU,GAAOzG,EAAQrJ,SAAS8P,IAC7CF,aAAyB3P,OACxB2P,EAAc1P,KAAK2P,GAAa,IAEhCxG,EAAQrJ,SAAS4P,GAGtBvT,KAAK8R,OAASgB,EAAUA,CACjC,GACAvR,EACA,KAAKvB,KAAK8R,MAAQ,IAAM,UAAUyB,MAGpCvT,KAAKiB,OAAOf,MAAM,OAAOF,KAAK8R,MAAQ,IAAM,WAC9C,OAASzR,GACP,MAAMmT,QAAkBxT,KAAK6R,OAAOzG,aAAa,SACjD,MAAM,IAAI9I,MAAM,KAAKtC,KAAK8R,MAAQ,IAAM,UAAUyB,cAA0BC,KAC9E,CACF,EAAA,CAKM,QAAAE,CAASvS,GAA0B,OAAAC,EAAApB,KAAAqB,UAAA,UAA1BsS,EAAYjP,EAAU,IACnC,OAAO1E,KAAKkT,gBAAgB,KAAMS,EAAYjP,EAChD,EAAA,CAOM,WAAAkP,CAAYzS,GAA6B,OAAAC,EAAApB,KAAAqB,UAAA,UAA7BwS,EAAenP,EAAU,IACzC,MAAMnD,EAAUmD,EAAQnD,SAAWvB,KAAKuB,QAExC,UACQvB,KAAK+C,iBACT,IAAY3B,EAAApB,KAAA,KAAA,YACV,MACM8S,SADoB9S,KAAK6R,OAAOjG,WACNiI,EAChC,OAAO7T,KAAK8R,OAASgB,EAAUA,CACjC,GACAvR,EACA,OAAOvB,KAAK8R,MAAQ,IAAM,OAAO+B,KAGnC7T,KAAKiB,OAAOf,MAAM,OAAOF,KAAK8R,MAAQ,IAAM,WAC9C,OAASzR,GACP,MAAMyT,QAAoB9T,KAAK6R,OAAOjG,QACtC,MAAM,IAAItJ,MAAM,OAAOtC,KAAK8R,MAAQ,IAAM,OAAO+B,YAAwBC,IAC3E,CACF,EAAA,CAOM,SAAAC,CAAU5S,GAA2B,OAAAC,EAAApB,KAAAqB,UAAA,UAA3B2S,EAAatP,EAAU,IACrC,MAAMnD,EAAUmD,EAAQnD,SAAWvB,KAAKuB,QAExC,UACQvB,KAAK+C,iBACT,KACE,MAAMS,EAAa7C,OAAO8C,SAASC,KAEnC,IAAIoP,EAOJ,OALEA,EADEkB,aAAuBpQ,OACfoQ,EAAYnQ,KAAKL,GAEjBA,EAAWG,SAASqQ,GAGzBhU,KAAK8R,OAASgB,EAAUA,GAEjCvR,EACA,UAAUvB,KAAK8R,MAAQ,IAAM,SAASkC,MAGxChU,KAAKiB,OAAOf,MAAM,SAASF,KAAK8R,MAAQ,IAAM,WAChD,OAASzR,GACP,MAAMmD,EAAa7C,OAAO8C,SAASC,KACnC,MAAM,IAAIpB,MAAM,UAAUtC,KAAK8R,MAAQ,IAAM,SAASkC,iBAA2BxQ,KACnF,CACF,EAAA,CAKM,WAAAyQ,CAAY9S,GAA6B,OAAAC,EAAApB,KAAAqB,UAAA,UAA7B6S,EAAexP,EAAU,IACzC,MAAMnD,EAAUmD,EAAQnD,SAAWvB,KAAKuB,QAExC,UACQvB,KAAK+C,iBACT,KACE,MAAMoR,EAAepS,SAAS0M,MAE9B,IAAIqE,EAOJ,OALEA,EADEoB,aAAyBtQ,OACjBsQ,EAAcrQ,KAAKsQ,GAEnBA,EAAaxQ,SAASuQ,GAG3BlU,KAAK8R,OAASgB,EAAUA,GAEjCvR,EACA,OAAOvB,KAAK8R,MAAQ,IAAM,SAASoC,MAGrClU,KAAKiB,OAAOf,MAAM,OAAOF,KAAK8R,MAAQ,IAAM,WAC9C,OAASzR,GACP,MAAM8T,EAAepS,SAAS0M,MAC9B,MAAM,IAAInM,MAAM,OAAOtC,KAAK8R,MAAQ,IAAM,SAASoC,cAA0BC,KAC/E,CACF,EAAA,CAOM,gBAAApR,CAAiBC,EAAazB,EAAS6S,GAAa,OAAAhT,EAAApB,KAAA,KAAA,YACxD,MAAM2B,EAAYC,KAAKC,MAEjBqB,EAAQ,IAAY9B,EAAApB,KAAA,KAAA,YACxB,IACE,MAAMmD,QAAeH,IACrB,GAAIG,EACF,OAAOA,CAEX,OAAS9C,GAET,CAEA,GAAIuB,KAAKC,MAAQF,GAAaJ,EAC5B,MAAM,IAAIe,MAAM,GAAG8R,QAAkB7S,QAIvC,aADM,IAAIC,QAAQC,GAAWY,WAAWZ,EAAS,MAC1CyB,GACT,GAEA,OAAOA,GACT,EAAA,GAIF,SAASmR,IACP,OAAO,SAAgBxC,GACrB,OAAO,IAAID,EAAcC,EAC3B,CACF,CAGsB,oBAAXlR,SACTA,OAAO2T,wBAA0B1C,EACjCjR,OAAO4T,iBAAmBF,KAIN,oBAAXxT,QAA0BA,OAAOC,UAC1CD,OAAOC,QAAU,eAAE8Q,EAAeyC,iBC3cpC,IAAAG,EAAA,MACE,WAAA1U,GACEE,KAAKiB,OAAS,IAAKN,OAAOC,kBAAoBJ,SAC9CR,KAAKyU,wBACP,CAKA,sBAAAA,GAEE9T,OAAO+T,eAAiB,CACtB7Q,KAAM7D,KAAK2U,qBACXC,OAAQjU,OAAO4T,kBAAoBvU,KAAK6U,wBAI1C7U,KAAK8U,oBAEL9U,KAAKiB,OAAOf,MAAM,wBACpB,CAKA,kBAAAyU,GACE,MAAMI,EAAO/U,KAGb,SAAS6D,EAAKwH,EAAM2J,GAClB,MAAO,CACL3J,OACAhI,GAAI2R,EACJC,IAAK,IAAY7T,EAAApB,KAAA,KAAA,YACf,MACMkV,EAAU,CAAEhN,KADL,IAAKvH,OAAO8Q,uBAAyBC,cAGlD,IACEqD,EAAK9T,OAAOd,KAAK,YAAYkL,KAC7B,MAAM1J,EAAYC,KAAKC,YAEjBmT,EAAOE,GAEb,MAAMC,EAAWvT,KAAKC,MAAQF,EAE9B,OADAoT,EAAK9T,OAAOR,QAAQ,WAAW4K,MAAS8J,QACjC,CAAE1U,SAAS,EAAM0U,WAAU9J,OACpC,OAAShL,GACP,MAAM8U,EAAWvT,KAAKC,MAAQF,UAE9B,OADAoT,EAAK9T,OAAOZ,MAAM,WAAWgL,MAAS8J,OAAe9U,GAC9C,CAAEI,SAAS,EAAOJ,QAAO8U,WAAU9J,OAC5C,CACF,GAEJ,CA6CA,OA1CAxH,EAAKuR,KAAO,CAAC/J,EAAM2J,KACjBD,EAAK9T,OAAOb,KAAK,YAAYiL,KACtB,CACLA,OACAhI,GAAI2R,EACJK,SAAS,EACTJ,IAAK,IAAA7T,EAAApB,KAAA,KAAA,YAAa,MAAA,CAAES,SAAS,EAAM4U,SAAS,EAAMhK,OAAI,KAI1DxH,EAAKyR,KAAO,CAACjK,EAAM2J,KACjB,MAAMO,EAAW1R,EAAKwH,EAAM2J,GAE5B,OADAO,EAASD,MAAO,EACTC,GAGT1R,EAAK2R,SAAW,CAACnK,EAAMoK,KACrBV,EAAK9T,OAAOd,KAAK,YAAYkL,KACtBoK,KAGT5R,EAAK6R,WAAcC,IAEjB9R,EAAK+R,iBAAmB/R,EAAK+R,kBAAoB,GACjD/R,EAAK+R,iBAAiBC,KAAKF,IAG7B9R,EAAKiS,UAAaH,IAChB9R,EAAKkS,gBAAkBlS,EAAKkS,iBAAmB,GAC/ClS,EAAKkS,gBAAgBF,KAAKF,IAG5B9R,EAAKmS,UAAaL,IAChB9R,EAAKoS,gBAAkBpS,EAAKoS,iBAAmB,GAC/CpS,EAAKoS,gBAAgBJ,KAAKF,IAG5B9R,EAAKqS,SAAYP,IACf9R,EAAKsS,eAAiBtS,EAAKsS,gBAAkB,GAC7CtS,EAAKsS,eAAeN,KAAKF,IAGpB9R,CACT,CAKA,oBAAAgR,GACE,OAAO,SAAgBhD,GACrB,OAAO,IAAKlR,OAAO2T,yBAA2B1C,eAAeC,EAC/D,CACF,CAKA,iBAAAiD,QAEmC,IAAtBnU,OAAOyV,aAChBzV,OAAOyV,WAAa,CAClB,mBAAoBzV,OAAO+T,gBAGjC,CAKM,aAAA2B,CAAcC,GAAe,OAAAlV,EAAApB,KAAA,KAAA,YACjC,IAEE,MAAMuW,EAAoBvW,KAAKwW,iBAAiBF,GAG1CG,QAAkBzW,KAAK0W,aAAaH,GAK1C,aAFsBvW,KAAK2W,SAASF,EAGtC,OAASpW,GAEP,MADAL,KAAKiB,OAAOZ,MAAM,UAAWA,GACvBA,CACR,CACF,EAAA,CAKA,gBAAAmW,CAAiBF,GAEf,IAAIM,EAAcN,EAGlB,MAAMO,EAAiB,CAErB,iEAEA,iEAEA,kEA2BF,OAvBAD,EAAcA,EAAYE,QAAQD,EAAe,GAAI,CAACE,EAAOC,IAOpD,WANaA,EAAQ/J,MAAM,KAAKhB,IAAIgL,GAAQA,EAAK9J,QACvBlB,IAAIgL,IACnC,MAAMC,EAAYD,EAAKH,QAAQ,cAAe,IAC9C,MAAO,GAAGG,6BAAgCC,MACzC9J,KAAK,oCAMVwJ,EAAcA,EAAYE,QAAQD,EAAe,GAAI,CAACE,EAAOI,IACpD,SAASA,8BAIlBP,EAAcA,EACXE,QAAQ,yEACA,mDACRA,QAAQ,yEACA,mDAEX9W,KAAKiB,OAAOf,MAAM,iBACX0W,CACT,CAKM,YAAAF,CAAaJ,GAAe,OAAAlV,EAAApB,KAAA,KAAA,YAChC,MAAMyW,EAAY,GAGZW,EAAezW,OAAO+T,eAAe7Q,KACrCkR,EAAO/U,KAEbW,OAAO+T,eAAe7Q,KAAO,SAASwH,EAAMhI,GAC1C,MAAMkS,EAAW6B,EAAa/L,EAAMhI,GAGpC,OAFAoT,EAAUZ,KAAKN,GACfR,EAAK9T,OAAOf,MAAM,WAAWmL,KACtBkK,CACT,EAGA8B,OAAOC,KAAKF,GAAcrS,QAAQc,IACC,mBAAtBuR,EAAavR,KACtBlF,OAAO+T,eAAe7Q,KAAKgC,GAAOuR,EAAavR,MAInD,IAEyB,IAAI0R,SAASjB,EACpCkB,GAEAxX,KAAKiB,OAAOd,KAAK,OAAOsW,EAAUhQ,eACpC,OAASpG,GAEP,MADAL,KAAKiB,OAAOZ,MAAM,UAAWA,GACvBA,CACR,CAAA,QAEEM,OAAO+T,eAAe7Q,KAAOuT,CAC/B,CAEA,OAAOX,CACT,EAAA,CAKM,QAAAE,CAASF,GAAW,OAAArV,EAAApB,KAAA,KAAA,YACxB,MAAMyX,EAAU,GACVC,EAAYjB,EAAUnO,OAAOzE,GAAQA,EAAKyR,MAC1CqC,EAAaD,EAAUjR,OAAS,EAAIiR,EAAYjB,EAAUnO,OAAOzE,IAASA,EAAKwR,SAErFrV,KAAKiB,OAAOd,KAAK,QAAQwX,EAAWlR,oBAG9BzG,KAAK4X,SAAS,mBAEpB,IAAA,MAAWrC,KAAYoC,EACrB,UAEQ3X,KAAK4X,SAAS,mBAAoBrC,GAGxC,MAAMpS,QAAeoS,EAASN,MAC9BwC,EAAQ5B,KAAK1S,SAGPnD,KAAK4X,SAAS,kBAAmBrC,EAEzC,OAASlV,GACPL,KAAKiB,OAAOZ,MAAM,WAAWkV,EAASlK,OAAQhL,GAC9CoX,EAAQ5B,KAAK,CACXpV,SAAS,EACTJ,QACAgL,KAAMkK,EAASlK,KACf8J,SAAU,GAEd,CASF,aALMnV,KAAK4X,SAAS,kBAGpB5X,KAAK6X,iBAAiBJ,GAEfA,CACT,EAAA,CAKM,QAAAG,CAASE,EAAUvC,EAAW,MAAM,OAAAnU,EAAApB,KAAA,KAAA,YACxC,MACM+X,EADOpX,OAAO+T,eAAe7Q,KAChBiU,IAAa,GAEhC,IAAA,MAAWE,KAAQD,EACjB,IACE,GAAIxC,EAAU,CACZ,MAAMrN,EAAO,IAAKvH,OAAO8Q,uBAAyBC,mBAC5CsG,EAAK,CAAE9P,QACf,YACQ8P,GAEV,OAAS3X,GACPL,KAAKiB,OAAOZ,MAAM,aAAayX,MAAczX,EAC/C,CAEJ,EAAA,CAKA,gBAAAwX,CAAiBJ,GACf,MAAMQ,EAASR,EAAQnP,OAAO4P,GAAKA,EAAEzX,SAASgG,OACxC0R,EAASV,EAAQnP,WAAa4P,EAAEzX,SAASgG,OACzC4O,EAAUoC,EAAQnP,OAAO4P,GAAKA,EAAE7C,SAAS5O,OACzC2R,EAAgBX,EAAQY,OAAO,CAACC,EAAKJ,IAAMI,GAAOJ,EAAE/C,UAAY,GAAI,GAE1EnV,KAAKiB,OAAOd,KAAK,wBAEV8X,eACAE,gBACC9C,iBACC+C,aAGLD,EAAS,IACXnY,KAAKiB,OAAOZ,MAAM,UAClBoX,EAAQnP,OAAO4P,IAAMA,EAAEzX,SAASsE,QAAQmT,UACtClY,KAAKiB,OAAOZ,MAAM,OAAO6X,EAAE7M,SAAS,OAAAiC,EAAA4K,EAAE7X,YAAF,EAAAiN,EAAShN,aAGnD,GAIoB,oBAAXK,SACTA,OAAO4X,kBAAoBA,GAIP,oBAAX1X,QAA0BA,OAAOC,UAC1CD,OAAOC,QAAUyX,GCvUnB,MAAMC,EACJ,WAAA1Y,CAAY4E,EAAU,IACpB1E,KAAKyY,QAAU,IAAK9X,OAAO4X,mBAAqBA,mBAChDvY,KAAKiB,OAAS,IAAKN,OAAOC,kBAAoBJ,SAC9CR,KAAK0E,QAAUgU,EAAA,CACbnX,QAAS,IACToX,QAAS,GACNjU,EAEP,CAKM,UAAAkU,CAAWC,GAAY,OAAAzX,EAAApB,KAAA,KAAA,YAC3B,IACEA,KAAKiB,OAAOd,KAAK,YAAY0Y,KAC7B,MAAMC,QAAiBC,MAAMF,GAE7B,IAAKC,EAASE,GACZ,MAAM,IAAI1W,MAAM,QAAQwW,EAAS5K,WAAW4K,EAASG,cAGvD,MAAM3C,QAAsBwC,EAASvS,OACrC,aAAavG,KAAKkZ,UAAU5C,EAAeuC,EAC7C,OAASxY,GAEP,MADAL,KAAKiB,OAAOZ,MAAM,WAAWwY,IAAcxY,GACrCA,CACR,CACF,EAAA,CAKM,SAAA6Y,CAAU5C,EAAe6C,EAAa,iBAAiB,OAAA/X,EAAApB,KAAA,KAAA,YAC3D,IACEA,KAAKiB,OAAOd,KAAK,YAAYgZ,KAC7B,MAAMxX,EAAYC,KAAKC,MAEjB4V,QAAgBzX,KAAKyY,QAAQpC,cAAcC,GAE3CnB,EAAWvT,KAAKC,MAAQF,EAG9B,OAFA3B,KAAKiB,OAAOR,QAAQ,aAAa0Y,MAAehE,QAEzC,CACLgE,aACAhE,WACAsC,UACAhX,QAASgX,EAAQ1E,SAAWmF,EAAEzX,SAAWyX,EAAE7C,SAE/C,OAAShV,GAEP,OADAL,KAAKiB,OAAOZ,MAAM,WAAW8Y,IAAc9Y,GACpC,CACL8Y,aACAhE,SAAU,EACVsC,QAAS,GACThX,SAAS,EACTJ,QAEJ,CACF,EAAA,CAKM,UAAA+Y,CAAWC,GAAa,OAAAjY,EAAApB,KAAA,KAAA,YAC5B,MAAMsZ,EAAa,GAEnBtZ,KAAKiB,OAAOd,KAAK,WAAWkZ,EAAY5S,cAExC,IAAA,MAAWmG,KAAQyM,EACjB,IACE,MAAMlW,QAAenD,KAAK4Y,WAAWhM,GACrC0M,EAAWzD,KAAK1S,EAClB,OAAS9C,GACPiZ,EAAWzD,KAAK,CACdsD,WAAYvM,EACZuI,SAAU,EACVsC,QAAS,GACThX,SAAS,EACTJ,SAEJ,CAMF,OAFAL,KAAKuZ,kBAAkBD,GAEhBA,CACT,EAAA,CAKM,qBAAAE,CAAsBC,GAAS,OAAArY,EAAApB,KAAA,KAAA,YAInC,MADAA,KAAKiB,OAAOb,KAAK,wCACX,IAAIkC,MAAM,iBAClB,EAAA,CAKA,cAAAoX,CAAe3B,GACb,MAAM/B,UAAEA,EAAAE,SAAWA,EAAAR,WAAUA,EAAAI,UAAYA,GAAciC,EACjDlU,EAAOlD,OAAO+T,eAAe7Q,KAE/BmS,GAAWnS,EAAKmS,UAAUA,GAC1BE,GAAUrS,EAAKqS,SAASA,GACxBR,GAAY7R,EAAK6R,WAAWA,GAC5BI,GAAWjS,EAAKiS,UAAUA,GAE9B9V,KAAKiB,OAAOf,MAAM,WACpB,CAKA,SAAAyZ,CAAUC,GACR5Z,KAAK0E,QAAUgU,EAAAA,EAAA,CAAA,EAAK1Y,KAAK0E,SAAYkV,GACrC5Z,KAAKiB,OAAOf,MAAM,UAAWF,KAAK0E,QACpC,CAKA,iBAAA6U,CAAkB9B,GAChB,MAAMoC,EAAepC,EAAQhR,OACvBqT,EAAoBrC,EAAQnP,OAAO4P,GAAKA,EAAEzX,SAASgG,OACnDsT,EAAgBtC,EAAQnP,WAAa4P,EAAEzX,SAASgG,OAEhDuT,EAAavC,EAAQY,OAAO,CAACC,EAAKJ,IAAMI,EAAMJ,EAAET,QAAQhR,OAAQ,GAChEwT,EAAcxC,EAAQY,OAAO,CAACC,EAAKJ,IACvCI,EAAMJ,EAAET,QAAQnP,OAAOzE,GAAQA,EAAKpD,SAASgG,OAAQ,GAEjDyT,EAAczC,EAAQY,OAAO,CAACC,EAAKJ,IACvCI,EAAMJ,EAAET,QAAQnP,OAAOzE,IAASA,EAAKpD,UAAYoD,EAAKwR,SAAS5O,OAAQ,GAEnE0T,EAAe1C,EAAQY,OAAO,CAACC,EAAKJ,IACxCI,EAAMJ,EAAET,QAAQnP,OAAOzE,GAAQA,EAAKwR,SAAS5O,OAAQ,GAGjD2R,EAAgBX,EAAQY,OAAO,CAACC,EAAKJ,IAAMI,EAAMJ,EAAE/C,SAAU,GAEnEnV,KAAKiB,OAAOd,KAAK,oCAGV2Z,KAAqBD,eACrBE,KAAiBF,2BAGjBI,eACAC,gBACCC,gBACAH,gBAEF5B,aAGF2B,EAAgB,IAClB/Z,KAAKiB,OAAOZ,MAAM,UAClBoX,EAAQnP,OAAO4P,IAAMA,EAAEzX,SAASsE,QAAQmT,UACtClY,KAAKiB,OAAOZ,MAAM,OAAO6X,EAAEiB,gBAAe,OAAA7L,EAAA4K,EAAE7X,YAAF,EAAAiN,EAAShN,UAAW,YAGpE,CAKA,QAAA8Z,CAAS3C,iBACP,OAAI9N,MAAMC,QAAQ6N,KAAY,OAAAnK,IAAQ,aAAImK,SAEjC,CACL4C,QAAS,CACPC,MAAO7C,EAAQhR,OACfwR,OAAQR,EAAQnP,OAAO4P,GAAKA,EAAEzX,SAASgG,OACvC0R,OAAQV,EAAQnP,WAAa4P,EAAEzX,SAASgG,QAE1C8T,MAAO,CACLD,MAAO7C,EAAQY,OAAO,CAACC,EAAKJ,IAAMI,EAAMJ,EAAET,QAAQhR,OAAQ,GAC1DwR,OAAQR,EAAQY,OAAO,CAACC,EAAKJ,IAC3BI,EAAMJ,EAAET,QAAQnP,OAAOzE,GAAQA,EAAKpD,SAASgG,OAAQ,GAEvD0R,OAAQV,EAAQY,OAAO,CAACC,EAAKJ,IAC3BI,EAAMJ,EAAET,QAAQnP,OAAOzE,IAASA,EAAKpD,UAAYoD,EAAKwR,SAAS5O,OAAQ,GAEzE4O,QAASoC,EAAQY,OAAO,CAACC,EAAKJ,IAC5BI,EAAMJ,EAAET,QAAQnP,OAAOzE,GAAQA,EAAKwR,SAAS5O,OAAQ,IAGzD0O,SAAUsC,EAAQY,OAAO,CAACC,EAAKJ,IAAMI,EAAMJ,EAAE/C,SAAU,IAIlD,CACLoF,MAAO,CACLD,OAAO,OAAAE,EAAA/C,EAAQA,cAAR,EAAA+C,EAAiB/T,SAAU,EAClCwR,QAAQ,OAAAwC,IAAQhD,cAAR,EAAAgD,EAAiBnS,OAAOzE,GAAQA,EAAKpD,SAASgG,SAAU,EAChE0R,QAAQ,OAAAuC,EAAAjD,EAAQA,cAAR,EAAAiD,EAAiBpS,OAAOzE,IAASA,EAAKpD,UAAYoD,EAAKwR,SAAS5O,SAAU,EAClF4O,SAAS,OAAAsF,IAAQlD,cAAR,EAAAkD,EAAiBrS,OAAOzE,GAAQA,EAAKwR,SAAS5O,SAAU,GAEnE0O,SAAUsC,EAAQtC,UAAY,EAGpC,CAKA,OAAAhT,GAEE,MAAM0B,EAAOlD,OAAO+T,eAAe7Q,KACnCA,EAAKoS,gBAAkB,GACvBpS,EAAKsS,eAAiB,GACtBtS,EAAK+R,iBAAmB,GACxB/R,EAAKkS,gBAAkB,GAEvB/V,KAAKiB,OAAOf,MAAM,YACpB,EAIoB,oBAAXS,SACTA,OAAOia,qBAAuBpC,GAIV,oBAAX3X,QAA0BA,OAAOC,UAC1CD,OAAOC,QAAU0X,GCjMnB,MAAMqC,EACJ,WAAA/a,CAAY4E,EAAU,KA1BxB,WACE,MAAMoW,EAAe,CAAAla,iBACnBA,EAAA0D,sBACAA,EAAAwD,yBACAA,EAAA+F,yBACAA,EAAA4D,sBACAA,EAAA6C,wBACAA,EACAD,eAAAkE,kBACAA,EAAAqC,qBACAA,GAGIG,EAAU1D,OAAO2D,QAAQF,GAC5BxS,OAAO,EAAE+C,EAAM4P,MAAgBA,GAC/BhP,IAAI,EAAEZ,KAAUA,GAEf0P,EAAQtU,OAAS,GACnBjG,QAAQJ,KAAK,QAAS2a,EAE1B,CAOIG,GAEAlb,KAAK0E,QAAUgU,EAAA,CACbyC,SAAU,OACV5Z,QAAS,KACNmD,GAIL1E,KAAKiB,OAAS,IAAIL,EAAiBZ,KAAK0E,QAAQyW,UAChDnb,KAAKyY,QAAU,IAAIF,EACnBvY,KAAKob,WAAa,IAAIR,EAAqB5a,KAAK0E,SAEhD1E,KAAKiB,OAAOd,KAAK,uBACnB,CAKM,SAAA+Y,CAAU5C,EAAe6C,EAAa,UAAU,OAAA/X,EAAApB,KAAA,KAAA,YACpD,aAAaA,KAAKob,WAAWlC,UAAU5C,EAAe6C,EACxD,EAAA,CAKM,UAAAP,CAAWC,GAAY,OAAAzX,EAAApB,KAAA,KAAA,YAC3B,aAAaA,KAAKob,WAAWxC,WAAWC,EAC1C,EAAA,CAKM,UAAAO,CAAWC,GAAa,OAAAjY,EAAApB,KAAA,KAAA,YAC5B,aAAaA,KAAKob,WAAWhC,WAAWC,EAC1C,EAAA,CAKA,UAAAgC,GACE,OAAO,IAAI5J,CACb,CAKA,MAAAmD,CAAO/C,GACL,OAAOwC,IAAexC,EACxB,CAKA,SAAA8H,CAAUC,GAGR,OAFA5Z,KAAK0E,QAAUgU,EAAAA,EAAA,CAAA,EAAK1Y,KAAK0E,SAAYkV,GACrC5Z,KAAKob,WAAWzB,UAAUC,GACnB5Z,IACT,CAKA,QAAAsb,CAASvD,GAEP,OADA/X,KAAKob,WAAW1B,eAAe3B,GACxB/X,IACT,CAKA,QAAAoa,CAAS3C,GACP,OAAOzX,KAAKob,WAAWhB,SAAS3C,EAClC,CAKA,OAAAtV,GACEnC,KAAKob,WAAWjZ,SAClB,CAKA,iBAAOoZ,GACL,MAA4C,YAC9C,CAKA,yBAAOC,GACL,MAAMC,EAAW,CACfC,SAA+B,oBAAZla,QACnB,mBAA4BJ,EAAApB,KAAA,KAAA,YAAC,MAAKF,cAAgB0B,QAClD,YAA8B,oBAAVuX,MACpBxW,iBAAgD,oBAArBA,iBAC3BP,mBAAmD,IAA3BD,SAASC,cACjCkC,sBAAyD,IAA9BnC,SAASmC,kBAGhCyX,EAActE,OAAO2D,QAAQS,GAChCnT,OAAO,EAAEsT,EAASC,MAAgBA,GAClC5P,IAAI,EAAE2P,KAAaA,GAEtB,QAAID,EAAYlV,OAAS,KACvBjG,QAAQJ,KAAK,cAAeub,IACrB,EAIX,EAIFd,EAA0BiB,OAAS,SAASpX,GAC1C,IAAKmW,EAA0BW,qBAC7B,MAAM,IAAIlZ,MAAM,4BAGlB,OAAO,IAAIuY,EAA0BnW,EACvC,EAGAmW,EAA0B5F,IAAM,SAAe9T,GAAsB,OAAAC,EAAApB,KAAAqB,UAAA,UAAtB4O,EAAQvL,EAAU,CAAA,GAC/D,MAAMqX,EAASlB,EAA0BiB,OAAOpX,GAChD,aAAaqX,EAAO7C,UAAUjJ,EAChC,EAAA,EAEA4K,EAA0BmB,KAAO,SAAe7a,GAA0B,OAAAC,EAAApB,KAAAqB,UAAA,UAA1BwX,EAAYnU,EAAU,CAAA,GACpE,MAAMqX,EAASlB,EAA0BiB,OAAOpX,GAChD,aAAaqX,EAAOnD,WAAWC,EACjC,EAAA,EAGAgC,EAA0BoB,WAAa,CACrCpc,SACA0E,YAAaD,EACbyD,eAAgBD,EAChB4J,YAAaD,EACbxJ,eAAgB4F,EAChB+D,cAAe0C,EACf4H,QAAS3D,EACTC,cAIoB,oBAAX7X,SACTA,OAAOka,0BAA4BA,EAGnCla,OAAOwb,SAAWtB,EAGlBla,OAAOyb,oBAAsBvB,EAA0B5F,IACvDtU,OAAO0b,qBAAuBxB,EAA0BmB,KAExDxb,QAAQE,IAAI,2BACZF,QAAQE,IAAI,MAAOma,EAA0BU,cAC7C/a,QAAQE,IAAI"}